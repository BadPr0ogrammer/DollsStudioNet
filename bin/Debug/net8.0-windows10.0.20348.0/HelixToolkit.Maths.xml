<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HelixToolkit.Maths</name>
    </assembly>
    <members>
        <member name="T:HelixToolkit.Maths.AngleSingle">
            <summary>
            Represents a unit independent angle using a single-precision floating-point
            internal representation.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.AngleSingle.Degree">
            <summary>
            A value that specifies the size of a single degree.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.AngleSingle.Minute">
            <summary>
            A value that specifies the size of a single minute.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.AngleSingle.Second">
            <summary>
            A value that specifies the size of a single second.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.AngleSingle.Radian">
            <summary>
            A value that specifies the size of a single radian.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.AngleSingle.Milliradian">
            <summary>
            A value that specifies the size of a single milliradian.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.AngleSingle.Gradian">
            <summary>
            A value that specifies the size of a single gradian.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.AngleSingle.radians_">
            <summary>
            The internal representation of the angle.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.AngleSingle.#ctor(System.Single,HelixToolkit.Maths.AngleType)">
            <summary>
            Initializes a new instance of the SharpDX.AngleSingle structure with the
            given unit dependant angle and unit type.
            </summary>
            <param name="angle">A unit dependant measure of the angle.</param>
            <param name="type">The type of unit the angle argument is.</param>
        </member>
        <member name="M:HelixToolkit.Maths.AngleSingle.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the SharpDX.AngleSingle structure using the
            arc length formula (θ = s/r).
            </summary>
            <param name="arcLength">The measure of the arc.</param>
            <param name="radius">The radius of the circle.</param>
        </member>
        <member name="M:HelixToolkit.Maths.AngleSingle.Wrap">
            <summary>
            Wraps this SharpDX.AngleSingle to be in the range [π, -π].
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.AngleSingle.WrapPositive">
            <summary>
            Wraps this SharpDX.AngleSingle to be in the range [0, 2π).
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.AngleSingle.Revolutions">
            <summary>
            Gets or sets the total number of revolutions this SharpDX.AngleSingle represents.
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.AngleSingle.Degrees">
            <summary>
            Gets or sets the total number of degrees this SharpDX.AngleSingle represents.
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.AngleSingle.Minutes">
            <summary>
            Gets or sets the minutes component of the degrees this SharpDX.AngleSingle represents.
            When setting the minutes, if the value is in the range (-60, 60) the whole degrees are
            not changed; otherwise, the whole degrees may be changed. Fractional values may set
            the seconds component.
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.AngleSingle.Seconds">
            <summary>
            Gets or sets the seconds of the degrees this SharpDX.AngleSingle represents.
            When setting the seconds, if the value is in the range (-60, 60) the whole minutes
            or whole degrees are not changed; otherwise, the whole minutes or whole degrees
            may be changed.
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.AngleSingle.Radians">
            <summary>
            Gets or sets the total number of radians this SharpDX.AngleSingle represents.
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.AngleSingle.Milliradians">
            <summary>
            Gets or sets the total number of milliradians this SharpDX.AngleSingle represents.
            One milliradian is equal to 1/(2000π).
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.AngleSingle.Gradians">
            <summary>
            Gets or sets the total number of gradians this SharpDX.AngleSingle represents.
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.AngleSingle.IsRight">
            <summary>
            Gets a System.Boolean that determines whether this SharpDX.Angle
            is a right angle (i.e. 90° or π/2).
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.AngleSingle.IsStraight">
            <summary>
            Gets a System.Boolean that determines whether this SharpDX.Angle
            is a straight angle (i.e. 180° or π).
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.AngleSingle.IsFullRotation">
            <summary>
            Gets a System.Boolean that determines whether this SharpDX.Angle
            is a full rotation angle (i.e. 360° or 2π).
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.AngleSingle.IsOblique">
            <summary>
            Gets a System.Boolean that determines whether this SharpDX.Angle
            is an oblique angle (i.e. is not 90° or a multiple of 90°).
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.AngleSingle.IsAcute">
            <summary>
            Gets a System.Boolean that determines whether this SharpDX.Angle
            is an acute angle (i.e. less than 90° but greater than 0°).
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.AngleSingle.IsObtuse">
            <summary>
            Gets a System.Boolean that determines whether this SharpDX.Angle
            is an obtuse angle (i.e. greater than 90° but less than 180°).
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.AngleSingle.IsReflex">
            <summary>
            Gets a System.Boolean that determines whether this SharpDX.Angle
            is a reflex angle (i.e. greater than 180° but less than 360°).
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.AngleSingle.Complement">
            <summary>
            Gets a SharpDX.AngleSingle instance that complements this angle (i.e. the two angles add to 90°).
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.AngleSingle.Supplement">
            <summary>
            Gets a SharpDX.AngleSingle instance that supplements this angle (i.e. the two angles add to 180°).
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.AngleSingle.Wrap(HelixToolkit.Maths.AngleSingle)">
            <summary>
            Wraps the SharpDX.AngleSingle given in the value argument to be in the range [π, -π].
            </summary>
            <param name="value">A SharpDX.AngleSingle to wrap.</param>
            <returns>The SharpDX.AngleSingle that is wrapped.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.AngleSingle.WrapPositive(HelixToolkit.Maths.AngleSingle)">
            <summary>
            Wraps the SharpDX.AngleSingle given in the value argument to be in the range [0, 2π).
            </summary>
            <param name="value">A SharpDX.AngleSingle to wrap.</param>
            <returns>The SharpDX.AngleSingle that is wrapped.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.AngleSingle.Min(HelixToolkit.Maths.AngleSingle,HelixToolkit.Maths.AngleSingle)">
            <summary>
            Compares two SharpDX.AngleSingle instances and returns the smaller angle.
            </summary>
            <param name="left">The first SharpDX.AngleSingle instance to compare.</param>
            <param name="right">The second SharpDX.AngleSingle instance to compare.</param>
            <returns>The smaller of the two given SharpDX.AngleSingle instances.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.AngleSingle.Max(HelixToolkit.Maths.AngleSingle,HelixToolkit.Maths.AngleSingle)">
            <summary>
            Compares two SharpDX.AngleSingle instances and returns the greater angle.
            </summary>
            <param name="left">The first SharpDX.AngleSingle instance to compare.</param>
            <param name="right">The second SharpDX.AngleSingle instance to compare.</param>
            <returns>The greater of the two given SharpDX.AngleSingle instances.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.AngleSingle.Add(HelixToolkit.Maths.AngleSingle,HelixToolkit.Maths.AngleSingle)">
            <summary>
            Adds two SharpDX.AngleSingle objects and returns the result.
            </summary>
            <param name="left">The first object to add.</param>
            <param name="right">The second object to add.</param>
            <returns>The value of the two objects added together.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.AngleSingle.Subtract(HelixToolkit.Maths.AngleSingle,HelixToolkit.Maths.AngleSingle)">
            <summary>
            Subtracts two SharpDX.AngleSingle objects and returns the result.
            </summary>
            <param name="left">The first object to subtract.</param>
            <param name="right">The second object to subtract.</param>
            <returns>The value of the two objects subtracted.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.AngleSingle.Multiply(HelixToolkit.Maths.AngleSingle,HelixToolkit.Maths.AngleSingle)">
            <summary>
            Multiplies two SharpDX.AngleSingle objects and returns the result.
            </summary>
            <param name="left">The first object to multiply.</param>
            <param name="right">The second object to multiply.</param>
            <returns>The value of the two objects multiplied together.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.AngleSingle.Divide(HelixToolkit.Maths.AngleSingle,HelixToolkit.Maths.AngleSingle)">
            <summary>
            Divides two SharpDX.AngleSingle objects and returns the result.
            </summary>
            <param name="left">The numerator object.</param>
            <param name="right">The denominator object.</param>
            <returns>The value of the two objects divided.</returns>
        </member>
        <member name="P:HelixToolkit.Maths.AngleSingle.ZeroAngle">
            <summary>
            Gets a new SharpDX.AngleSingle instance that represents the zero angle (i.e. 0°).
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.AngleSingle.RightAngle">
            <summary>
            Gets a new SharpDX.AngleSingle instance that represents the right angle (i.e. 90° or π/2).
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.AngleSingle.StraightAngle">
            <summary>
            Gets a new SharpDX.AngleSingle instance that represents the straight angle (i.e. 180° or π).
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.AngleSingle.FullRotationAngle">
            <summary>
            Gets a new SharpDX.AngleSingle instance that represents the full rotation angle (i.e. 360° or 2π).
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.AngleSingle.op_Equality(HelixToolkit.Maths.AngleSingle,HelixToolkit.Maths.AngleSingle)">
            <summary>
            Returns a System.Boolean that indicates whether the values of two SharpDX.Angle
            objects are equal.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if the left and right parameters have the same value; otherwise, false.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.AngleSingle.op_Inequality(HelixToolkit.Maths.AngleSingle,HelixToolkit.Maths.AngleSingle)">
            <summary>
            Returns a System.Boolean that indicates whether the values of two SharpDX.Angle
            objects are not equal.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if the left and right parameters do not have the same value; otherwise, false.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.AngleSingle.op_LessThan(HelixToolkit.Maths.AngleSingle,HelixToolkit.Maths.AngleSingle)">
            <summary>
            Returns a System.Boolean that indicates whether a SharpDX.Angle
            object is less than another SharpDX.AngleSingle object.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if left is less than right; otherwise, false.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.AngleSingle.op_GreaterThan(HelixToolkit.Maths.AngleSingle,HelixToolkit.Maths.AngleSingle)">
            <summary>
            Returns a System.Boolean that indicates whether a SharpDX.Angle
            object is greater than another SharpDX.AngleSingle object.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if left is greater than right; otherwise, false.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.AngleSingle.op_LessThanOrEqual(HelixToolkit.Maths.AngleSingle,HelixToolkit.Maths.AngleSingle)">
            <summary>
            Returns a System.Boolean that indicates whether a SharpDX.Angle
            object is less than or equal to another SharpDX.AngleSingle object.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if left is less than or equal to right; otherwise, false.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.AngleSingle.op_GreaterThanOrEqual(HelixToolkit.Maths.AngleSingle,HelixToolkit.Maths.AngleSingle)">
            <summary>
            Returns a System.Boolean that indicates whether a SharpDX.Angle
            object is greater than or equal to another SharpDX.AngleSingle object.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if left is greater than or equal to right; otherwise, false.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.AngleSingle.op_UnaryPlus(HelixToolkit.Maths.AngleSingle)">
            <summary>
            Returns the value of the SharpDX.AngleSingle operand. (The sign of
            the operand is unchanged.)
            </summary>
            <param name="value">A SharpDX.AngleSingle object.</param>
            <returns>The value of the value parameter.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.AngleSingle.op_UnaryNegation(HelixToolkit.Maths.AngleSingle)">
            <summary>
            Returns the the negated value of the SharpDX.AngleSingle operand.
            </summary>
            <param name="value">A SharpDX.AngleSingle object.</param>
            <returns>The negated value of the value parameter.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.AngleSingle.op_Addition(HelixToolkit.Maths.AngleSingle,HelixToolkit.Maths.AngleSingle)">
            <summary>
            Adds two SharpDX.AngleSingle objects and returns the result.
            </summary>
            <param name="left">The first object to add.</param>
            <param name="right">The second object to add.</param>
            <returns>The value of the two objects added together.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.AngleSingle.op_Subtraction(HelixToolkit.Maths.AngleSingle,HelixToolkit.Maths.AngleSingle)">
            <summary>
            Subtracts two SharpDX.AngleSingle objects and returns the result.
            </summary>
            <param name="left">The first object to subtract</param>
            <param name="right">The second object to subtract.</param>
            <returns>The value of the two objects subtracted.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.AngleSingle.op_Multiply(HelixToolkit.Maths.AngleSingle,HelixToolkit.Maths.AngleSingle)">
            <summary>
            Multiplies two SharpDX.AngleSingle objects and returns the result.
            </summary>
            <param name="left">The first object to multiply.</param>
            <param name="right">The second object to multiply.</param>
            <returns>The value of the two objects multiplied together.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.AngleSingle.op_Division(HelixToolkit.Maths.AngleSingle,HelixToolkit.Maths.AngleSingle)">
            <summary>
            Divides two SharpDX.AngleSingle objects and returns the result.
            </summary>
            <param name="left">The numerator object.</param>
            <param name="right">The denominator object.</param>
            <returns>The value of the two objects divided.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.AngleSingle.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an integer that
            indicates whether the value of this instance is less than, equal to, or greater
            than the value of the specified object.
            </summary>
            <param name="other">The object to compare.</param>
            <returns>
            A signed integer that indicates the relationship of the current instance
            to the obj parameter. If the value is less than zero, the current instance
            is less than the other. If the value is zero, the current instance is equal
            to the other. If the value is greater than zero, the current instance is
            greater than the other.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.AngleSingle.CompareTo(HelixToolkit.Maths.AngleSingle)">
            <summary>
            Compares this instance to a second SharpDX.AngleSingle and returns
            an integer that indicates whether the value of this instance is less than,
            equal to, or greater than the value of the specified object.
            </summary>
            <param name="other">The object to compare.</param>
            <returns>
            A signed integer that indicates the relationship of the current instance
            to the obj parameter. If the value is less than zero, the current instance
            is less than the other. If the value is zero, the current instance is equal
            to the other. If the value is greater than zero, the current instance is
            greater than the other.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.AngleSingle.Equals(HelixToolkit.Maths.AngleSingle)">
            <summary>
            Returns a value that indicates whether the current instance and a specified
            SharpDX.AngleSingle object have the same value.
            </summary>
            <param name="other">The object to compare.</param>
            <returns>
            Returns true if this SharpDX.AngleSingle object and another have the same value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.AngleSingle.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.AngleSingle.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.AngleSingle.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.AngleSingle.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.AngleSingle.GetHashCode">
            <summary>
            Returns a hash code for this SharpDX.AngleSingle instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.AngleSingle.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance and a specified
            object have the same value.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>
            Returns true if the obj parameter is a SharpDX.AngleSingle object or a type
            capable of implicit conversion to a SharpDX.AngleSingle value, and
            its value is equal to the value of the current SharpDX.Angle
            object; otherwise, false.
            </returns>
        </member>
        <member name="T:HelixToolkit.Maths.Bool32Bit">
            <summary>
            Represents a bool value with size of 32 bits (4 bytes).
            </summary>
        </member>
        <member name="T:HelixToolkit.Maths.Bool4">
            <summary>
            Represents a four dimensional mathematical vector of bool (32 bits per bool value).
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Bool4.SizeInBytes">
            <summary>
            The size of the <see cref = "T:HelixToolkit.Maths.Bool4" /> type, in bytes.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Bool4.False">
            <summary>
            A <see cref = "T:HelixToolkit.Maths.Bool4" /> with all of its components set to false.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Bool4.UnitX">
            <summary>
            The X unit <see cref = "T:HelixToolkit.Maths.Bool4" /> (true, 0, 0, 0).
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Bool4.UnitY">
            <summary>
            The Y unit <see cref = "T:HelixToolkit.Maths.Bool4" /> (0, true, 0, 0).
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Bool4.UnitZ">
            <summary>
            The Z unit <see cref = "T:HelixToolkit.Maths.Bool4" /> (0, 0, true, 0).
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Bool4.UnitW">
            <summary>
            The W unit <see cref = "T:HelixToolkit.Maths.Bool4" /> (0, 0, 0, true).
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Bool4.One">
            <summary>
            A <see cref = "T:HelixToolkit.Maths.Bool4" /> with all of its components set to true.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Bool4.iX">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Bool4.iY">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Bool4.iZ">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Bool4.iW">
            <summary>
            The W component of the vector.
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.Bool4.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.Bool4.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.Bool4.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.Bool4.W">
            <summary>
            The W component of the vector.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.Bool4.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref = "T:HelixToolkit.Maths.Bool4" /> struct.
            </summary>
            <param name = "value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Bool4.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref = "T:HelixToolkit.Maths.Bool4" /> struct.
            </summary>
            <param name = "x">Initial value for the X component of the vector.</param>
            <param name = "y">Initial value for the Y component of the vector.</param>
            <param name = "z">Initial value for the Z component of the vector.</param>
            <param name = "w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Bool4.#ctor(System.Boolean[])">
            <summary>
            Initializes a new instance of the <see cref = "T:HelixToolkit.Maths.Bool4" /> struct.
            </summary>
            <param name = "values">The values to assign to the X, Y, Z, and W components of the vector. This must be an array with four elements.</param>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "values" /> is <c>null</c>.</exception>
            <exception cref = "T:System.ArgumentOutOfRangeException">Thrown when <paramref name = "values" /> contains more or less than four elements.</exception>
        </member>
        <member name="P:HelixToolkit.Maths.Bool4.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, Z, or W component, depending on the index.</value>
            <param name = "index">The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z component, and 3 for the W component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref = "T:System.ArgumentOutOfRangeException">Thrown when the <paramref name = "index" /> is out of the range [0, 3].</exception>
        </member>
        <member name="M:HelixToolkit.Maths.Bool4.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A four-element array containing the components of the vector.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Bool4.op_Equality(HelixToolkit.Maths.Bool4,HelixToolkit.Maths.Bool4)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name = "left">The first value to compare.</param>
            <param name = "right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name = "left" /> has the same value as <paramref name = "right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Bool4.op_Inequality(HelixToolkit.Maths.Bool4,HelixToolkit.Maths.Bool4)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name = "left">The first value to compare.</param>
            <param name = "right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name = "left" /> has a different value than <paramref name = "right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Bool4.ToString">
            <summary>
            Returns a <see cref = "T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref = "T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Bool4.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Bool4.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Bool4.Equals(HelixToolkit.Maths.Bool4@)">
            <summary>
            Determines whether the specified <see cref = "T:HelixToolkit.Maths.Bool4" /> is equal to this instance.
            </summary>
            <param name = "other">The <see cref = "T:HelixToolkit.Maths.Bool4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref = "T:HelixToolkit.Maths.Bool4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Bool4.Equals(HelixToolkit.Maths.Bool4)">
            <summary>
            Determines whether the specified <see cref = "T:HelixToolkit.Maths.Bool4" /> is equal to this instance.
            </summary>
            <param name = "other">The <see cref = "T:HelixToolkit.Maths.Bool4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref = "T:HelixToolkit.Maths.Bool4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Bool4.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref = "T:System.Object" /> is equal to this instance.
            </summary>
            <param name = "obj">The <see cref = "T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref = "T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Bool4.op_Implicit(System.Boolean[])~HelixToolkit.Maths.Bool4">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> array to <see cref="T:HelixToolkit.Maths.Bool4"/>.
            </summary>
            <param name="input">The input.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Bool4.op_Implicit(HelixToolkit.Maths.Bool4)~System.Boolean[]">
            <summary>
            Performs an implicit conversion from <see cref="T:HelixToolkit.Maths.Bool4"/> to <see cref="T:System.Int32"/> array.
            </summary>
            <param name="input">The input.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:HelixToolkit.Maths.BoundingBox">
            <summary>
            Represents an axis-aligned bounding box in three dimensional space.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.BoundingBox.Minimum">
            <summary>
            The minimum point of the box.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.BoundingBox.Maximum">
            <summary>
            The maximum point of the box.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingBox.#ctor(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.BoundingBox"/> struct.
            </summary>
            <param name="minimum">The minimum vertex of the bounding box.</param>
            <param name="maximum">The maximum vertex of the bounding box.</param>
        </member>
        <member name="P:HelixToolkit.Maths.BoundingBox.Width">
            <summary>
            Returns the width of the bounding box
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.BoundingBox.Height">
            <summary>
            Returns the height of the bounding box
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.BoundingBox.Depth">
            <summary>
            Returns the depth of the bounding box
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.BoundingBox.Size">
            <summary>
            Returns the size of the bounding box
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.BoundingBox.Center">
            <summary>
            Returns the center point of the bounding box
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingBox.GetCorners">
            <summary>
            Retrieves the eight corners of the bounding box.
            </summary>
            <returns>An array of points representing the eight corners of the bounding box.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingBox.GetCorners(System.Numerics.Vector3[])">
            <summary>
            Retrieves the eight corners of the bounding box.
            </summary>
            <returns>An array of points representing the eight corners of the bounding box.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingBox.Intersects(HelixToolkit.Maths.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:HelixToolkit.Maths.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingBox.Intersects(HelixToolkit.Maths.Ray@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:HelixToolkit.Maths.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingBox.Intersects(HelixToolkit.Maths.Ray@,System.Numerics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:HelixToolkit.Maths.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="P:System.Numerics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingBox.Intersects(System.Numerics.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:System.Numerics.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingBox.Intersects(HelixToolkit.Maths.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:HelixToolkit.Maths.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingBox.Intersects(HelixToolkit.Maths.BoundingBox)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:HelixToolkit.Maths.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingBox.Intersects(HelixToolkit.Maths.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:HelixToolkit.Maths.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingBox.Intersects(HelixToolkit.Maths.BoundingSphere)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:HelixToolkit.Maths.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingBox.Contains(System.Numerics.Vector3@)">
            <summary>
            Determines whether the current objects contains a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingBox.Contains(System.Numerics.Vector3)">
            <summary>
            Determines whether the current objects contains a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingBox.Contains(HelixToolkit.Maths.BoundingBox@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:HelixToolkit.Maths.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingBox.Contains(HelixToolkit.Maths.BoundingBox)">
            <summary>
            Determines whether the current objects contains a <see cref="T:HelixToolkit.Maths.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingBox.Contains(HelixToolkit.Maths.BoundingSphere@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:HelixToolkit.Maths.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingBox.Contains(HelixToolkit.Maths.BoundingSphere)">
            <summary>
            Determines whether the current objects contains a <see cref="T:HelixToolkit.Maths.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingBox.FromPoints(System.Numerics.Vector3[],HelixToolkit.Maths.BoundingBox@)">
            <summary>
            Constructs a <see cref="T:HelixToolkit.Maths.BoundingBox"/> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the box.</param>
            <param name="result">When the method completes, contains the newly constructed bounding box.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="points"/> is <c>null</c>.</exception>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingBox.FromPoints(System.Numerics.Vector3[])">
            <summary>
            Constructs a <see cref="T:HelixToolkit.Maths.BoundingBox"/> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the box.</param>
            <returns>The newly constructed bounding box.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="points"/> is <c>null</c>.</exception>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingBox.FromSphere(HelixToolkit.Maths.BoundingSphere@,HelixToolkit.Maths.BoundingBox@)">
            <summary>
            Constructs a <see cref="T:HelixToolkit.Maths.BoundingBox"/> from a given sphere.
            </summary>
            <param name="sphere">The sphere that will designate the extents of the box.</param>
            <param name="result">When the method completes, contains the newly constructed bounding box.</param>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingBox.FromSphere(HelixToolkit.Maths.BoundingSphere)">
            <summary>
            Constructs a <see cref="T:HelixToolkit.Maths.BoundingBox"/> from a given sphere.
            </summary>
            <param name="sphere">The sphere that will designate the extents of the box.</param>
            <returns>The newly constructed bounding box.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingBox.Merge(HelixToolkit.Maths.BoundingBox@,HelixToolkit.Maths.BoundingBox@,HelixToolkit.Maths.BoundingBox@)">
            <summary>
            Constructs a <see cref="T:HelixToolkit.Maths.BoundingBox"/> that is as large as the total combined area of the two specified boxes.
            </summary>
            <param name="value1">The first box to merge.</param>
            <param name="value2">The second box to merge.</param>
            <param name="result">When the method completes, contains the newly constructed bounding box.</param>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingBox.Merge(HelixToolkit.Maths.BoundingBox,HelixToolkit.Maths.BoundingBox)">
            <summary>
            Constructs a <see cref="T:HelixToolkit.Maths.BoundingBox"/> that is as large as the total combined area of the two specified boxes.
            </summary>
            <param name="value1">The first box to merge.</param>
            <param name="value2">The second box to merge.</param>
            <returns>The newly constructed bounding box.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingBox.op_Equality(HelixToolkit.Maths.BoundingBox,HelixToolkit.Maths.BoundingBox)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingBox.op_Inequality(HelixToolkit.Maths.BoundingBox,HelixToolkit.Maths.BoundingBox)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingBox.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingBox.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingBox.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingBox.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingBox.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingBox.Equals(HelixToolkit.Maths.BoundingBox@)">
            <summary>
            Determines whether the specified <see cref="T:System.Numerics.Vector4"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Numerics.Vector4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Numerics.Vector4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingBox.Equals(HelixToolkit.Maths.BoundingBox)">
            <summary>
            Determines whether the specified <see cref="T:System.Numerics.Vector4"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Numerics.Vector4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Numerics.Vector4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingBox.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:HelixToolkit.Maths.BoundingBoxHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingBoxHelper.FromPoints(System.Collections.Generic.IList{System.Numerics.Vector3})">
            <summary>
            Get bounding box from list of points
            </summary>
            <param name="points">The points.</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingBoxHelper.Transform(HelixToolkit.Maths.BoundingBox,System.Numerics.Matrix4x4@)">
            <summary>
            Transform AABB with Affine Transformation matrix
            </summary>
            <param name="box"></param>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="T:HelixToolkit.Maths.BoundingFrustum">
            <summary>
            Defines a frustum which can be used in frustum culling, zoom to Extents (zoom to fit) operations, 
            (matrix, frustum, camera) interchange, and many kind of intersection testing.
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.BoundingFrustum.Matrix">
            <summary>
            Gets or sets the Matrix that describes this bounding frustum.
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.BoundingFrustum.Near">
            <summary>
            Gets the near plane of the BoundingFrustum.
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.BoundingFrustum.Far">
            <summary>
            Gets the far plane of the BoundingFrustum.
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.BoundingFrustum.Left">
            <summary>
            Gets the left plane of the BoundingFrustum.
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.BoundingFrustum.Right">
            <summary>
            Gets the right plane of the BoundingFrustum.
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.BoundingFrustum.Top">
            <summary>
            Gets the top plane of the BoundingFrustum.
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.BoundingFrustum.Bottom">
            <summary>
            Gets the bottom plane of the BoundingFrustum.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingFrustum.#ctor(System.Numerics.Matrix4x4)">
            <summary>
            Creates a new instance of BoundingFrustum.
            </summary>
            <param name="matrix">Combined matrix that usually takes view × projection matrix.</param>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingFrustum.Equals(HelixToolkit.Maths.BoundingFrustum@)">
            <summary>
            Determines whether the specified <see cref="T:HelixToolkit.Maths.BoundingFrustum"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:HelixToolkit.Maths.BoundingFrustum"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:HelixToolkit.Maths.BoundingFrustum"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingFrustum.Equals(HelixToolkit.Maths.BoundingFrustum)">
            <summary>
            Determines whether the specified <see cref="T:HelixToolkit.Maths.BoundingFrustum"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:HelixToolkit.Maths.BoundingFrustum"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:HelixToolkit.Maths.BoundingFrustum"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingFrustum.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingFrustum.op_Equality(HelixToolkit.Maths.BoundingFrustum,HelixToolkit.Maths.BoundingFrustum)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingFrustum.op_Inequality(HelixToolkit.Maths.BoundingFrustum,HelixToolkit.Maths.BoundingFrustum)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingFrustum.GetPlane(System.Int32)">
            <summary>
            Returns one of the 6 planes related to this frustum.
            </summary>
            <param name="index">Plane index where 0 fro Left, 1 for Right, 2 for Top, 3 for Bottom, 4 for Near, 5 for Far</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingFrustum.FromCamera(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new frustum relaying on perspective camera parameters
            </summary>
            <param name="cameraPos">The camera pos.</param>
            <param name="lookDir">The look dir.</param>
            <param name="upDir">Up dir.</param>
            <param name="fov">The fov.</param>
            <param name="znear">The znear.</param>
            <param name="zfar">The zfar.</param>
            <param name="aspect">The aspect.</param>
            <returns>The bounding frustum calculated from perspective camera</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingFrustum.FromCamera(HelixToolkit.Maths.FrustumCameraParams)">
            <summary>
            Creates a new frustum relaying on perspective camera parameters
            </summary>
            <param name="cameraParams">The camera params.</param>
            <returns>The bounding frustum from camera params</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingFrustum.GetCorners">
            <summary>
            Returns the 8 corners of the frustum, element0 is Near1 (near right down corner)
            , element1 is Near2 (near right top corner)
            , element2 is Near3 (near Left top corner)
            , element3 is Near4 (near Left down corner)
            , element4 is Far1 (far right down corner)
            , element5 is Far2 (far right top corner)
            , element6 is Far3 (far left top corner)
            , element7 is Far4 (far left down corner)
            </summary>
            <returns>The 8 corners of the frustum</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingFrustum.GetCorners(System.Numerics.Vector3[])">
            <summary>
            Returns the 8 corners of the frustum, element0 is Near1 (near right down corner)
            , element1 is Near2 (near right top corner)
            , element2 is Near3 (near Left top corner)
            , element3 is Near4 (near Left down corner)
            , element4 is Far1 (far right down corner)
            , element5 is Far2 (far right top corner)
            , element6 is Far3 (far left top corner)
            , element7 is Far4 (far left down corner)
            </summary>
            <returns>The 8 corners of the frustum</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingFrustum.GetCameraParams">
            <summary>
            Extracts perspective camera parameters from the frustum, doesn't work with orthographic frustums.
            </summary>
            <returns>Perspective camera parameters from the frustum</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingFrustum.Contains(System.Numerics.Vector3@)">
            <summary>
            Checks whether a point lay inside, intersects or lay outside the frustum.
            </summary>
            <param name="point">The point.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingFrustum.Contains(System.Numerics.Vector3)">
            <summary>
            Checks whether a point lay inside, intersects or lay outside the frustum.
            </summary>
            <param name="point">The point.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingFrustum.Contains(HelixToolkit.Maths.BoundingBox@)">
            <summary>
            Determines the intersection relationship between the frustum and a bounding box.
            </summary>
            <param name="box">The box.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingFrustum.Contains(HelixToolkit.Maths.BoundingBox)">
            <summary>
            Determines the intersection relationship between the frustum and a bounding box.
            </summary>
            <param name="box">The box.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingFrustum.Contains(HelixToolkit.Maths.BoundingBox@,HelixToolkit.Maths.ContainmentType@)">
            <summary>
            Determines the intersection relationship between the frustum and a bounding box.
            </summary>
            <param name="box">The box.</param>
            <param name="result">Type of the containment.</param>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingFrustum.Contains(HelixToolkit.Maths.BoundingSphere@)">
            <summary>
            Determines the intersection relationship between the frustum and a bounding sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingFrustum.Contains(HelixToolkit.Maths.BoundingSphere)">
            <summary>
            Determines the intersection relationship between the frustum and a bounding sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingFrustum.Contains(HelixToolkit.Maths.BoundingSphere@,HelixToolkit.Maths.ContainmentType@)">
            <summary>
            Determines the intersection relationship between the frustum and a bounding sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">Type of the containment.</param>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingFrustum.Intersects(HelixToolkit.Maths.BoundingSphere@)">
            <summary>
            Checks whether the current BoundingFrustum intersects a BoundingSphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingFrustum.Intersects(HelixToolkit.Maths.BoundingSphere@,System.Boolean@)">
            <summary>
            Checks whether the current BoundingFrustum intersects a BoundingSphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">Set to <c>true</c> if the current BoundingFrustum intersects a BoundingSphere.</param>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingFrustum.Intersects(HelixToolkit.Maths.BoundingBox@)">
            <summary>
            Checks whether the current BoundingFrustum intersects a BoundingBox.
            </summary>
            <param name="box">The box.</param>
            <returns><c>true</c> if the current BoundingFrustum intersects a BoundingSphere.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingFrustum.Intersects(HelixToolkit.Maths.BoundingBox@,System.Boolean@)">
            <summary>
            Checks whether the current BoundingFrustum intersects a BoundingBox.
            </summary>
            <param name="box">The box.</param>
            <param name="result"><c>true</c> if the current BoundingFrustum intersects a BoundingSphere.</param>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingFrustum.Intersects(System.Numerics.Plane@)">
            <summary>
            Checks whether the current BoundingFrustum intersects the specified Plane.
            </summary>
            <param name="plane">The plane.</param>
            <returns>Plane intersection type.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingFrustum.Intersects(System.Numerics.Plane@,HelixToolkit.Maths.PlaneIntersectionType@)">
            <summary>
            Checks whether the current BoundingFrustum intersects the specified Plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="result">Plane intersection type.</param>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingFrustum.GetWidthAtDepth(System.Single)">
            <summary>
            Get the width of the frustum at specified depth.
            </summary>
            <param name="depth">the depth at which to calculate frustum width.</param>
            <returns>With of the frustum at the specified depth</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingFrustum.GetHeightAtDepth(System.Single)">
            <summary>
            Get the height of the frustum at specified depth.
            </summary>
            <param name="depth">the depth at which to calculate frustum height.</param>
            <returns>Height of the frustum at the specified depth</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingFrustum.Intersects(HelixToolkit.Maths.Ray@)">
            <summary>
            Checks whether the current BoundingFrustum intersects the specified Ray.
            </summary>
            <param name="ray">The ray.</param>
            <returns><c>true</c> if the current BoundingFrustum intersects the specified Ray.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingFrustum.Intersects(HelixToolkit.Maths.Ray@,System.Nullable{System.Single}@,System.Nullable{System.Single}@)">
            <summary>
            Checks whether the current BoundingFrustum intersects the specified Ray.
            </summary>
            <param name="ray">The Ray to check for intersection with.</param>
            <param name="inDistance">The distance at which the ray enters the frustum if there is an intersection and the ray starts outside the frustum.</param>
            <param name="outDistance">The distance at which the ray exits the frustum if there is an intersection.</param>
            <returns><c>true</c> if the current BoundingFrustum intersects the specified Ray.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingFrustum.GetZoomToExtentsShiftDistance(System.Numerics.Vector3[])">
            <summary>
            Get the distance which when added to camera position along the lookat direction will do the effect of zoom to extents (zoom to fit) operation,
            so all the passed points will fit in the current view.
            if the returned value is positive, the camera will move toward the lookat direction (ZoomIn).
            if the returned value is negative, the camera will move in the reverse direction of the lookat direction (ZoomOut).
            </summary>
            <param name="points">The points.</param>
            <returns>The zoom to fit distance</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingFrustum.GetZoomToExtentsShiftDistance(HelixToolkit.Maths.BoundingBox@)">
            <summary>
            Get the distance which when added to camera position along the lookat direction will do the effect of zoom to extents (zoom to fit) operation,
            so all the passed points will fit in the current view.
            if the returned value is positive, the camera will move toward the lookat direction (ZoomIn).
            if the returned value is negative, the camera will move in the reverse direction of the lookat direction (ZoomOut).
            </summary>
            <param name="boundingBox">The bounding box.</param>
            <returns>The zoom to fit distance</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingFrustum.GetZoomToExtentsShiftVector(System.Numerics.Vector3[])">
            <summary>
            Get the vector shift which when added to camera position will do the effect of zoom to extents (zoom to fit) operation,
            so all the passed points will fit in the current view.
            </summary>
            <param name="points">The points.</param>
            <returns>The zoom to fit vector</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingFrustum.GetZoomToExtentsShiftVector(HelixToolkit.Maths.BoundingBox@)">
            <summary>
            Get the vector shift which when added to camera position will do the effect of zoom to extents (zoom to fit) operation,
            so all the passed points will fit in the current view.
            </summary>
            <param name="boundingBox">The bounding box.</param>
            <returns>The zoom to fit vector</returns>
        </member>
        <member name="P:HelixToolkit.Maths.BoundingFrustum.IsOrthographic">
            <summary>
            Indicate whether the current BoundingFrustrum is Orthographic.
            </summary>
            <value>
            	<c>true</c> if the current BoundingFrustrum is Orthographic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:HelixToolkit.Maths.BoundingSphere">
            <summary>
            Represents a bounding sphere in three dimensional space.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.BoundingSphere.Center">
            <summary>
            The center of the sphere in three dimensional space.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.BoundingSphere.Radius">
            <summary>
            The radius of the sphere.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingSphere.#ctor(System.Numerics.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.BoundingSphere"/> struct.
            </summary>
            <param name="center">The center of the sphere in three dimensional space.</param>
            <param name="radius">The radius of the sphere.</param>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingSphere.Intersects(HelixToolkit.Maths.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:HelixToolkit.Maths.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingSphere.Intersects(HelixToolkit.Maths.Ray@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:HelixToolkit.Maths.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingSphere.Intersects(HelixToolkit.Maths.Ray@,System.Numerics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:HelixToolkit.Maths.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="P:System.Numerics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingSphere.Intersects(System.Numerics.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:System.Numerics.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingSphere.Intersects(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingSphere.Intersects(HelixToolkit.Maths.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:HelixToolkit.Maths.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingSphere.Intersects(HelixToolkit.Maths.BoundingBox)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:HelixToolkit.Maths.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingSphere.Intersects(HelixToolkit.Maths.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:HelixToolkit.Maths.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingSphere.Intersects(HelixToolkit.Maths.BoundingSphere)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:HelixToolkit.Maths.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingSphere.Contains(System.Numerics.Vector3@)">
            <summary>
            Determines whether the current objects contains a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingSphere.Contains(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Determines whether the current objects contains a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingSphere.Contains(HelixToolkit.Maths.BoundingBox@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:HelixToolkit.Maths.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingSphere.Contains(HelixToolkit.Maths.BoundingSphere@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:HelixToolkit.Maths.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingSphere.FromPoints(System.Numerics.Vector3[],System.Int32,System.Int32,HelixToolkit.Maths.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:HelixToolkit.Maths.BoundingSphere" /> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the sphere.</param>
            <param name="start">The start index from points array to start compute the bounding sphere.</param>
            <param name="count">The count of points to process to compute the bounding sphere.</param>
            <param name="result">When the method completes, contains the newly constructed bounding sphere.</param>
            <exception cref="T:System.ArgumentNullException">points</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            start
            or
            count
            </exception>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingSphere.FromPoints(System.Numerics.Vector3[],HelixToolkit.Maths.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:HelixToolkit.Maths.BoundingSphere"/> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the sphere.</param>
            <param name="result">When the method completes, contains the newly constructed bounding sphere.</param>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingSphere.FromPoints(System.Numerics.Vector3[])">
            <summary>
            Constructs a <see cref="T:HelixToolkit.Maths.BoundingSphere"/> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the sphere.</param>
            <returns>The newly constructed bounding sphere.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingSphere.FromBox(HelixToolkit.Maths.BoundingBox@,HelixToolkit.Maths.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:HelixToolkit.Maths.BoundingSphere"/> from a given box.
            </summary>
            <param name="box">The box that will designate the extents of the sphere.</param>
            <param name="result">When the method completes, the newly constructed bounding sphere.</param>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingSphere.FromBox(HelixToolkit.Maths.BoundingBox)">
            <summary>
            Constructs a <see cref="T:HelixToolkit.Maths.BoundingSphere"/> from a given box.
            </summary>
            <param name="box">The box that will designate the extents of the sphere.</param>
            <returns>The newly constructed bounding sphere.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingSphere.Merge(HelixToolkit.Maths.BoundingSphere@,HelixToolkit.Maths.BoundingSphere@,HelixToolkit.Maths.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:HelixToolkit.Maths.BoundingSphere"/> that is the as large as the total combined area of the two specified spheres.
            </summary>
            <param name="value1">The first sphere to merge.</param>
            <param name="value2">The second sphere to merge.</param>
            <param name="result">When the method completes, contains the newly constructed bounding sphere.</param>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingSphere.Merge(HelixToolkit.Maths.BoundingSphere,HelixToolkit.Maths.BoundingSphere)">
            <summary>
            Constructs a <see cref="T:HelixToolkit.Maths.BoundingSphere"/> that is the as large as the total combined area of the two specified spheres.
            </summary>
            <param name="value1">The first sphere to merge.</param>
            <param name="value2">The second sphere to merge.</param>
            <returns>The newly constructed bounding sphere.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingSphere.op_Equality(HelixToolkit.Maths.BoundingSphere,HelixToolkit.Maths.BoundingSphere)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingSphere.op_Inequality(HelixToolkit.Maths.BoundingSphere,HelixToolkit.Maths.BoundingSphere)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingSphere.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingSphere.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingSphere.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingSphere.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingSphere.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingSphere.Equals(HelixToolkit.Maths.BoundingSphere@)">
            <summary>
            Determines whether the specified <see cref="T:System.Numerics.Vector4"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Numerics.Vector4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Numerics.Vector4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingSphere.Equals(HelixToolkit.Maths.BoundingSphere)">
            <summary>
            Determines whether the specified <see cref="T:System.Numerics.Vector4"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Numerics.Vector4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Numerics.Vector4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingSphere.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingSphereExtensions.GetBoundingSphere(System.Collections.Generic.IList{System.Numerics.Vector3},System.Int32,System.Int32)">
            <summary>
            Get bounding sphere from point list.
            </summary>
            <param name="points"></param>
            <param name="start"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingSphereExtensions.GetBoundingSphere(System.Collections.Generic.IList{System.Numerics.Vector3})">
            <summary>
            Froms the points.
            </summary>
            <param name="points">The points.</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingSphereExtensions.TransformBoundingSphere(HelixToolkit.Maths.BoundingSphere,System.Numerics.Matrix4x4)">
            <summary>
            Transforms the bounding sphere.
            </summary>
            <param name="b">The b.</param>
            <param name="m">The m.</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingSphereExtensions.DistanceTo(HelixToolkit.Maths.BoundingSphere,System.Numerics.Vector3)">
            <summary>
            Calculates the distance from a point to the nearest point on the sphere surface.
            </summary>
            <param name="b">The BoundingSphere</param>
            <param name="point">The point</param>
            <returns>The distance</returns>
        </member>
        <member name="M:HelixToolkit.Maths.BoundingSphereExtensions.Intersects(HelixToolkit.Maths.BoundingSphere,HelixToolkit.Maths.Ray,System.Numerics.Vector3[]@)">
            <summary>
            Gets the intersection with the specified ray.
            </summary>
            <param name="box">The BoundingSphere</param>
            <param name="ray">The ray.</param>
            <param name="points">The intersection point(s).</param>
            <returns>The intersection points sorted by distance from the ray origin.</returns>
        </member>
        <member name="T:HelixToolkit.Maths.Collision">
            <summary>
            Contains static methods to help in determining intersections, containment, etc.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.ClosestPointPointTriangle(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Determines the closest point between a point and a triangle.
            </summary>
            <param name="point">The point to test.</param>
            <param name="vertex1">The first vertex to test.</param>
            <param name="vertex2">The second vertex to test.</param>
            <param name="vertex3">The third vertex to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.ClosestPointPlanePoint(System.Numerics.Plane@,System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Determines the closest point between a <see cref="T:System.Numerics.Plane"/> and a point.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">The point to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.ClosestPointBoxPoint(HelixToolkit.Maths.BoundingBox@,System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Determines the closest point between a <see cref="T:HelixToolkit.Maths.BoundingBox"/> and a point.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">The point to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.ClosestPointSpherePoint(HelixToolkit.Maths.BoundingSphere@,System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Determines the closest point between a <see cref="T:HelixToolkit.Maths.BoundingSphere"/> and a point.
            </summary>
            <param name="sphere"></param>
            <param name="point">The point to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects;
            or, if the point is directly in the center of the sphere, contains <see cref="P:System.Numerics.Vector3.Zero"/>.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.ClosestPointSphereSphere(HelixToolkit.Maths.BoundingSphere@,HelixToolkit.Maths.BoundingSphere@,System.Numerics.Vector3@)">
            <summary>
            Determines the closest point between a <see cref="T:HelixToolkit.Maths.BoundingSphere"/> and a <see cref="T:HelixToolkit.Maths.BoundingSphere"/>.
            </summary>
            <param name="sphere1">The first sphere to test.</param>
            <param name="sphere2">The second sphere to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects;
            or, if the point is directly in the center of the sphere, contains <see cref="P:System.Numerics.Vector3.Zero"/>.</param>
            <remarks>
            If the two spheres are overlapping, but not directly on top of each other, the closest point
            is the 'closest' point of intersection. This can also be considered is the deepest point of
            intersection.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.DistancePlanePoint(System.Numerics.Plane@,System.Numerics.Vector3@)">
            <summary>
            Determines the distance between a <see cref="T:System.Numerics.Plane"/> and a point.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">The point to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.DistanceBoxPoint(HelixToolkit.Maths.BoundingBox@,System.Numerics.Vector3@)">
            <summary>
            Determines the distance between a <see cref="T:HelixToolkit.Maths.BoundingBox"/> and a point.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">The point to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.DistanceBoxBox(HelixToolkit.Maths.BoundingBox@,HelixToolkit.Maths.BoundingBox@)">
            <summary>
            Determines the distance between a <see cref="T:HelixToolkit.Maths.BoundingBox"/> and a <see cref="T:HelixToolkit.Maths.BoundingBox"/>.
            </summary>
            <param name="box1">The first box to test.</param>
            <param name="box2">The second box to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.DistanceSpherePoint(HelixToolkit.Maths.BoundingSphere@,System.Numerics.Vector3@)">
            <summary>
            Determines the distance between a <see cref="T:HelixToolkit.Maths.BoundingSphere"/> and a point.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="point">The point to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.DistanceSphereSphere(HelixToolkit.Maths.BoundingSphere@,HelixToolkit.Maths.BoundingSphere@)">
            <summary>
            Determines the distance between a <see cref="T:HelixToolkit.Maths.BoundingSphere"/> and a <see cref="T:HelixToolkit.Maths.BoundingSphere"/>.
            </summary>
            <param name="sphere1">The first sphere to test.</param>
            <param name="sphere2">The second sphere to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.RayIntersectsPoint(HelixToolkit.Maths.Ray@,System.Numerics.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:HelixToolkit.Maths.Ray"/> and a point.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersect.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.RayIntersectsRay(HelixToolkit.Maths.Ray@,HelixToolkit.Maths.Ray@,System.Numerics.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:HelixToolkit.Maths.Ray"/> and a <see cref="T:HelixToolkit.Maths.Ray"/>.
            </summary>
            <param name="ray1">The first ray to test.</param>
            <param name="ray2">The second ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="P:System.Numerics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersect.</returns>
            <remarks>
            This method performs a ray vs ray intersection test based on the following formula
            from Goldman.
            <code>s = det([o_2 - o_1, d_2, d_1 x d_2]) / ||d_1 x d_2||^2</code>
            <code>t = det([o_2 - o_1, d_1, d_1 x d_2]) / ||d_1 x d_2||^2</code>
            Where o_1 is the position of the first ray, o_2 is the position of the second ray,
            d_1 is the normalized direction of the first ray, d_2 is the normalized direction
            of the second ray, det denotes the determinant of a matrix, x denotes the cross
            product, [ ] denotes a matrix, and || || denotes the length or magnitude of a vector.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.RayIntersectsPlane(HelixToolkit.Maths.Ray@,System.Numerics.Plane@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:HelixToolkit.Maths.Ray"/> and a <see cref="T:System.Numerics.Plane"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="plane">The plane to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersect.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.RayIntersectsPlane(HelixToolkit.Maths.Ray@,System.Numerics.Plane@,System.Numerics.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:HelixToolkit.Maths.Ray"/> and a <see cref="T:System.Numerics.Plane"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="plane">The plane to test</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="P:System.Numerics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.RayIntersectsTriangle(HelixToolkit.Maths.Ray@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:HelixToolkit.Maths.Ray"/> and a triangle.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
            <remarks>
            This method tests if the ray intersects either the front or back of the triangle.
            If the ray is parallel to the triangle's plane, no intersection is assumed to have
            happened. If the intersection of the ray and the triangle is behind the origin of
            the ray, no intersection is assumed to have happened. In both cases of assumptions,
            this method returns false.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.RayIntersectsTriangle(HelixToolkit.Maths.Ray@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:HelixToolkit.Maths.Ray"/> and a triangle.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="P:System.Numerics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.RayIntersectsBox(HelixToolkit.Maths.Ray@,HelixToolkit.Maths.BoundingBox@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:HelixToolkit.Maths.Ray"/> and a <see cref="T:HelixToolkit.Maths.BoundingBox"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="box">The box to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.RayIntersectsBox(HelixToolkit.Maths.Ray@,HelixToolkit.Maths.BoundingBox@,System.Numerics.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:HelixToolkit.Maths.Ray"/> and a <see cref="T:System.Numerics.Plane"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="box">The box to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="P:System.Numerics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.RayIntersectsSphere(HelixToolkit.Maths.Ray@,HelixToolkit.Maths.BoundingSphere@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:HelixToolkit.Maths.Ray"/> and a <see cref="T:HelixToolkit.Maths.BoundingSphere"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="sphere">The sphere to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.RayIntersectsSphere(HelixToolkit.Maths.Ray@,HelixToolkit.Maths.BoundingSphere@,System.Numerics.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:HelixToolkit.Maths.Ray"/> and a <see cref="T:HelixToolkit.Maths.BoundingSphere"/>. 
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="sphere">The sphere to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="P:System.Numerics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.PlaneIntersectsPoint(System.Numerics.Plane@,System.Numerics.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:System.Numerics.Plane"/> and a point.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.PlaneIntersectsPlane(System.Numerics.Plane@,System.Numerics.Plane@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:System.Numerics.Plane"/> and a <see cref="T:System.Numerics.Plane"/>.
            </summary>
            <param name="plane1">The first plane to test.</param>
            <param name="plane2">The second plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.PlaneIntersectsPlane(System.Numerics.Plane@,System.Numerics.Plane@,HelixToolkit.Maths.Ray@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:System.Numerics.Plane"/> and a <see cref="T:System.Numerics.Plane"/>.
            </summary>
            <param name="plane1">The first plane to test.</param>
            <param name="plane2">The second plane to test.</param>
            <param name="line">When the method completes, contains the line of intersection
            as a <see cref="T:HelixToolkit.Maths.Ray"/>, or a zero ray if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
            <remarks>
            Although a ray is set to have an origin, the ray returned by this method is really
            a line in three dimensions which has no real origin. The ray is considered valid when
            both the positive direction is used and when the negative direction is used.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.PlaneIntersectsTriangle(System.Numerics.Plane@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:System.Numerics.Plane"/> and a triangle.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.PlaneIntersectsBox(System.Numerics.Plane@,HelixToolkit.Maths.BoundingBox@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:System.Numerics.Plane"/> and a <see cref="T:HelixToolkit.Maths.BoundingBox"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.PlaneIntersectsSphere(System.Numerics.Plane@,HelixToolkit.Maths.BoundingSphere@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:System.Numerics.Plane"/> and a <see cref="T:HelixToolkit.Maths.BoundingSphere"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.BoxIntersectsBox(HelixToolkit.Maths.BoundingBox@,HelixToolkit.Maths.BoundingBox@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:HelixToolkit.Maths.BoundingBox"/> and a <see cref="T:HelixToolkit.Maths.BoundingBox"/>.
            </summary>
            <param name="box1">The first box to test.</param>
            <param name="box2">The second box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.BoxIntersectsSphere(HelixToolkit.Maths.BoundingBox@,HelixToolkit.Maths.BoundingSphere@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:HelixToolkit.Maths.BoundingBox"/> and a <see cref="T:HelixToolkit.Maths.BoundingSphere"/>.
            </summary>
            <param name="box">The box to test.</param>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.SphereIntersectsTriangle(HelixToolkit.Maths.BoundingSphere@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:HelixToolkit.Maths.BoundingSphere"/> and a triangle.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.SphereIntersectsSphere(HelixToolkit.Maths.BoundingSphere@,HelixToolkit.Maths.BoundingSphere@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:HelixToolkit.Maths.BoundingSphere"/> and a <see cref="T:HelixToolkit.Maths.BoundingSphere"/>.
            </summary>
            <param name="sphere1">First sphere to test.</param>
            <param name="sphere2">Second sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.BoxContainsPoint(HelixToolkit.Maths.BoundingBox@,System.Numerics.Vector3@)">
            <summary>
            Determines whether a <see cref="T:HelixToolkit.Maths.BoundingBox"/> contains a point.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.BoxContainsBox(HelixToolkit.Maths.BoundingBox@,HelixToolkit.Maths.BoundingBox@)">
            <summary>
            Determines whether a <see cref="T:HelixToolkit.Maths.BoundingBox"/> contains a <see cref="T:HelixToolkit.Maths.BoundingBox"/>.
            </summary>
            <param name="box1">The first box to test.</param>
            <param name="box2">The second box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.BoxContainsSphere(HelixToolkit.Maths.BoundingBox@,HelixToolkit.Maths.BoundingSphere@)">
            <summary>
            Determines whether a <see cref="T:HelixToolkit.Maths.BoundingBox"/> contains a <see cref="T:HelixToolkit.Maths.BoundingSphere"/>.
            </summary>
            <param name="box">The box to test.</param>
            <param name="sphere">The sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.SphereContainsPoint(HelixToolkit.Maths.BoundingSphere@,System.Numerics.Vector3@)">
            <summary>
            Determines whether a <see cref="T:HelixToolkit.Maths.BoundingSphere"/> contains a point.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.SphereContainsTriangle(HelixToolkit.Maths.BoundingSphere@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Determines whether a <see cref="T:HelixToolkit.Maths.BoundingSphere"/> contains a triangle.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.SphereContainsBox(HelixToolkit.Maths.BoundingSphere@,HelixToolkit.Maths.BoundingBox@)">
            <summary>
            Determines whether a <see cref="T:HelixToolkit.Maths.BoundingSphere"/> contains a <see cref="T:HelixToolkit.Maths.BoundingBox"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="box">The box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Collision.SphereContainsSphere(HelixToolkit.Maths.BoundingSphere@,HelixToolkit.Maths.BoundingSphere@)">
            <summary>
            Determines whether a <see cref="T:HelixToolkit.Maths.BoundingSphere"/> contains a <see cref="T:HelixToolkit.Maths.BoundingSphere"/>.
            </summary>
            <param name="sphere1">The first sphere to test.</param>
            <param name="sphere2">The second sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="T:HelixToolkit.Maths.Color">
            <summary>
            Represents a 32-bit color (4 bytes) in the form of RGBA (in byte order: R, G, B, A).
            </summary>
            <summary>
            List of predefined <see cref="T:HelixToolkit.Maths.Color"/>.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.R">
            <summary>
            The red component of the color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.G">
            <summary>
            The green component of the color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.B">
            <summary>
            The blue component of the color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.A">
            <summary>
            The alpha component of the color.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.Color.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Color"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Color"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Color"/> struct.
            </summary>
            <param name="red">The red component of the color.</param>
            <param name="green">The green component of the color.</param>
            <param name="blue">The blue component of the color.</param>
            <param name="alpha">The alpha component of the color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Color"/> struct.  Alpha is set to 255.
            </summary>
            <param name="red">The red component of the color.</param>
            <param name="green">The green component of the color.</param>
            <param name="blue">The blue component of the color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Color"/> struct.  Passed values are clamped within byte range.
            </summary>
            <param name="red">The red component of the color.</param>
            <param name="green">The green component of the color.</param>
            <param name="blue">The blue component of the color.</param>
            <param name="alpha">The alpha component of the color</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Color"/> struct.  Alpha is set to 255.  Passed values are clamped within byte range.
            </summary>
            <param name="red">The red component of the color.</param>
            <param name="green">The green component of the color.</param>
            <param name="blue">The blue component of the color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Color"/> struct.
            </summary>
            <param name="red">The red component of the color.</param>
            <param name="green">The green component of the color.</param>
            <param name="blue">The blue component of the color.</param>
            <param name="alpha">The alpha component of the color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Color"/> struct.  Alpha is set to 255.
            </summary>
            <param name="red">The red component of the color.</param>
            <param name="green">The green component of the color.</param>
            <param name="blue">The blue component of the color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color.#ctor(System.Numerics.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Color"/> struct.
            </summary>
            <param name="value">The red, green, blue, and alpha components of the color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color.#ctor(System.Numerics.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Color"/> struct.
            </summary>
            <param name="value">The red, green, and blue components of the color.</param>
            <param name="alpha">The alpha component of the color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color.#ctor(System.Numerics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Color"/> struct. Alpha is set to 255.
            </summary>
            <param name="value">The red, green, and blue components of the color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Color"/> struct.
            </summary>
            <param name="rgba">A packed integer containing all four color components in RGBA order.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Color"/> struct.
            </summary>
            <param name="rgba">A packed integer containing all four color components in RGBA order.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Color"/> struct.
            </summary>
            <param name="values">The values to assign to the red, green, and blue, alpha components of the color. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="M:HelixToolkit.Maths.Color.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Color"/> struct.
            </summary>
            <param name="values">The values to assign to the alpha, red, green, and blue components of the color. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="P:HelixToolkit.Maths.Color.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the alpha, red, green, or blue component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the alpha component, 1 for the red component, 2 for the green component, and 3 for the blue component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="M:HelixToolkit.Maths.Color.ToBgra">
            <summary>
            Converts the color into a packed integer.
            </summary>
            <returns>A packed integer containing all four color components.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.ToRgba">
            <summary>
            Converts the color into a packed integer.
            </summary>
            <returns>A packed integer containing all four color components.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.ToAbgr">
            <summary>
            Converts the color into a packed integer.
            </summary>
            <returns>A packed integer containing all four color components.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.ToVector3">
            <summary>
            Converts the color into a three component vector.
            </summary>
            <returns>A three component vector containing the red, green, and blue components of the color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.ToColor3">
            <summary>
            Converts the color into a three component color.
            </summary>
            <returns>A three component color containing the red, green, and blue components of the color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.ToVector4">
            <summary>
            Converts the color into a four component vector.
            </summary>
            <returns>A four component vector containing all four color components.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.ToArray">
            <summary>
            Creates an array containing the elements of the color.
            </summary>
            <returns>A four-element array containing the components of the color in RGBA order.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.GetBrightness">
            <summary>
            Gets the brightness.
            </summary>
            <returns>The Hue-Saturation-Brightness (HSB) brightness for this <see cref="T:HelixToolkit.Maths.Color"/></returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.GetHue">
            <summary>
            Gets the hue.
            </summary>
            <returns>The Hue-Saturation-Brightness (HSB) hue for this <see cref="T:HelixToolkit.Maths.Color"/></returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.GetSaturation">
            <summary>
            Gets the saturation.
            </summary>
            <returns>The Hue-Saturation-Brightness (HSB) saturation for this <see cref="T:HelixToolkit.Maths.Color"/></returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.Add(HelixToolkit.Maths.Color@,HelixToolkit.Maths.Color@,HelixToolkit.Maths.Color@)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <param name="result">When the method completes, completes the sum of the two colors.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color.Add(HelixToolkit.Maths.Color,HelixToolkit.Maths.Color)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <returns>The sum of the two colors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.Subtract(HelixToolkit.Maths.Color@,HelixToolkit.Maths.Color@,HelixToolkit.Maths.Color@)">
            <summary>
            Subtracts two colors.
            </summary>
            <param name="left">The first color to subtract.</param>
            <param name="right">The second color to subtract.</param>
            <param name="result">WHen the method completes, contains the difference of the two colors.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color.Subtract(HelixToolkit.Maths.Color,HelixToolkit.Maths.Color)">
            <summary>
            Subtracts two colors.
            </summary>
            <param name="left">The first color to subtract.</param>
            <param name="right">The second color to subtract</param>
            <returns>The difference of the two colors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.Modulate(HelixToolkit.Maths.Color@,HelixToolkit.Maths.Color@,HelixToolkit.Maths.Color@)">
            <summary>
            Modulates two colors.
            </summary>
            <param name="left">The first color to modulate.</param>
            <param name="right">The second color to modulate.</param>
            <param name="result">When the method completes, contains the modulated color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color.Modulate(HelixToolkit.Maths.Color,HelixToolkit.Maths.Color)">
            <summary>
            Modulates two colors.
            </summary>
            <param name="left">The first color to modulate.</param>
            <param name="right">The second color to modulate.</param>
            <returns>The modulated color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.Scale(HelixToolkit.Maths.Color@,System.Single,HelixToolkit.Maths.Color@)">
            <summary>
            Scales a color.
            </summary>
            <param name="value">The color to scale.</param>
            <param name="scale">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color.Scale(HelixToolkit.Maths.Color,System.Single)">
            <summary>
            Scales a color.
            </summary>
            <param name="value">The color to scale.</param>
            <param name="scale">The amount by which to scale.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.Negate(HelixToolkit.Maths.Color@,HelixToolkit.Maths.Color@)">
            <summary>
            Negates a color.
            </summary>
            <param name="value">The color to negate.</param>
            <param name="result">When the method completes, contains the negated color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color.Negate(HelixToolkit.Maths.Color)">
            <summary>
            Negates a color.
            </summary>
            <param name="value">The color to negate.</param>
            <returns>The negated color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.Clamp(HelixToolkit.Maths.Color@,HelixToolkit.Maths.Color@,HelixToolkit.Maths.Color@,HelixToolkit.Maths.Color@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color.Premultiply(HelixToolkit.Maths.Color@,HelixToolkit.Maths.Color@)">
            <summary>
            Computes the premultiplied value of the provided color.
            </summary>
            <param name="value">The non-premultiplied value.</param>
            <param name="result">The premultiplied result.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color.Premultiply(HelixToolkit.Maths.Color)">
            <summary>
            Computes the premultiplied value of the provided color.
            </summary>
            <param name="value">The non-premultiplied value.</param>
            <returns>The premultiplied result.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.FromBgra(System.Int32)">
            <summary>
            Converts the color from a packed BGRA integer.
            </summary>
            <param name="color">A packed integer containing all four color components in BGRA order</param>
            <returns>A color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.FromBgra(System.UInt32)">
            <summary>
            Converts the color from a packed BGRA integer.
            </summary>
            <param name="color">A packed integer containing all four color components in BGRA order</param>
            <returns>A color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.FromAbgr(System.Int32)">
            <summary>
            Converts the color from a packed ABGR integer.
            </summary>
            <param name="color">A packed integer containing all four color components in ABGR order</param>
            <returns>A color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.FromAbgr(System.UInt32)">
            <summary>
            Converts the color from a packed ABGR integer.
            </summary>
            <param name="color">A packed integer containing all four color components in ABGR order</param>
            <returns>A color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.FromRgba(System.Int32)">
            <summary>
            Converts the color from a packed BGRA integer.
            </summary>
            <param name="color">A packed integer containing all four color components in RGBA order</param>
            <returns>A color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.FromRgba(System.UInt32)">
            <summary>
            Converts the color from a packed BGRA integer.
            </summary>
            <param name="color">A packed integer containing all four color components in RGBA order</param>
            <returns>A color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.Clamp(HelixToolkit.Maths.Color,HelixToolkit.Maths.Color,HelixToolkit.Maths.Color)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.Lerp(HelixToolkit.Maths.Color@,HelixToolkit.Maths.Color@,System.Single,HelixToolkit.Maths.Color@)">
            <summary>
            Performs a linear interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two colors.</param>
            <remarks>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Color.Lerp(HelixToolkit.Maths.Color,HelixToolkit.Maths.Color,System.Single)">
            <summary>
            Performs a linear interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two colors.</returns>
            <remarks>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Color.SmoothStep(HelixToolkit.Maths.Color@,HelixToolkit.Maths.Color@,System.Single,HelixToolkit.Maths.Color@)">
            <summary>
            Performs a cubic interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two colors.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color.SmoothStep(HelixToolkit.Maths.Color,HelixToolkit.Maths.Color,System.Single)">
            <summary>
            Performs a cubic interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two colors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.Max(HelixToolkit.Maths.Color@,HelixToolkit.Maths.Color@,HelixToolkit.Maths.Color@)">
            <summary>
            Returns a color containing the smallest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <param name="result">When the method completes, contains an new color composed of the largest components of the source colors.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color.Max(HelixToolkit.Maths.Color,HelixToolkit.Maths.Color)">
            <summary>
            Returns a color containing the largest components of the specified colorss.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <returns>A color containing the largest components of the source colors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.Min(HelixToolkit.Maths.Color@,HelixToolkit.Maths.Color@,HelixToolkit.Maths.Color@)">
            <summary>
            Returns a color containing the smallest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <param name="result">When the method completes, contains an new color composed of the smallest components of the source colors.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color.Min(HelixToolkit.Maths.Color,HelixToolkit.Maths.Color)">
            <summary>
            Returns a color containing the smallest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <returns>A color containing the smallest components of the source colors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.AdjustContrast(HelixToolkit.Maths.Color@,System.Single,HelixToolkit.Maths.Color@)">
            <summary>
            Adjusts the contrast of a color.
            </summary>
            <param name="value">The color whose contrast is to be adjusted.</param>
            <param name="contrast">The amount by which to adjust the contrast.</param>
            <param name="result">When the method completes, contains the adjusted color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color.AdjustContrast(HelixToolkit.Maths.Color,System.Single)">
            <summary>
            Adjusts the contrast of a color.
            </summary>
            <param name="value">The color whose contrast is to be adjusted.</param>
            <param name="contrast">The amount by which to adjust the contrast.</param>
            <returns>The adjusted color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.AdjustSaturation(HelixToolkit.Maths.Color@,System.Single,HelixToolkit.Maths.Color@)">
            <summary>
            Adjusts the saturation of a color.
            </summary>
            <param name="value">The color whose saturation is to be adjusted.</param>
            <param name="saturation">The amount by which to adjust the saturation.</param>
            <param name="result">When the method completes, contains the adjusted color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color.AdjustSaturation(HelixToolkit.Maths.Color,System.Single)">
            <summary>
            Adjusts the saturation of a color.
            </summary>
            <param name="value">The color whose saturation is to be adjusted.</param>
            <param name="saturation">The amount by which to adjust the saturation.</param>
            <returns>The adjusted color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.op_Addition(HelixToolkit.Maths.Color,HelixToolkit.Maths.Color)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <returns>The sum of the two colors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.op_UnaryPlus(HelixToolkit.Maths.Color)">
            <summary>
            Assert a color (return it unchanged).
            </summary>
            <param name="value">The color to assert (unchanged).</param>
            <returns>The asserted (unchanged) color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.op_Subtraction(HelixToolkit.Maths.Color,HelixToolkit.Maths.Color)">
            <summary>
            Subtracts two colors.
            </summary>
            <param name="left">The first color to subtract.</param>
            <param name="right">The second color to subtract.</param>
            <returns>The difference of the two colors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.op_UnaryNegation(HelixToolkit.Maths.Color)">
            <summary>
            Negates a color.
            </summary>
            <param name="value">The color to negate.</param>
            <returns>A negated color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.op_Multiply(System.Single,HelixToolkit.Maths.Color)">
            <summary>
            Scales a color.
            </summary>
            <param name="scale">The factor by which to scale the color.</param>
            <param name="value">The color to scale.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.op_Multiply(HelixToolkit.Maths.Color,System.Single)">
            <summary>
            Scales a color.
            </summary>
            <param name="value">The factor by which to scale the color.</param>
            <param name="scale">The color to scale.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.op_Multiply(HelixToolkit.Maths.Color,HelixToolkit.Maths.Color)">
            <summary>
            Modulates two colors.
            </summary>
            <param name="left">The first color to modulate.</param>
            <param name="right">The second color to modulate.</param>
            <returns>The modulated color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.op_Equality(HelixToolkit.Maths.Color,HelixToolkit.Maths.Color)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.op_Inequality(HelixToolkit.Maths.Color,HelixToolkit.Maths.Color)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.op_Explicit(HelixToolkit.Maths.Color)~HelixToolkit.Maths.Color3">
            <summary>
            Performs an explicit conversion from <see cref="T:HelixToolkit.Maths.Color"/> to <see cref="T:HelixToolkit.Maths.Color3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.op_Explicit(HelixToolkit.Maths.Color)~System.Numerics.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:HelixToolkit.Maths.Color"/> to <see cref="T:System.Numerics.Vector3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.op_Explicit(HelixToolkit.Maths.Color)~System.Numerics.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:HelixToolkit.Maths.Color"/> to <see cref="T:System.Numerics.Vector4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.ToColor4">
            <summary>
            Convert this instance to a <see cref="T:HelixToolkit.Maths.Color4"/>
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.op_Implicit(HelixToolkit.Maths.Color)~HelixToolkit.Maths.Color4">
            <summary>
            Performs an implicit conversion from <see cref="T:HelixToolkit.Maths.Color"/> to <see cref="T:HelixToolkit.Maths.Color4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.op_Explicit(System.Numerics.Vector3)~HelixToolkit.Maths.Color">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Numerics.Vector3"/> to <see cref="T:HelixToolkit.Maths.Color"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.op_Explicit(HelixToolkit.Maths.Color3)~HelixToolkit.Maths.Color">
            <summary>
            Performs an explicit conversion from <see cref="T:HelixToolkit.Maths.Color3"/> to <see cref="T:HelixToolkit.Maths.Color"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.op_Explicit(System.Numerics.Vector4)~HelixToolkit.Maths.Color">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Numerics.Vector4"/> to <see cref="T:HelixToolkit.Maths.Color"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.op_Explicit(HelixToolkit.Maths.Color4)~HelixToolkit.Maths.Color">
            <summary>
            Performs an explicit conversion from <see cref="T:HelixToolkit.Maths.Color4"/> to <see cref="T:HelixToolkit.Maths.Color"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.op_Explicit(HelixToolkit.Maths.Color)~System.Int32">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Int32"/> to <see cref="T:HelixToolkit.Maths.Color"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.op_Explicit(System.Int32)~HelixToolkit.Maths.Color">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Int32"/> to <see cref="T:HelixToolkit.Maths.Color"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format to apply to each channel element (byte).</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format to apply to each channel element (byte).</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.Equals(HelixToolkit.Maths.Color@)">
            <summary>
            Determines whether the specified <see cref="T:HelixToolkit.Maths.Color"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:HelixToolkit.Maths.Color"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:HelixToolkit.Maths.Color"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.Equals(HelixToolkit.Maths.Color)">
            <summary>
            Determines whether the specified <see cref="T:HelixToolkit.Maths.Color"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:HelixToolkit.Maths.Color"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:HelixToolkit.Maths.Color"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Zero">
            <summary>
            Zero color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Transparent">
            <summary>
            Transparent color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.AliceBlue">
            <summary>
            AliceBlue color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.AntiqueWhite">
            <summary>
            AntiqueWhite color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Aqua">
            <summary>
            Aqua color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Aquamarine">
            <summary>
            Aquamarine color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Azure">
            <summary>
            Azure color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Beige">
            <summary>
            Beige color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Bisque">
            <summary>
            Bisque color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Black">
            <summary>
            Black color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.BlanchedAlmond">
            <summary>
            BlanchedAlmond color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Blue">
            <summary>
            Blue color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.BlueViolet">
            <summary>
            BlueViolet color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Brown">
            <summary>
            Brown color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.BurlyWood">
            <summary>
            BurlyWood color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.CadetBlue">
            <summary>
            CadetBlue color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Chartreuse">
            <summary>
            Chartreuse color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Chocolate">
            <summary>
            Chocolate color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Coral">
            <summary>
            Coral color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.CornflowerBlue">
            <summary>
            CornflowerBlue color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Cornsilk">
            <summary>
            Cornsilk color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Crimson">
            <summary>
            Crimson color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Cyan">
            <summary>
            Cyan color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.DarkBlue">
            <summary>
            DarkBlue color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.DarkCyan">
            <summary>
            DarkCyan color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.DarkGoldenrod">
            <summary>
            DarkGoldenrod color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.DarkGray">
            <summary>
            DarkGray color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.DarkGreen">
            <summary>
            DarkGreen color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.DarkKhaki">
            <summary>
            DarkKhaki color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.DarkMagenta">
            <summary>
            DarkMagenta color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.DarkOliveGreen">
            <summary>
            DarkOliveGreen color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.DarkOrange">
            <summary>
            DarkOrange color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.DarkOrchid">
            <summary>
            DarkOrchid color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.DarkRed">
            <summary>
            DarkRed color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.DarkSalmon">
            <summary>
            DarkSalmon color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.DarkSeaGreen">
            <summary>
            DarkSeaGreen color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.DarkSlateBlue">
            <summary>
            DarkSlateBlue color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.DarkSlateGray">
            <summary>
            DarkSlateGray color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.DarkTurquoise">
            <summary>
            DarkTurquoise color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.DarkViolet">
            <summary>
            DarkViolet color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.DeepPink">
            <summary>
            DeepPink color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.DeepSkyBlue">
            <summary>
            DeepSkyBlue color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.DimGray">
            <summary>
            DimGray color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.DodgerBlue">
            <summary>
            DodgerBlue color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Firebrick">
            <summary>
            Firebrick color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.FloralWhite">
            <summary>
            FloralWhite color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.ForestGreen">
            <summary>
            ForestGreen color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Fuchsia">
            <summary>
            Fuchsia color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Gainsboro">
            <summary>
            Gainsboro color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.GhostWhite">
            <summary>
            GhostWhite color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Gold">
            <summary>
            Gold color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Goldenrod">
            <summary>
            Goldenrod color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Gray">
            <summary>
            Gray color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Green">
            <summary>
            Green color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.GreenYellow">
            <summary>
            GreenYellow color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Honeydew">
            <summary>
            Honeydew color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.HotPink">
            <summary>
            HotPink color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.IndianRed">
            <summary>
            IndianRed color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Indigo">
            <summary>
            Indigo color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Ivory">
            <summary>
            Ivory color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Khaki">
            <summary>
            Khaki color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Lavender">
            <summary>
            Lavender color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.LavenderBlush">
            <summary>
            LavenderBlush color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.LawnGreen">
            <summary>
            LawnGreen color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.LemonChiffon">
            <summary>
            LemonChiffon color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.LightBlue">
            <summary>
            LightBlue color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.LightCoral">
            <summary>
            LightCoral color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.LightCyan">
            <summary>
            LightCyan color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.LightGoldenrodYellow">
            <summary>
            LightGoldenrodYellow color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.LightGray">
            <summary>
            LightGray color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.LightGreen">
            <summary>
            LightGreen color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.LightPink">
            <summary>
            LightPink color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.LightSalmon">
            <summary>
            LightSalmon color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.LightSeaGreen">
            <summary>
            LightSeaGreen color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.LightSkyBlue">
            <summary>
            LightSkyBlue color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.LightSlateGray">
            <summary>
            LightSlateGray color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.LightSteelBlue">
            <summary>
            LightSteelBlue color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.LightYellow">
            <summary>
            LightYellow color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Lime">
            <summary>
            Lime color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.LimeGreen">
            <summary>
            LimeGreen color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Linen">
            <summary>
            Linen color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Magenta">
            <summary>
            Magenta color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Maroon">
            <summary>
            Maroon color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.MediumAquamarine">
            <summary>
            MediumAquamarine color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.MediumBlue">
            <summary>
            MediumBlue color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.MediumOrchid">
            <summary>
            MediumOrchid color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.MediumPurple">
            <summary>
            MediumPurple color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.MediumSeaGreen">
            <summary>
            MediumSeaGreen color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.MediumSlateBlue">
            <summary>
            MediumSlateBlue color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.MediumSpringGreen">
            <summary>
            MediumSpringGreen color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.MediumTurquoise">
            <summary>
            MediumTurquoise color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.MediumVioletRed">
            <summary>
            MediumVioletRed color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.MidnightBlue">
            <summary>
            MidnightBlue color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.MintCream">
            <summary>
            MintCream color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.MistyRose">
            <summary>
            MistyRose color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Moccasin">
            <summary>
            Moccasin color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.NavajoWhite">
            <summary>
            NavajoWhite color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Navy">
            <summary>
            Navy color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.OldLace">
            <summary>
            OldLace color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Olive">
            <summary>
            Olive color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.OliveDrab">
            <summary>
            OliveDrab color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Orange">
            <summary>
            Orange color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.OrangeRed">
            <summary>
            OrangeRed color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Orchid">
            <summary>
            Orchid color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.PaleGoldenrod">
            <summary>
            PaleGoldenrod color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.PaleGreen">
            <summary>
            PaleGreen color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.PaleTurquoise">
            <summary>
            PaleTurquoise color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.PaleVioletRed">
            <summary>
            PaleVioletRed color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.PapayaWhip">
            <summary>
            PapayaWhip color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.PeachPuff">
            <summary>
            PeachPuff color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Peru">
            <summary>
            Peru color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Pink">
            <summary>
            Pink color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Plum">
            <summary>
            Plum color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.PowderBlue">
            <summary>
            PowderBlue color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Purple">
            <summary>
            Purple color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Red">
            <summary>
            Red color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.RosyBrown">
            <summary>
            RosyBrown color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.RoyalBlue">
            <summary>
            RoyalBlue color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.SaddleBrown">
            <summary>
            SaddleBrown color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Salmon">
            <summary>
            Salmon color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.SandyBrown">
            <summary>
            SandyBrown color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.SeaGreen">
            <summary>
            SeaGreen color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.SeaShell">
            <summary>
            SeaShell color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Sienna">
            <summary>
            Sienna color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Silver">
            <summary>
            Silver color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.SkyBlue">
            <summary>
            SkyBlue color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.SlateBlue">
            <summary>
            SlateBlue color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.SlateGray">
            <summary>
            SlateGray color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Snow">
            <summary>
            Snow color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.SpringGreen">
            <summary>
            SpringGreen color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.SteelBlue">
            <summary>
            SteelBlue color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Tan">
            <summary>
            Tan color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Teal">
            <summary>
            Teal color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Thistle">
            <summary>
            Thistle color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Tomato">
            <summary>
            Tomato color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Turquoise">
            <summary>
            Turquoise color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Violet">
            <summary>
            Violet color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Wheat">
            <summary>
            Wheat color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.White">
            <summary>
            White color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.WhiteSmoke">
            <summary>
            WhiteSmoke color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.Yellow">
            <summary>
            Yellow color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color.YellowGreen">
            <summary>
            YellowGreen color.
            </summary>
        </member>
        <member name="T:HelixToolkit.Maths.Color3">
            <summary>
            Represents a color in the form of rgb.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color3.Black">
            <summary>
            The Black color (0, 0, 0).
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color3.White">
            <summary>
            The White color (1, 1, 1, 1).
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color3.Red">
            <summary>
            The red component of the color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color3.Green">
            <summary>
            The green component of the color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color3.Blue">
            <summary>
            The blue component of the color.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Color3"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Color3"/> struct.
            </summary>
            <param name="red">The red component of the color.</param>
            <param name="green">The green component of the color.</param>
            <param name="blue">The blue component of the color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.#ctor(System.Numerics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Color3"/> struct.
            </summary>
            <param name="value">The red, green, and blue components of the color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Color3"/> struct.
            </summary>
            <param name="rgb">A packed integer containing all three color components in RGB order.
            The alpha component is ignored.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Color3"/> struct.
            </summary>
            <param name="values">The values to assign to the red, green, and blue components of the color. This must be an array with three elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="P:HelixToolkit.Maths.Color3.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the red, green, or blue component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the red component, 1 for the green component, and 2 for the blue component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 2].</exception>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.ToRgba">
            <summary>
            Converts the color into a packed integer.
            </summary>
            <returns>A packed integer containing all three color components.
            The alpha channel is set to 255.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.ToBgra">
            <summary>
            Converts the color into a packed integer.
            </summary>
            <returns>A packed integer containing all three color components.
            The alpha channel is set to 255.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.ToVector3">
            <summary>
            Converts the color into a three component vector.
            </summary>
            <returns>A three component vector containing the red, green, and blue components of the color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.ToArray">
            <summary>
            Creates an array containing the elements of the color.
            </summary>
            <returns>A three-element array containing the components of the color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.Add(HelixToolkit.Maths.Color3@,HelixToolkit.Maths.Color3@,HelixToolkit.Maths.Color3@)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <param name="result">When the method completes, completes the sum of the two colors.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.Add(HelixToolkit.Maths.Color3,HelixToolkit.Maths.Color3)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <returns>The sum of the two colors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.Subtract(HelixToolkit.Maths.Color3@,HelixToolkit.Maths.Color3@,HelixToolkit.Maths.Color3@)">
            <summary>
            Subtracts two colors.
            </summary>
            <param name="left">The first color to subtract.</param>
            <param name="right">The second color to subtract.</param>
            <param name="result">WHen the method completes, contains the difference of the two colors.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.Subtract(HelixToolkit.Maths.Color3,HelixToolkit.Maths.Color3)">
            <summary>
            Subtracts two colors.
            </summary>
            <param name="left">The first color to subtract.</param>
            <param name="right">The second color to subtract</param>
            <returns>The difference of the two colors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.Modulate(HelixToolkit.Maths.Color3@,HelixToolkit.Maths.Color3@,HelixToolkit.Maths.Color3@)">
            <summary>
            Modulates two colors.
            </summary>
            <param name="left">The first color to modulate.</param>
            <param name="right">The second color to modulate.</param>
            <param name="result">When the method completes, contains the modulated color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.Modulate(HelixToolkit.Maths.Color3,HelixToolkit.Maths.Color3)">
            <summary>
            Modulates two colors.
            </summary>
            <param name="left">The first color to modulate.</param>
            <param name="right">The second color to modulate.</param>
            <returns>The modulated color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.Scale(HelixToolkit.Maths.Color3@,System.Single,HelixToolkit.Maths.Color3@)">
            <summary>
            Scales a color.
            </summary>
            <param name="value">The color to scale.</param>
            <param name="scale">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.Scale(HelixToolkit.Maths.Color3,System.Single)">
            <summary>
            Scales a color.
            </summary>
            <param name="value">The color to scale.</param>
            <param name="scale">The amount by which to scale.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.Negate(HelixToolkit.Maths.Color3@,HelixToolkit.Maths.Color3@)">
            <summary>
            Negates a color.
            </summary>
            <param name="value">The color to negate.</param>
            <param name="result">When the method completes, contains the negated color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.Negate(HelixToolkit.Maths.Color3)">
            <summary>
            Negates a color.
            </summary>
            <param name="value">The color to negate.</param>
            <returns>The negated color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.Clamp(HelixToolkit.Maths.Color3@,HelixToolkit.Maths.Color3@,HelixToolkit.Maths.Color3@,HelixToolkit.Maths.Color3@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.Clamp(HelixToolkit.Maths.Color3,HelixToolkit.Maths.Color3,HelixToolkit.Maths.Color3)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.Lerp(HelixToolkit.Maths.Color3@,HelixToolkit.Maths.Color3@,System.Single,HelixToolkit.Maths.Color3@)">
            <summary>
            Performs a linear interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two colors.</param>
            <remarks>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.Lerp(HelixToolkit.Maths.Color3,HelixToolkit.Maths.Color3,System.Single)">
            <summary>
            Performs a linear interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two colors.</returns>
            <remarks>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.SmoothStep(HelixToolkit.Maths.Color3@,HelixToolkit.Maths.Color3@,System.Single,HelixToolkit.Maths.Color3@)">
            <summary>
            Performs a cubic interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two colors.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.SmoothStep(HelixToolkit.Maths.Color3,HelixToolkit.Maths.Color3,System.Single)">
            <summary>
            Performs a cubic interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two colors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.Max(HelixToolkit.Maths.Color3@,HelixToolkit.Maths.Color3@,HelixToolkit.Maths.Color3@)">
            <summary>
            Returns a color containing the smallest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <param name="result">When the method completes, contains an new color composed of the largest components of the source colors.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.Max(HelixToolkit.Maths.Color3,HelixToolkit.Maths.Color3)">
            <summary>
            Returns a color containing the largest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <returns>A color containing the largest components of the source colors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.Min(HelixToolkit.Maths.Color3@,HelixToolkit.Maths.Color3@,HelixToolkit.Maths.Color3@)">
            <summary>
            Returns a color containing the smallest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <param name="result">When the method completes, contains an new color composed of the smallest components of the source colors.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.Min(HelixToolkit.Maths.Color3,HelixToolkit.Maths.Color3)">
            <summary>
            Returns a color containing the smallest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <returns>A color containing the smallest components of the source colors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.AdjustContrast(HelixToolkit.Maths.Color3@,System.Single,HelixToolkit.Maths.Color3@)">
            <summary>
            Adjusts the contrast of a color.
            </summary>
            <param name="value">The color whose contrast is to be adjusted.</param>
            <param name="contrast">The amount by which to adjust the contrast.</param>
            <param name="result">When the method completes, contains the adjusted color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.AdjustContrast(HelixToolkit.Maths.Color3,System.Single)">
            <summary>
            Adjusts the contrast of a color.
            </summary>
            <param name="value">The color whose contrast is to be adjusted.</param>
            <param name="contrast">The amount by which to adjust the contrast.</param>
            <returns>The adjusted color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.AdjustSaturation(HelixToolkit.Maths.Color3@,System.Single,HelixToolkit.Maths.Color3@)">
            <summary>
            Adjusts the saturation of a color.
            </summary>
            <param name="value">The color whose saturation is to be adjusted.</param>
            <param name="saturation">The amount by which to adjust the saturation.</param>
            <param name="result">When the method completes, contains the adjusted color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.AdjustSaturation(HelixToolkit.Maths.Color3,System.Single)">
            <summary>
            Adjusts the saturation of a color.
            </summary>
            <param name="value">The color whose saturation is to be adjusted.</param>
            <param name="saturation">The amount by which to adjust the saturation.</param>
            <returns>The adjusted color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.Premultiply(HelixToolkit.Maths.Color3@,System.Single,HelixToolkit.Maths.Color3@)">
            <summary>
            Computes the premultiplied value of the provided color.
            </summary>
            <param name="value">The non-premultiplied value.</param>
            <param name="alpha">The color alpha.</param>
            <param name="result">The premultiplied result.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.Premultiply(HelixToolkit.Maths.Color3,System.Single)">
            <summary>
            Computes the premultiplied value of the provided color.
            </summary>
            <param name="value">The non-premultiplied value.</param>
            <param name="alpha">The color alpha.</param>
            <returns>The premultiplied color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.op_Addition(HelixToolkit.Maths.Color3,HelixToolkit.Maths.Color3)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <returns>The sum of the two colors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.op_UnaryPlus(HelixToolkit.Maths.Color3)">
            <summary>
            Assert a color (return it unchanged).
            </summary>
            <param name="value">The color to assert (unchanged).</param>
            <returns>The asserted (unchanged) color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.op_Subtraction(HelixToolkit.Maths.Color3,HelixToolkit.Maths.Color3)">
            <summary>
            Subtracts two colors.
            </summary>
            <param name="left">The first color to subtract.</param>
            <param name="right">The second color to subtract.</param>
            <returns>The difference of the two colors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.op_UnaryNegation(HelixToolkit.Maths.Color3)">
            <summary>
            Negates a color.
            </summary>
            <param name="value">The color to negate.</param>
            <returns>A negated color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.op_Multiply(System.Single,HelixToolkit.Maths.Color3)">
            <summary>
            Scales a color.
            </summary>
            <param name="scale">The factor by which to scale the color.</param>
            <param name="value">The color to scale.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.op_Multiply(HelixToolkit.Maths.Color3,System.Single)">
            <summary>
            Scales a color.
            </summary>
            <param name="value">The factor by which to scale the color.</param>
            <param name="scale">The color to scale.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.op_Multiply(HelixToolkit.Maths.Color3,HelixToolkit.Maths.Color3)">
            <summary>
            Modulates two colors.
            </summary>
            <param name="left">The first color to modulate.</param>
            <param name="right">The second color to modulate.</param>
            <returns>The modulated color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.op_Equality(HelixToolkit.Maths.Color3,HelixToolkit.Maths.Color3)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.op_Inequality(HelixToolkit.Maths.Color3,HelixToolkit.Maths.Color3)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.op_Explicit(HelixToolkit.Maths.Color3)~HelixToolkit.Maths.Color4">
            <summary>
            Performs an explicit conversion from <see cref="T:HelixToolkit.Maths.Color3"/> to <see cref="T:HelixToolkit.Maths.Color4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.op_Implicit(HelixToolkit.Maths.Color3)~System.Numerics.Vector3">
            <summary>
            Performs an implicit conversion from <see cref="T:HelixToolkit.Maths.Color3"/> to <see cref="T:System.Numerics.Vector3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.op_Implicit(System.Numerics.Vector3)~HelixToolkit.Maths.Color3">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Numerics.Vector3"/> to <see cref="T:HelixToolkit.Maths.Color3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.op_Explicit(System.Int32)~HelixToolkit.Maths.Color3">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Int32"/> to <see cref="T:HelixToolkit.Maths.Color3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format to apply to each channel element (float)</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format to apply to each channel element (float).</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.Equals(HelixToolkit.Maths.Color3@)">
            <summary>
            Determines whether the specified <see cref="T:HelixToolkit.Maths.Color3"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:HelixToolkit.Maths.Color3"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:HelixToolkit.Maths.Color3"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.Equals(HelixToolkit.Maths.Color3)">
            <summary>
            Determines whether the specified <see cref="T:HelixToolkit.Maths.Color3"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:HelixToolkit.Maths.Color3"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:HelixToolkit.Maths.Color3"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:HelixToolkit.Maths.Color4">
            <summary>
            Represents a color in the form of rgba.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color4.Black">
            <summary>
            The Black color (0, 0, 0, 1).
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color4.White">
            <summary>
            The White color (1, 1, 1, 1).
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color4.Empty">
            <summary>
            The Transparent color (1, 1, 1, 1).
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color4.Red">
            <summary>
            The red component of the color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color4.Green">
            <summary>
            The green component of the color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color4.Blue">
            <summary>
            The blue component of the color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Color4.Alpha">
            <summary>
            The alpha component of the color.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Color4"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Color4"/> struct.
            </summary>
            <param name="red">The red component of the color.</param>
            <param name="green">The green component of the color.</param>
            <param name="blue">The blue component of the color.</param>
            <param name="alpha">The alpha component of the color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.#ctor(System.Numerics.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Color4"/> struct.
            </summary>
            <param name="value">The red, green, blue, and alpha components of the color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.#ctor(System.Numerics.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Color4"/> struct.
            </summary>
            <param name="value">The red, green, and blue components of the color.</param>
            <param name="alpha">The alpha component of the color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Color4"/> struct.
            </summary>
            <param name="rgba">A packed integer containing all four color components in RGBA order.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Color4"/> struct.
            </summary>
            <param name="rgba">A packed integer containing all four color components in RGBA order.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Color4"/> struct.
            </summary>
            <param name="values">The values to assign to the red, green, blue, and alpha components of the color. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.#ctor(HelixToolkit.Maths.Color3)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Color4"/> struct.
            </summary>
            <param name="color"><see cref="T:HelixToolkit.Maths.Color3"/> used to initialize the color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.#ctor(HelixToolkit.Maths.Color3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Color4"/> struct.
            </summary>
            <param name="color"><see cref="T:HelixToolkit.Maths.Color3"/> used to initialize the color.</param>
            <param name="alpha">The alpha component of the color.</param>
        </member>
        <member name="P:HelixToolkit.Maths.Color4.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the red, green, blue, and alpha components, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the alpha component, 1 for the red component, 2 for the green component, and 3 for the blue component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.ToBgra">
            <summary>
            Converts the color into a packed integer.
            </summary>
            <returns>A packed integer containing all four color components.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.ToBgra(System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Converts the color into a packed integer.
            </summary>
            <returns>A packed integer containing all four color components.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.ToRgba">
            <summary>
            Converts the color into a packed integer.
            </summary>
            <returns>A packed integer containing all four color components.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.ToVector3">
            <summary>
            Converts the color into a three component vector.
            </summary>
            <returns>A three component vector containing the red, green, and blue components of the color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.ToVector4">
            <summary>
            Converts the color into a four component vector.
            </summary>
            <returns>A four component vector containing all four color components.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.ToArray">
            <summary>
            Creates an array containing the elements of the color.
            </summary>
            <returns>A four-element array containing the components of the color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.Add(HelixToolkit.Maths.Color4@,HelixToolkit.Maths.Color4@,HelixToolkit.Maths.Color4@)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <param name="result">When the method completes, completes the sum of the two colors.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.Add(HelixToolkit.Maths.Color4,HelixToolkit.Maths.Color4)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <returns>The sum of the two colors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.Subtract(HelixToolkit.Maths.Color4@,HelixToolkit.Maths.Color4@,HelixToolkit.Maths.Color4@)">
            <summary>
            Subtracts two colors.
            </summary>
            <param name="left">The first color to subtract.</param>
            <param name="right">The second color to subtract.</param>
            <param name="result">WHen the method completes, contains the difference of the two colors.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.Subtract(HelixToolkit.Maths.Color4,HelixToolkit.Maths.Color4)">
            <summary>
            Subtracts two colors.
            </summary>
            <param name="left">The first color to subtract.</param>
            <param name="right">The second color to subtract</param>
            <returns>The difference of the two colors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.Modulate(HelixToolkit.Maths.Color4@,HelixToolkit.Maths.Color4@,HelixToolkit.Maths.Color4@)">
            <summary>
            Modulates two colors.
            </summary>
            <param name="left">The first color to modulate.</param>
            <param name="right">The second color to modulate.</param>
            <param name="result">When the method completes, contains the modulated color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.Modulate(HelixToolkit.Maths.Color4,HelixToolkit.Maths.Color4)">
            <summary>
            Modulates two colors.
            </summary>
            <param name="left">The first color to modulate.</param>
            <param name="right">The second color to modulate.</param>
            <returns>The modulated color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.Scale(HelixToolkit.Maths.Color4@,System.Single,HelixToolkit.Maths.Color4@)">
            <summary>
            Scales a color.
            </summary>
            <param name="value">The color to scale.</param>
            <param name="scale">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.Scale(HelixToolkit.Maths.Color4,System.Single)">
            <summary>
            Scales a color.
            </summary>
            <param name="value">The color to scale.</param>
            <param name="scale">The amount by which to scale.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.Negate(HelixToolkit.Maths.Color4@,HelixToolkit.Maths.Color4@)">
            <summary>
            Negates a color.
            </summary>
            <param name="value">The color to negate.</param>
            <param name="result">When the method completes, contains the negated color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.Negate(HelixToolkit.Maths.Color4)">
            <summary>
            Negates a color.
            </summary>
            <param name="value">The color to negate.</param>
            <returns>The negated color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.Clamp(HelixToolkit.Maths.Color4@,HelixToolkit.Maths.Color4@,HelixToolkit.Maths.Color4@,HelixToolkit.Maths.Color4@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.Clamp(HelixToolkit.Maths.Color4,HelixToolkit.Maths.Color4,HelixToolkit.Maths.Color4)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.Lerp(HelixToolkit.Maths.Color4@,HelixToolkit.Maths.Color4@,System.Single,HelixToolkit.Maths.Color4@)">
            <summary>
            Performs a linear interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two colors.</param>
            <remarks>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.Lerp(HelixToolkit.Maths.Color4,HelixToolkit.Maths.Color4,System.Single)">
            <summary>
            Performs a linear interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two colors.</returns>
            <remarks>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.SmoothStep(HelixToolkit.Maths.Color4@,HelixToolkit.Maths.Color4@,System.Single,HelixToolkit.Maths.Color4@)">
            <summary>
            Performs a cubic interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two colors.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.SmoothStep(HelixToolkit.Maths.Color4,HelixToolkit.Maths.Color4,System.Single)">
            <summary>
            Performs a cubic interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two colors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.Max(HelixToolkit.Maths.Color4@,HelixToolkit.Maths.Color4@,HelixToolkit.Maths.Color4@)">
            <summary>
            Returns a color containing the smallest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <param name="result">When the method completes, contains an new color composed of the largest components of the source colors.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.Max(HelixToolkit.Maths.Color4,HelixToolkit.Maths.Color4)">
            <summary>
            Returns a color containing the largest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <returns>A color containing the largest components of the source colors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.Min(HelixToolkit.Maths.Color4@,HelixToolkit.Maths.Color4@,HelixToolkit.Maths.Color4@)">
            <summary>
            Returns a color containing the smallest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <param name="result">When the method completes, contains an new color composed of the smallest components of the source colors.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.Min(HelixToolkit.Maths.Color4,HelixToolkit.Maths.Color4)">
            <summary>
            Returns a color containing the smallest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <returns>A color containing the smallest components of the source colors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.AdjustContrast(HelixToolkit.Maths.Color4@,System.Single,HelixToolkit.Maths.Color4@)">
            <summary>
            Adjusts the contrast of a color.
            </summary>
            <param name="value">The color whose contrast is to be adjusted.</param>
            <param name="contrast">The amount by which to adjust the contrast.</param>
            <param name="result">When the method completes, contains the adjusted color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.AdjustContrast(HelixToolkit.Maths.Color4,System.Single)">
            <summary>
            Adjusts the contrast of a color.
            </summary>
            <param name="value">The color whose contrast is to be adjusted.</param>
            <param name="contrast">The amount by which to adjust the contrast.</param>
            <returns>The adjusted color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.AdjustSaturation(HelixToolkit.Maths.Color4@,System.Single,HelixToolkit.Maths.Color4@)">
            <summary>
            Adjusts the saturation of a color.
            </summary>
            <param name="value">The color whose saturation is to be adjusted.</param>
            <param name="saturation">The amount by which to adjust the saturation.</param>
            <param name="result">When the method completes, contains the adjusted color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.AdjustSaturation(HelixToolkit.Maths.Color4,System.Single)">
            <summary>
            Adjusts the saturation of a color.
            </summary>
            <param name="value">The color whose saturation is to be adjusted.</param>
            <param name="saturation">The amount by which to adjust the saturation.</param>
            <returns>The adjusted color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.Premultiply(HelixToolkit.Maths.Color4@,HelixToolkit.Maths.Color4@)">
            <summary>
            Computes the premultiplied value of the provided color.
            </summary>
            <param name="value">The non-premultiplied value.</param>
            <param name="result">The premultiplied result.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.Premultiply(HelixToolkit.Maths.Color4)">
            <summary>
            Computes the premultiplied value of the provided color.
            </summary>
            <param name="value">The non-premultiplied value.</param>
            <returns>The premultiplied result.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.op_Addition(HelixToolkit.Maths.Color4,HelixToolkit.Maths.Color4)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <returns>The sum of the two colors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.op_UnaryPlus(HelixToolkit.Maths.Color4)">
            <summary>
            Assert a color (return it unchanged).
            </summary>
            <param name="value">The color to assert (unchanged).</param>
            <returns>The asserted (unchanged) color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.op_Subtraction(HelixToolkit.Maths.Color4,HelixToolkit.Maths.Color4)">
            <summary>
            Subtracts two colors.
            </summary>
            <param name="left">The first color to subtract.</param>
            <param name="right">The second color to subtract.</param>
            <returns>The difference of the two colors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.op_UnaryNegation(HelixToolkit.Maths.Color4)">
            <summary>
            Negates a color.
            </summary>
            <param name="value">The color to negate.</param>
            <returns>A negated color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.op_Multiply(System.Single,HelixToolkit.Maths.Color4)">
            <summary>
            Scales a color.
            </summary>
            <param name="scale">The factor by which to scale the color.</param>
            <param name="value">The color to scale.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.op_Multiply(HelixToolkit.Maths.Color4,System.Single)">
            <summary>
            Scales a color.
            </summary>
            <param name="value">The factor by which to scale the color.</param>
            <param name="scale">The color to scale.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.op_Multiply(HelixToolkit.Maths.Color4,HelixToolkit.Maths.Color4)">
            <summary>
            Modulates two colors.
            </summary>
            <param name="left">The first color to modulate.</param>
            <param name="right">The second color to modulate.</param>
            <returns>The modulated color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.op_Equality(HelixToolkit.Maths.Color4,HelixToolkit.Maths.Color4)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.op_Inequality(HelixToolkit.Maths.Color4,HelixToolkit.Maths.Color4)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.op_Explicit(HelixToolkit.Maths.Color4)~HelixToolkit.Maths.Color3">
            <summary>
            Performs an explicit conversion from <see cref="T:HelixToolkit.Maths.Color4"/> to <see cref="T:HelixToolkit.Maths.Color3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.op_Explicit(HelixToolkit.Maths.Color4)~System.Numerics.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:HelixToolkit.Maths.Color4"/> to <see cref="T:System.Numerics.Vector3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.op_Implicit(HelixToolkit.Maths.Color4)~System.Numerics.Vector4">
            <summary>
            Performs an implicit conversion from <see cref="T:HelixToolkit.Maths.Color4"/> to <see cref="T:System.Numerics.Vector4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.op_Explicit(System.Numerics.Vector3)~HelixToolkit.Maths.Color4">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Numerics.Vector3"/> to <see cref="T:HelixToolkit.Maths.Color4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.op_Explicit(System.Numerics.Vector4)~HelixToolkit.Maths.Color4">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Numerics.Vector4"/> to <see cref="T:HelixToolkit.Maths.Color4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.op_Explicit(HelixToolkit.Maths.ColorBGRA)~HelixToolkit.Maths.Color4">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Numerics.Vector3"/> to <see cref="T:HelixToolkit.Maths.Color4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.op_Explicit(HelixToolkit.Maths.Color4)~HelixToolkit.Maths.ColorBGRA">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Numerics.Vector4"/> to <see cref="T:HelixToolkit.Maths.Color4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.op_Explicit(HelixToolkit.Maths.Color4)~System.Int32">
            <summary>
            Performs an explicit conversion from <see cref="T:HelixToolkit.Maths.Color4"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.op_Explicit(System.Int32)~HelixToolkit.Maths.Color4">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Int32"/> to <see cref="T:HelixToolkit.Maths.Color4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format to apply to each channel (float).</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format to apply to each channel (float).</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.Equals(HelixToolkit.Maths.Color4@)">
            <summary>
            Determines whether the specified <see cref="T:HelixToolkit.Maths.Color4"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:HelixToolkit.Maths.Color4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:HelixToolkit.Maths.Color4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.Equals(HelixToolkit.Maths.Color4)">
            <summary>
            Determines whether the specified <see cref="T:HelixToolkit.Maths.Color4"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:HelixToolkit.Maths.Color4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:HelixToolkit.Maths.Color4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4.op_Implicit(System.String)~HelixToolkit.Maths.Color4">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:HelixToolkit.Maths.Color4"/>.
            </summary>
            <param name="colorStr">The color string.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:HelixToolkit.Maths.Color4Helper">
            <summary>
            Ref https://referencesource.microsoft.com/#System.Drawing/commonui/System/Drawing/ColorConverter.cs
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.Color4Helper.#cctor">
            <summary>
            Initializes the <see cref="T:HelixToolkit.Maths.Color4Helper"/> class.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.Color4Helper.ToColor4(System.String,System.Globalization.CultureInfo)">
            <summary>
            Tries the prase.
            </summary>
            <param name="color">The color.</param>
            <param name="culture">The culture.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:HelixToolkit.Maths.Color4Helper.FromArgb(System.Int32)">
            <summary>
            Froms the ARGB int.
            </summary>
            <param name="argb">The ARGB.</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4Helper.FromArgb(System.Int32,System.Int32,System.Int32)">
            <summary>
            Froms the RGB.
            </summary>
            <param name="r">The r.</param>
            <param name="g">The g.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.Color4Helper.FromArgb(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Froms the ARGB.
            </summary>
            <param name="a">a.</param>
            <param name="r">The r.</param>
            <param name="g">The g.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="T:HelixToolkit.Maths.ColorBGRA">
            <summary>
            Represents a 32-bit color (4 bytes) in the form of BGRA (in byte order: B, G, B, A).
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.ColorBGRA.B">
            <summary>
            The blue component of the color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.ColorBGRA.G">
            <summary>
            The green component of the color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.ColorBGRA.R">
            <summary>
            The red component of the color.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.ColorBGRA.A">
            <summary>
            The alpha component of the color.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.ColorBGRA"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.ColorBGRA"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.ColorBGRA"/> struct.
            </summary>
            <param name="red">The red component of the color.</param>
            <param name="green">The green component of the color.</param>
            <param name="blue">The blue component of the color.</param>
            <param name="alpha">The alpha component of the color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.ColorBGRA"/> struct.
            </summary>
            <param name="red">The red component of the color.</param>
            <param name="green">The green component of the color.</param>
            <param name="blue">The blue component of the color.</param>
            <param name="alpha">The alpha component of the color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.#ctor(System.Numerics.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.ColorBGRA"/> struct.
            </summary>
            <param name="value">The red, green, blue, and alpha components of the color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.#ctor(System.Numerics.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.ColorBGRA"/> struct.
            </summary>
            <param name="value">The red, green, and blue components of the color.</param>
            <param name="alpha">The alpha component of the color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.ColorBGRA"/> struct.
            </summary>
            <param name="bgra">A packed integer containing all four color components in BGRA order.</param>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.ColorBGRA"/> struct.
            </summary>
            <param name="bgra">A packed integer containing all four color components in BGRA.</param>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.ColorBGRA"/> struct.
            </summary>
            <param name="values">The values to assign to the red, green, and blue, alpha components of the color. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.ColorBGRA"/> struct.
            </summary>
            <param name="values">The values to assign to the red, green, and blue, alpha components of the color. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="P:HelixToolkit.Maths.ColorBGRA.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the alpha, red, green, or blue component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the alpha component, 1 for the red component, 2 for the green component, and 3 for the blue component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.ToBgra">
            <summary>
            Converts the color into a packed integer.
            </summary>
            <returns>A packed integer containing all four color components.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.ToRgba">
            <summary>
            Converts the color into a packed integer.
            </summary>
            <returns>A packed integer containing all four color components.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.ToVector3">
            <summary>
            Converts the color into a three component vector.
            </summary>
            <returns>A three component vector containing the red, green, and blue components of the color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.ToColor3">
            <summary>
            Converts the color into a three component color.
            </summary>
            <returns>A three component color containing the red, green, and blue components of the color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.ToVector4">
            <summary>
            Converts the color into a four component vector.
            </summary>
            <returns>A four component vector containing all four color components.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.ToArray">
            <summary>
            Creates an array containing the elements of the color.
            </summary>
            <returns>A four-element array containing the components of the color in BGRA order.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.GetBrightness">
            <summary>
            Gets the brightness.
            </summary>
            <returns>The Hue-Saturation-Brightness (HSB) saturation for this <see cref="T:HelixToolkit.Maths.Color"/></returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.GetHue">
            <summary>
            Gets the hue.
            </summary>
            <returns>The Hue-Saturation-Brightness (HSB) saturation for this <see cref="T:HelixToolkit.Maths.Color"/></returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.GetSaturation">
            <summary>
            Gets the saturation.
            </summary>
            <returns>The Hue-Saturation-Brightness (HSB) saturation for this <see cref="T:HelixToolkit.Maths.Color"/></returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.FromBgra(System.Int32)">
            <summary>
            Converts the color from a packed BGRA integer.
            </summary>
            <param name="color">A packed integer containing all four color components in BGRA order</param>
            <returns>A color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.FromBgra(System.UInt32)">
            <summary>
            Converts the color from a packed BGRA integer.
            </summary>
            <param name="color">A packed integer containing all four color components in BGRA order</param>
            <returns>A color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.FromRgba(System.Int32)">
            <summary>
            Converts the color from a packed RGBA integer.
            </summary>
            <param name="color">A packed integer containing all four color components in RGBA order</param>
            <returns>A color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.FromRgba(System.UInt32)">
            <summary>
            Converts the color from a packed RGBA integer.
            </summary>
            <param name="color">A packed integer containing all four color components in RGBA order</param>
            <returns>A color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.Add(HelixToolkit.Maths.ColorBGRA@,HelixToolkit.Maths.ColorBGRA@,HelixToolkit.Maths.ColorBGRA@)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <param name="result">When the method completes, completes the sum of the two colors.</param>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.Add(HelixToolkit.Maths.ColorBGRA,HelixToolkit.Maths.ColorBGRA)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <returns>The sum of the two colors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.Subtract(HelixToolkit.Maths.ColorBGRA@,HelixToolkit.Maths.ColorBGRA@,HelixToolkit.Maths.ColorBGRA@)">
            <summary>
            Subtracts two colors.
            </summary>
            <param name="left">The first color to subtract.</param>
            <param name="right">The second color to subtract.</param>
            <param name="result">WHen the method completes, contains the difference of the two colors.</param>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.Subtract(HelixToolkit.Maths.ColorBGRA,HelixToolkit.Maths.ColorBGRA)">
            <summary>
            Subtracts two colors.
            </summary>
            <param name="left">The first color to subtract.</param>
            <param name="right">The second color to subtract</param>
            <returns>The difference of the two colors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.Modulate(HelixToolkit.Maths.ColorBGRA@,HelixToolkit.Maths.ColorBGRA@,HelixToolkit.Maths.ColorBGRA@)">
            <summary>
            Modulates two colors.
            </summary>
            <param name="left">The first color to modulate.</param>
            <param name="right">The second color to modulate.</param>
            <param name="result">When the method completes, contains the modulated color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.Modulate(HelixToolkit.Maths.ColorBGRA,HelixToolkit.Maths.ColorBGRA)">
            <summary>
            Modulates two colors.
            </summary>
            <param name="left">The first color to modulate.</param>
            <param name="right">The second color to modulate.</param>
            <returns>The modulated color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.Scale(HelixToolkit.Maths.ColorBGRA@,System.Single,HelixToolkit.Maths.ColorBGRA@)">
            <summary>
            Scales a color.
            </summary>
            <param name="value">The color to scale.</param>
            <param name="scale">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.Scale(HelixToolkit.Maths.ColorBGRA,System.Single)">
            <summary>
            Scales a color.
            </summary>
            <param name="value">The color to scale.</param>
            <param name="scale">The amount by which to scale.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.Negate(HelixToolkit.Maths.ColorBGRA@,HelixToolkit.Maths.ColorBGRA@)">
            <summary>
            Negates a color.
            </summary>
            <param name="value">The color to negate.</param>
            <param name="result">When the method completes, contains the negated color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.Negate(HelixToolkit.Maths.ColorBGRA)">
            <summary>
            Negates a color.
            </summary>
            <param name="value">The color to negate.</param>
            <returns>The negated color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.Clamp(HelixToolkit.Maths.ColorBGRA@,HelixToolkit.Maths.ColorBGRA@,HelixToolkit.Maths.ColorBGRA@,HelixToolkit.Maths.ColorBGRA@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.Clamp(HelixToolkit.Maths.ColorBGRA,HelixToolkit.Maths.ColorBGRA,HelixToolkit.Maths.ColorBGRA)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.Lerp(HelixToolkit.Maths.ColorBGRA@,HelixToolkit.Maths.ColorBGRA@,System.Single,HelixToolkit.Maths.ColorBGRA@)">
            <summary>
            Performs a linear interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two colors.</param>
            <remarks>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.Lerp(HelixToolkit.Maths.ColorBGRA,HelixToolkit.Maths.ColorBGRA,System.Single)">
            <summary>
            Performs a linear interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two colors.</returns>
            <remarks>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.SmoothStep(HelixToolkit.Maths.ColorBGRA@,HelixToolkit.Maths.ColorBGRA@,System.Single,HelixToolkit.Maths.ColorBGRA@)">
            <summary>
            Performs a cubic interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two colors.</param>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.SmoothStep(HelixToolkit.Maths.ColorBGRA,HelixToolkit.Maths.ColorBGRA,System.Single)">
            <summary>
            Performs a cubic interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two colors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.Max(HelixToolkit.Maths.ColorBGRA@,HelixToolkit.Maths.ColorBGRA@,HelixToolkit.Maths.ColorBGRA@)">
            <summary>
            Returns a color containing the smallest components of the specified colorss.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <param name="result">When the method completes, contains an new color composed of the largest components of the source colorss.</param>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.Max(HelixToolkit.Maths.ColorBGRA,HelixToolkit.Maths.ColorBGRA)">
            <summary>
            Returns a color containing the largest components of the specified colorss.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <returns>A color containing the largest components of the source colors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.Min(HelixToolkit.Maths.ColorBGRA@,HelixToolkit.Maths.ColorBGRA@,HelixToolkit.Maths.ColorBGRA@)">
            <summary>
            Returns a color containing the smallest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <param name="result">When the method completes, contains an new color composed of the smallest components of the source colors.</param>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.Min(HelixToolkit.Maths.ColorBGRA,HelixToolkit.Maths.ColorBGRA)">
            <summary>
            Returns a color containing the smallest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <returns>A color containing the smallest components of the source colors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.AdjustContrast(HelixToolkit.Maths.ColorBGRA@,System.Single,HelixToolkit.Maths.ColorBGRA@)">
            <summary>
            Adjusts the contrast of a color.
            </summary>
            <param name="value">The color whose contrast is to be adjusted.</param>
            <param name="contrast">The amount by which to adjust the contrast.</param>
            <param name="result">When the method completes, contains the adjusted color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.AdjustContrast(HelixToolkit.Maths.ColorBGRA,System.Single)">
            <summary>
            Adjusts the contrast of a color.
            </summary>
            <param name="value">The color whose contrast is to be adjusted.</param>
            <param name="contrast">The amount by which to adjust the contrast.</param>
            <returns>The adjusted color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.AdjustSaturation(HelixToolkit.Maths.ColorBGRA@,System.Single,HelixToolkit.Maths.ColorBGRA@)">
            <summary>
            Adjusts the saturation of a color.
            </summary>
            <param name="value">The color whose saturation is to be adjusted.</param>
            <param name="saturation">The amount by which to adjust the saturation.</param>
            <param name="result">When the method completes, contains the adjusted color.</param>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.AdjustSaturation(HelixToolkit.Maths.ColorBGRA,System.Single)">
            <summary>
            Adjusts the saturation of a color.
            </summary>
            <param name="value">The color whose saturation is to be adjusted.</param>
            <param name="saturation">The amount by which to adjust the saturation.</param>
            <returns>The adjusted color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.Premultiply(HelixToolkit.Maths.ColorBGRA@,HelixToolkit.Maths.ColorBGRA@)">
            <summary>
            Computes the premultiplied value of the provided color.
            </summary>
            <param name="value">The non-premultiplied value.</param>
            <param name="result">The premultiplied result.</param>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.Premultiply(HelixToolkit.Maths.ColorBGRA)">
            <summary>
            Computes the premultiplied value of the provided color.
            </summary>
            <param name="value">The non-premultiplied value.</param>
            <returns>The premultiplied result.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.op_Addition(HelixToolkit.Maths.ColorBGRA,HelixToolkit.Maths.ColorBGRA)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <returns>The sum of the two colors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.op_UnaryPlus(HelixToolkit.Maths.ColorBGRA)">
            <summary>
            Assert a color (return it unchanged).
            </summary>
            <param name="value">The color to assert (unchange).</param>
            <returns>The asserted (unchanged) color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.op_Subtraction(HelixToolkit.Maths.ColorBGRA,HelixToolkit.Maths.ColorBGRA)">
            <summary>
            Subtracts two colors.
            </summary>
            <param name="left">The first color to subtract.</param>
            <param name="right">The second color to subtract.</param>
            <returns>The difference of the two colors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.op_UnaryNegation(HelixToolkit.Maths.ColorBGRA)">
            <summary>
            Negates a color.
            </summary>
            <param name="value">The color to negate.</param>
            <returns>A negated color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.op_Multiply(System.Single,HelixToolkit.Maths.ColorBGRA)">
            <summary>
            Scales a color.
            </summary>
            <param name="scale">The factor by which to scale the color.</param>
            <param name="value">The color to scale.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.op_Multiply(HelixToolkit.Maths.ColorBGRA,System.Single)">
            <summary>
            Scales a color.
            </summary>
            <param name="value">The factor by which to scale the color.</param>
            <param name="scale">The color to scale.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.op_Multiply(HelixToolkit.Maths.ColorBGRA,HelixToolkit.Maths.ColorBGRA)">
            <summary>
            Modulates two colors.
            </summary>
            <param name="left">The first color to modulate.</param>
            <param name="right">The second color to modulate.</param>
            <returns>The modulated color.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.op_Equality(HelixToolkit.Maths.ColorBGRA,HelixToolkit.Maths.ColorBGRA)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.op_Inequality(HelixToolkit.Maths.ColorBGRA,HelixToolkit.Maths.ColorBGRA)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.op_Explicit(HelixToolkit.Maths.ColorBGRA)~HelixToolkit.Maths.Color3">
            <summary>
            Performs an explicit conversion from <see cref="T:HelixToolkit.Maths.ColorBGRA"/> to <see cref="T:HelixToolkit.Maths.Color3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.op_Explicit(HelixToolkit.Maths.ColorBGRA)~System.Numerics.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:HelixToolkit.Maths.ColorBGRA"/> to <see cref="T:System.Numerics.Vector3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.op_Explicit(HelixToolkit.Maths.ColorBGRA)~System.Numerics.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:HelixToolkit.Maths.ColorBGRA"/> to <see cref="T:System.Numerics.Vector4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.op_Explicit(HelixToolkit.Maths.ColorBGRA)~HelixToolkit.Maths.Color4">
            <summary>
            Performs an explicit conversion from <see cref="T:HelixToolkit.Maths.ColorBGRA"/> to <see cref="T:HelixToolkit.Maths.Color4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.op_Explicit(System.Numerics.Vector3)~HelixToolkit.Maths.ColorBGRA">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Numerics.Vector3"/> to <see cref="T:HelixToolkit.Maths.ColorBGRA"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.op_Explicit(HelixToolkit.Maths.Color3)~HelixToolkit.Maths.ColorBGRA">
            <summary>
            Performs an explicit conversion from <see cref="T:HelixToolkit.Maths.Color3"/> to <see cref="T:HelixToolkit.Maths.ColorBGRA"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.op_Explicit(System.Numerics.Vector4)~HelixToolkit.Maths.ColorBGRA">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Numerics.Vector4"/> to <see cref="T:HelixToolkit.Maths.ColorBGRA"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.op_Explicit(HelixToolkit.Maths.Color4)~HelixToolkit.Maths.ColorBGRA">
            <summary>
            Performs an explicit conversion from <see cref="T:HelixToolkit.Maths.Color4"/> to <see cref="T:HelixToolkit.Maths.ColorBGRA"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.op_Implicit(HelixToolkit.Maths.Color)~HelixToolkit.Maths.ColorBGRA">
            <summary>
            Performs an implicit conversion from <see cref="T:HelixToolkit.Maths.Color"/> to <see cref="T:HelixToolkit.Maths.ColorBGRA"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.op_Implicit(HelixToolkit.Maths.ColorBGRA)~HelixToolkit.Maths.Color">
            <summary>
            Performs an implicit conversion from <see cref="T:HelixToolkit.Maths.ColorBGRA"/> to <see cref="T:HelixToolkit.Maths.Color"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.op_Explicit(HelixToolkit.Maths.ColorBGRA)~System.Int32">
            <summary>
            Performs an explicit conversion from <see cref="T:HelixToolkit.Maths.ColorBGRA"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.op_Explicit(System.Int32)~HelixToolkit.Maths.ColorBGRA">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Int32"/> to <see cref="T:HelixToolkit.Maths.ColorBGRA"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format to apply to each channel (byte).</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format to apply to each channel (byte).</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.Equals(HelixToolkit.Maths.ColorBGRA@)">
            <summary>
            Determines whether the specified <see cref="T:HelixToolkit.Maths.ColorBGRA"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:HelixToolkit.Maths.ColorBGRA"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:HelixToolkit.Maths.ColorBGRA"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.Equals(HelixToolkit.Maths.ColorBGRA)">
            <summary>
            Determines whether the specified <see cref="T:HelixToolkit.Maths.ColorBGRA"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:HelixToolkit.Maths.ColorBGRA"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:HelixToolkit.Maths.ColorBGRA"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.ColorBGRA.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:HelixToolkit.Maths.AngleType">
            <summary>
            Describes the type of angle.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.AngleType.Revolution">
            <summary>
            Specifies an angle measurement in revolutions.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.AngleType.Degree">
            <summary>
            Specifies an angle measurement in degrees.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.AngleType.Radian">
            <summary>
            Specifies an angle measurement in radians.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.AngleType.Gradian">
            <summary>
            Specifies an angle measurement in gradians.
            </summary>
        </member>
        <member name="T:HelixToolkit.Maths.ContainmentType">
            <summary>
            Describes how one bounding volume contains another.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.ContainmentType.Disjoint">
            <summary>
            The two bounding volumes don't intersect at all.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.ContainmentType.Contains">
            <summary>
            One bounding volume completely contains another.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.ContainmentType.Intersects">
            <summary>
            The two bounding volumes overlap.
            </summary>
        </member>
        <member name="T:HelixToolkit.Maths.PlaneIntersectionType">
            <summary>
            Describes the result of an intersection with a plane in three dimensions.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.PlaneIntersectionType.Back">
            <summary>
            The object is behind the plane.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.PlaneIntersectionType.Front">
            <summary>
            The object is in front of the plane.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.PlaneIntersectionType.Intersecting">
            <summary>
            The object is intersecting the plane.
            </summary>
        </member>
        <member name="T:HelixToolkit.Maths.FrustumCameraParams">
            <summary>
            Frustum camera parameters.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.FrustumCameraParams.Position">
            <summary>
            Position of the camera.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.FrustumCameraParams.LookAtDir">
            <summary>
            Looking at direction of the camera.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.FrustumCameraParams.UpDir">
            <summary>
            Up direction.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.FrustumCameraParams.FOV">
            <summary>
            Field of view.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.FrustumCameraParams.ZNear">
            <summary>
            Z near distance.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.FrustumCameraParams.ZFar">
            <summary>
            Z far distance.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.FrustumCameraParams.AspectRatio">
            <summary>
            Aspect ratio.
            </summary>
        </member>
        <member name="T:HelixToolkit.Maths.Half">
            <summary>
            A half precision (16 bit) floating point value.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Half.PrecisionDigits">
            <summary>
            Number of decimal digits of precision.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Half.MantissaBits">
            <summary>
            Number of bits in the mantissa.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Half.MaximumDecimalExponent">
            <summary>
            Maximum decimal exponent.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Half.MaximumBinaryExponent">
            <summary>
            Maximum binary exponent.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Half.MinimumDecimalExponent">
            <summary>
            Minimum decimal exponent.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Half.MinimumBinaryExponent">
            <summary>
            Minimum binary exponent.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Half.ExponentRadix">
            <summary>
            Exponent radix.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Half.AdditionRounding">
            <summary>
            Additional rounding.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Half.Epsilon">
            <summary>
            Smallest such that 1.0 + epsilon != 1.0
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Half.MaxValue">
            <summary>
            Maximum value of the number.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Half.MinValue">
            <summary>
            Minimum value of the number.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.Half.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref = "T:SharpDX.Half" /> structure.
            </summary>
            <param name = "value">The floating point value that should be stored in 16 bit format.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Half.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref = "T:SharpDX.Half" /> structure.
            </summary>
            <param name = "rawvalue">The floating point value that should be stored in 16 bit format.</param>
        </member>
        <member name="P:HelixToolkit.Maths.Half.RawValue">
            <summary>
            Gets or sets the raw 16 bit value used to back this half-float.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.Half.ConvertToFloat(HelixToolkit.Maths.Half[])">
            <summary>
            Converts an array of half precision values into full precision values.
            </summary>
            <param name = "values">The values to be converted.</param>
            <returns>An array of converted values.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half.ConvertToHalf(System.Single[])">
            <summary>
            Converts an array of full precision values into half precision values.
            </summary>
            <param name = "values">The values to be converted.</param>
            <returns>An array of converted values.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half.op_Implicit(System.Single)~HelixToolkit.Maths.Half">
            <summary>
            Performs an explicit conversion from <see cref = "T:System.Single" /> to <see cref = "T:SharpDX.Half" />.
            </summary>
            <param name = "value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half.op_Implicit(HelixToolkit.Maths.Half)~System.Single">
            <summary>
            Performs an implicit conversion from <see cref = "T:SharpDX.Half" /> to <see cref = "T:System.Single" />.
            </summary>
            <param name = "value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half.op_Equality(HelixToolkit.Maths.Half,HelixToolkit.Maths.Half)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name = "left">The first value to compare.</param>
            <param name = "right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name = "left" /> has the same value as <paramref name = "right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half.op_Inequality(HelixToolkit.Maths.Half,HelixToolkit.Maths.Half)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name = "left">The first value to compare.</param>
            <param name = "right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name = "left" /> has a different value than <paramref name = "right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half.ToString">
            <summary>
            Converts the value of the object to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half.Equals(HelixToolkit.Maths.Half@,HelixToolkit.Maths.Half@)">
            <summary>
            Determines whether the specified object instances are considered equal.
            </summary>
            <param name = "value1" />
            <param name = "value2" />
            <returns>
            <c>true</c> if <paramref name = "value1" /> is the same instance as <paramref name = "value2" /> or 
            if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half.Equals(HelixToolkit.Maths.Half)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object.
            </summary>
            <param name = "other">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name = "obj">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:HelixToolkit.Maths.Half2">
            <summary>
            Defines a two component vector, using half precision floating point coordinates.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Half2.X">
            <summary>
            Gets or sets the X component of the vector.
            </summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="F:HelixToolkit.Maths.Half2.Y">
            <summary>
            Gets or sets the Y component of the vector.
            </summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="M:HelixToolkit.Maths.Half2.#ctor(HelixToolkit.Maths.Half,HelixToolkit.Maths.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Half2" /> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Half2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Half2" /> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Half2.#ctor(System.UInt16,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Half2" /> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Half2.#ctor(HelixToolkit.Maths.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Half2" /> structure.
            </summary>
            <param name="value">The value to set for both the X and Y components.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Half2.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Half2" /> structure.
            </summary>
            <param name="value">Value to initialize X and Y components with.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Half2.op_Implicit(System.Numerics.Vector2)~HelixToolkit.Maths.Half2">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Numerics.Vector2"/> to <see cref="T:HelixToolkit.Maths.Half2"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half2.op_Implicit(HelixToolkit.Maths.Half2)~System.Numerics.Vector2">
            <summary>
            Performs an explicit conversion from <see cref="T:HelixToolkit.Maths.Half2"/> to <see cref="T:System.Numerics.Vector2"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half2.op_Equality(HelixToolkit.Maths.Half2,HelixToolkit.Maths.Half2)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half2.op_Inequality(HelixToolkit.Maths.Half2,HelixToolkit.Maths.Half2)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half2.Equals(HelixToolkit.Maths.Half2@,HelixToolkit.Maths.Half2@)">
            <summary>
            Determines whether the specified object instances are considered equal. 
            </summary>
            <param name="value1" />
            <param name="value2" />
            <returns>
            <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
            if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half2.Equals(HelixToolkit.Maths.Half2)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object. 
            </summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half2.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object. 
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:HelixToolkit.Maths.Half3">
            <summary>
            Defines a three component vector, using half precision floating point coordinates.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Half3.X">
            <summary>
            Gets or sets the X component of the vector.
            </summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="F:HelixToolkit.Maths.Half3.Y">
            <summary>
            Gets or sets the Y component of the vector.
            </summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="F:HelixToolkit.Maths.Half3.Z">
            <summary>
            Gets or sets the Z component of the vector.
            </summary>
            <value>The Z component of the vector.</value>
        </member>
        <member name="M:HelixToolkit.Maths.Half3.#ctor(HelixToolkit.Maths.Half,HelixToolkit.Maths.Half,HelixToolkit.Maths.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Half3" /> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
            <param name="z">The Z component.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Half3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Half3" /> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
            <param name="z">The Z component.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Half3.#ctor(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Half3" /> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
            <param name="z">The Z component.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Half3.#ctor(HelixToolkit.Maths.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Half3" /> structure.
            </summary>
            <param name="value">The value to set for the X, Y, and Z components.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Half3.op_Implicit(System.Numerics.Vector3)~HelixToolkit.Maths.Half3">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Numerics.Vector3"/> to <see cref="T:HelixToolkit.Maths.Half3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half3.op_Implicit(HelixToolkit.Maths.Half3)~System.Numerics.Vector3">
            <summary>
            Performs an implicit conversion from <see cref="T:HelixToolkit.Maths.Half3"/> to <see cref="T:System.Numerics.Vector3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half3.op_Explicit(System.Numerics.Vector2)~HelixToolkit.Maths.Half3">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Numerics.Vector2"/> to <see cref="T:HelixToolkit.Maths.Half3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half3.op_Explicit(HelixToolkit.Maths.Half3)~System.Numerics.Vector2">
            <summary>
            Performs an explicit conversion from <see cref="T:HelixToolkit.Maths.Half3"/> to <see cref="T:System.Numerics.Vector2"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half3.op_Equality(HelixToolkit.Maths.Half3,HelixToolkit.Maths.Half3)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half3.op_Inequality(HelixToolkit.Maths.Half3,HelixToolkit.Maths.Half3)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half3.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half3.Equals(HelixToolkit.Maths.Half3@,HelixToolkit.Maths.Half3@)">
            <summary>
            Determines whether the specified object instances are considered equal. 
            </summary>
            <param name="value1" />
            <param name="value2" />
            <returns>
            <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
            if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half3.Equals(HelixToolkit.Maths.Half3)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object. 
            </summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half3.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object. 
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:HelixToolkit.Maths.Half4">
            <summary>
            Defines a four component vector, using half precision floating point coordinates.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Half4.X">
            <summary>
            Gets or sets the X component of the vector.
            </summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="F:HelixToolkit.Maths.Half4.Y">
            <summary>
            Gets or sets the Y component of the vector.
            </summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="F:HelixToolkit.Maths.Half4.Z">
            <summary>
            Gets or sets the Z component of the vector.
            </summary>
            <value>The Z component of the vector.</value>
        </member>
        <member name="F:HelixToolkit.Maths.Half4.W">
            <summary>
            Gets or sets the W component of the vector.
            </summary>
            <value>The W component of the vector.</value>
        </member>
        <member name="M:HelixToolkit.Maths.Half4.#ctor(HelixToolkit.Maths.Half,HelixToolkit.Maths.Half,HelixToolkit.Maths.Half,HelixToolkit.Maths.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Half4" /> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
            <param name="z">The Z component.</param>
            <param name="w">The W component.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Half4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Half4" /> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
            <param name="z">The Z component.</param>
            <param name="w">The W component.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Half4.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Half4" /> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
            <param name="z">The Z component.</param>
            <param name="w">The W component.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Half4.#ctor(HelixToolkit.Maths.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Half4" /> structure.
            </summary>
            <param name="value">The value to set for the X, Y, Z, and W components.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Half4.op_Implicit(System.Numerics.Vector4)~HelixToolkit.Maths.Half4">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Numerics.Vector4"/> to <see cref="T:HelixToolkit.Maths.Half4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half4.op_Implicit(HelixToolkit.Maths.Half4)~System.Numerics.Vector4">
            <summary>
            Performs an implicit conversion from <see cref="T:HelixToolkit.Maths.Half4"/> to <see cref="T:System.Numerics.Vector4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half4.op_Explicit(System.Numerics.Vector3)~HelixToolkit.Maths.Half4">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Numerics.Vector3"/> to <see cref="T:HelixToolkit.Maths.Half4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half4.op_Explicit(HelixToolkit.Maths.Half4)~System.Numerics.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:HelixToolkit.Maths.Half4"/> to <see cref="T:System.Numerics.Vector3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half4.op_Explicit(System.Numerics.Vector2)~HelixToolkit.Maths.Half4">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Numerics.Vector2"/> to <see cref="T:HelixToolkit.Maths.Half4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half4.op_Explicit(HelixToolkit.Maths.Half4)~System.Numerics.Vector2">
            <summary>
            Performs an explicit conversion from <see cref="T:HelixToolkit.Maths.Half4"/> to <see cref="T:System.Numerics.Vector2"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half4.op_Equality(HelixToolkit.Maths.Half4,HelixToolkit.Maths.Half4)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half4.op_Inequality(HelixToolkit.Maths.Half4,HelixToolkit.Maths.Half4)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half4.Equals(HelixToolkit.Maths.Half4@,HelixToolkit.Maths.Half4@)">
            <summary>
            Determines whether the specified object instances are considered equal. 
            </summary>
            <param name="value1" />
            <param name="value2" />
            <returns>
            <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
            if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half4.Equals(HelixToolkit.Maths.Half4)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object. 
            </summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Half4.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object. 
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:HelixToolkit.Maths.HalfUtils">
            <summary>
            Helper class to perform Half/Float conversion.
            Code extract from paper : www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf by Jeroen van der Zijp
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.HalfUtils.Unpack(System.UInt16)">
            <summary>
            Unpacks the specified h.
            </summary>
            <param name="h">The h.</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.HalfUtils.Pack(System.Single)">
            <summary>
            Packs the specified f.
            </summary>
            <param name="f">The f.</param>
            <returns></returns>
        </member>
        <member name="T:HelixToolkit.Maths.Int3">
            <summary>
            Represents a three dimensional mathematical int vector.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Int3.SizeInBytes">
            <summary>
            The size of the <see cref = "T:HelixToolkit.Maths.Int3" /> type, in bytes.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Int3.Zero">
            <summary>
            A <see cref = "T:HelixToolkit.Maths.Int3" /> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Int3.UnitX">
            <summary>
            The X unit <see cref = "T:HelixToolkit.Maths.Int3" /> (1, 0, 0).
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Int3.UnitY">
            <summary>
            The Y unit <see cref = "T:HelixToolkit.Maths.Int3" /> (0, 1, 0).
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Int3.UnitZ">
            <summary>
            The Z unit <see cref = "T:HelixToolkit.Maths.Int3" /> (0, 0, 1).
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Int3.One">
            <summary>
            A <see cref = "T:HelixToolkit.Maths.Int3" /> with all of its components set to one.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Int3.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Int3.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Int3.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref = "T:HelixToolkit.Maths.Int3" /> struct.
            </summary>
            <param name = "value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref = "T:HelixToolkit.Maths.Int3" /> struct.
            </summary>
            <param name = "x">Initial value for the X component of the vector.</param>
            <param name = "y">Initial value for the Y component of the vector.</param>
            <param name = "z">Initial value for the Z component of the vector.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref = "T:HelixToolkit.Maths.Int3" /> struct.
            </summary>
            <param name = "values">The values to assign to the X, Y, Z, and W components of the vector. This must be an array with four elements.</param>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "values" /> is <c>null</c>.</exception>
            <exception cref = "T:System.ArgumentOutOfRangeException">Thrown when <paramref name = "values" /> contains more or less than four elements.</exception>
        </member>
        <member name="P:HelixToolkit.Maths.Int3.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, Z, or W component, depending on the index.</value>
            <param name = "index">The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z component, and 3 for the W component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref = "T:System.ArgumentOutOfRangeException">Thrown when the <paramref name = "index" /> is out of the range [0, 3].</exception>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A four-element array containing the components of the vector.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.Add(HelixToolkit.Maths.Int3@,HelixToolkit.Maths.Int3@,HelixToolkit.Maths.Int3@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name = "left">The first vector to add.</param>
            <param name = "right">The second vector to add.</param>
            <param name = "result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.Add(HelixToolkit.Maths.Int3,HelixToolkit.Maths.Int3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name = "left">The first vector to add.</param>
            <param name = "right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.Subtract(HelixToolkit.Maths.Int3@,HelixToolkit.Maths.Int3@,HelixToolkit.Maths.Int3@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name = "left">The first vector to subtract.</param>
            <param name = "right">The second vector to subtract.</param>
            <param name = "result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.Subtract(HelixToolkit.Maths.Int3,HelixToolkit.Maths.Int3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name = "left">The first vector to subtract.</param>
            <param name = "right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.Multiply(HelixToolkit.Maths.Int3@,System.Int32,HelixToolkit.Maths.Int3@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name = "value">The vector to scale.</param>
            <param name = "scale">The amount by which to scale the vector.</param>
            <param name = "result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.Multiply(HelixToolkit.Maths.Int3,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name = "value">The vector to scale.</param>
            <param name = "scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.Modulate(HelixToolkit.Maths.Int3@,HelixToolkit.Maths.Int3@,HelixToolkit.Maths.Int3@)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name = "left">The first vector to modulate.</param>
            <param name = "right">The second vector to modulate.</param>
            <param name = "result">When the method completes, contains the modulated vector.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.Modulate(HelixToolkit.Maths.Int3,HelixToolkit.Maths.Int3)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name = "left">The first vector to modulate.</param>
            <param name = "right">The second vector to modulate.</param>
            <returns>The modulated vector.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.Divide(HelixToolkit.Maths.Int3@,System.Int32,HelixToolkit.Maths.Int3@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name = "value">The vector to scale.</param>
            <param name = "scale">The amount by which to scale the vector.</param>
            <param name = "result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.Divide(HelixToolkit.Maths.Int3,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name = "value">The vector to scale.</param>
            <param name = "scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.Negate(HelixToolkit.Maths.Int3@,HelixToolkit.Maths.Int3@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name = "value">The vector to negate.</param>
            <param name = "result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.Negate(HelixToolkit.Maths.Int3)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name = "value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.Clamp(HelixToolkit.Maths.Int3@,HelixToolkit.Maths.Int3@,HelixToolkit.Maths.Int3@,HelixToolkit.Maths.Int3@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name = "value">The value to clamp.</param>
            <param name = "min">The minimum value.</param>
            <param name = "max">The maximum value.</param>
            <param name = "result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.Clamp(HelixToolkit.Maths.Int3,HelixToolkit.Maths.Int3,HelixToolkit.Maths.Int3)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name = "value">The value to clamp.</param>
            <param name = "min">The minimum value.</param>
            <param name = "max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.Max(HelixToolkit.Maths.Int3@,HelixToolkit.Maths.Int3@,HelixToolkit.Maths.Int3@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name = "left">The first source vector.</param>
            <param name = "right">The second source vector.</param>
            <param name = "result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.Max(HelixToolkit.Maths.Int3,HelixToolkit.Maths.Int3)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name = "left">The first source vector.</param>
            <param name = "right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.Min(HelixToolkit.Maths.Int3@,HelixToolkit.Maths.Int3@,HelixToolkit.Maths.Int3@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name = "left">The first source vector.</param>
            <param name = "right">The second source vector.</param>
            <param name = "result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.Min(HelixToolkit.Maths.Int3,HelixToolkit.Maths.Int3)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name = "left">The first source vector.</param>
            <param name = "right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.op_Addition(HelixToolkit.Maths.Int3,HelixToolkit.Maths.Int3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name = "left">The first vector to add.</param>
            <param name = "right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.op_UnaryPlus(HelixToolkit.Maths.Int3)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name = "value">The vector to assert (unchanged).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.op_Subtraction(HelixToolkit.Maths.Int3,HelixToolkit.Maths.Int3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name = "left">The first vector to subtract.</param>
            <param name = "right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.op_UnaryNegation(HelixToolkit.Maths.Int3)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name = "value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.op_Multiply(System.Int32,HelixToolkit.Maths.Int3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name = "value">The vector to scale.</param>
            <param name = "scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.op_Multiply(HelixToolkit.Maths.Int3,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name = "value">The vector to scale.</param>
            <param name = "scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.op_Division(HelixToolkit.Maths.Int3,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name = "value">The vector to scale.</param>
            <param name = "scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.op_Equality(HelixToolkit.Maths.Int3,HelixToolkit.Maths.Int3)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name = "left">The first value to compare.</param>
            <param name = "right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name = "left" /> has the same value as <paramref name = "right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.op_Inequality(HelixToolkit.Maths.Int3,HelixToolkit.Maths.Int3)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name = "left">The first value to compare.</param>
            <param name = "right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name = "left" /> has a different value than <paramref name = "right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.op_Explicit(HelixToolkit.Maths.Int3)~System.Numerics.Vector2">
            <summary>
            Performs an explicit conversion from <see cref = "T:HelixToolkit.Maths.Int3" /> to <see cref = "T:System.Numerics.Vector2" />.
            </summary>
            <param name = "value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.op_Explicit(HelixToolkit.Maths.Int3)~System.Numerics.Vector3">
            <summary>
            Performs an explicit conversion from <see cref = "T:HelixToolkit.Maths.Int3" /> to <see cref = "T:System.Numerics.Vector3" />.
            </summary>
            <param name = "value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.ToString">
            <summary>
            Returns a <see cref = "T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref = "T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.ToString(System.String)">
            <summary>
            Returns a <see cref = "T:System.String" /> that represents this instance.
            </summary>
            <param name = "format">The format.</param>
            <returns>
            A <see cref = "T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref = "T:System.String" /> that represents this instance.
            </summary>
            <param name = "formatProvider">The format provider.</param>
            <returns>
            A <see cref = "T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref = "T:System.String" /> that represents this instance.
            </summary>
            <param name = "format">The format.</param>
            <param name = "formatProvider">The format provider.</param>
            <returns>
            A <see cref = "T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.Equals(HelixToolkit.Maths.Int3@)">
            <summary>
            Determines whether the specified <see cref = "T:HelixToolkit.Maths.Int3" /> is equal to this instance.
            </summary>
            <param name = "other">The <see cref = "T:HelixToolkit.Maths.Int3" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref = "T:HelixToolkit.Maths.Int3" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.Equals(HelixToolkit.Maths.Int3)">
            <summary>
            Determines whether the specified <see cref = "T:HelixToolkit.Maths.Int3" /> is equal to this instance.
            </summary>
            <param name = "other">The <see cref = "T:HelixToolkit.Maths.Int3" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref = "T:HelixToolkit.Maths.Int3" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref = "T:System.Object" /> is equal to this instance.
            </summary>
            <param name = "obj">The <see cref = "T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref = "T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.op_Implicit(System.Int32[])~HelixToolkit.Maths.Int3">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> array to <see cref="T:HelixToolkit.Maths.Int3"/>.
            </summary>
            <param name="input">The input.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int3.op_Implicit(HelixToolkit.Maths.Int3)~System.Int32[]">
            <summary>
            Performs an implicit conversion from <see cref="T:HelixToolkit.Maths.Int3"/> to <see cref="T:System.Int32"/> array.
            </summary>
            <param name="input">The input.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:HelixToolkit.Maths.Int4">
            <summary>
            Represents a four dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Int4.SizeInBytes">
            <summary>
            The size of the <see cref = "T:HelixToolkit.Maths.Int4" /> type, in bytes.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Int4.Zero">
            <summary>
            A <see cref = "T:HelixToolkit.Maths.Int4" /> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Int4.UnitX">
            <summary>
            The X unit <see cref = "T:HelixToolkit.Maths.Int4" /> (1, 0, 0, 0).
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Int4.UnitY">
            <summary>
            The Y unit <see cref = "T:HelixToolkit.Maths.Int4" /> (0, 1, 0, 0).
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Int4.UnitZ">
            <summary>
            The Z unit <see cref = "T:HelixToolkit.Maths.Int4" /> (0, 0, 1, 0).
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Int4.UnitW">
            <summary>
            The W unit <see cref = "T:HelixToolkit.Maths.Int4" /> (0, 0, 0, 1).
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Int4.One">
            <summary>
            A <see cref = "T:HelixToolkit.Maths.Int4" /> with all of its components set to one.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Int4.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Int4.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Int4.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Int4.W">
            <summary>
            The W component of the vector.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref = "T:HelixToolkit.Maths.Int4" /> struct.
            </summary>
            <param name = "value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref = "T:HelixToolkit.Maths.Int4" /> struct.
            </summary>
            <param name = "x">Initial value for the X component of the vector.</param>
            <param name = "y">Initial value for the Y component of the vector.</param>
            <param name = "z">Initial value for the Z component of the vector.</param>
            <param name = "w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref = "T:HelixToolkit.Maths.Int4" /> struct.
            </summary>
            <param name = "values">The values to assign to the X, Y, Z, and W components of the vector. This must be an array with four elements.</param>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "values" /> is <c>null</c>.</exception>
            <exception cref = "T:System.ArgumentOutOfRangeException">Thrown when <paramref name = "values" /> contains more or less than four elements.</exception>
        </member>
        <member name="P:HelixToolkit.Maths.Int4.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, Z, or W component, depending on the index.</value>
            <param name = "index">The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z component, and 3 for the W component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref = "T:System.ArgumentOutOfRangeException">Thrown when the <paramref name = "index" /> is out of the range [0, 3].</exception>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A four-element array containing the components of the vector.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.Add(HelixToolkit.Maths.Int4@,HelixToolkit.Maths.Int4@,HelixToolkit.Maths.Int4@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name = "left">The first vector to add.</param>
            <param name = "right">The second vector to add.</param>
            <param name = "result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.Add(HelixToolkit.Maths.Int4,HelixToolkit.Maths.Int4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name = "left">The first vector to add.</param>
            <param name = "right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.Subtract(HelixToolkit.Maths.Int4@,HelixToolkit.Maths.Int4@,HelixToolkit.Maths.Int4@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name = "left">The first vector to subtract.</param>
            <param name = "right">The second vector to subtract.</param>
            <param name = "result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.Subtract(HelixToolkit.Maths.Int4,HelixToolkit.Maths.Int4)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name = "left">The first vector to subtract.</param>
            <param name = "right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.Multiply(HelixToolkit.Maths.Int4@,System.Int32,HelixToolkit.Maths.Int4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name = "value">The vector to scale.</param>
            <param name = "scale">The amount by which to scale the vector.</param>
            <param name = "result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.Multiply(HelixToolkit.Maths.Int4,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name = "value">The vector to scale.</param>
            <param name = "scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.Modulate(HelixToolkit.Maths.Int4@,HelixToolkit.Maths.Int4@,HelixToolkit.Maths.Int4@)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name = "left">The first vector to modulate.</param>
            <param name = "right">The second vector to modulate.</param>
            <param name = "result">When the method completes, contains the modulated vector.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.Modulate(HelixToolkit.Maths.Int4,HelixToolkit.Maths.Int4)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name = "left">The first vector to modulate.</param>
            <param name = "right">The second vector to modulate.</param>
            <returns>The modulated vector.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.Divide(HelixToolkit.Maths.Int4@,System.Int32,HelixToolkit.Maths.Int4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name = "value">The vector to scale.</param>
            <param name = "scale">The amount by which to scale the vector.</param>
            <param name = "result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.Divide(HelixToolkit.Maths.Int4,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name = "value">The vector to scale.</param>
            <param name = "scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.Negate(HelixToolkit.Maths.Int4@,HelixToolkit.Maths.Int4@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name = "value">The vector to negate.</param>
            <param name = "result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.Negate(HelixToolkit.Maths.Int4)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name = "value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.Clamp(HelixToolkit.Maths.Int4@,HelixToolkit.Maths.Int4@,HelixToolkit.Maths.Int4@,HelixToolkit.Maths.Int4@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name = "value">The value to clamp.</param>
            <param name = "min">The minimum value.</param>
            <param name = "max">The maximum value.</param>
            <param name = "result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.Clamp(HelixToolkit.Maths.Int4,HelixToolkit.Maths.Int4,HelixToolkit.Maths.Int4)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name = "value">The value to clamp.</param>
            <param name = "min">The minimum value.</param>
            <param name = "max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.Max(HelixToolkit.Maths.Int4@,HelixToolkit.Maths.Int4@,HelixToolkit.Maths.Int4@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name = "left">The first source vector.</param>
            <param name = "right">The second source vector.</param>
            <param name = "result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.Max(HelixToolkit.Maths.Int4,HelixToolkit.Maths.Int4)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name = "left">The first source vector.</param>
            <param name = "right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.Min(HelixToolkit.Maths.Int4@,HelixToolkit.Maths.Int4@,HelixToolkit.Maths.Int4@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name = "left">The first source vector.</param>
            <param name = "right">The second source vector.</param>
            <param name = "result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.Min(HelixToolkit.Maths.Int4,HelixToolkit.Maths.Int4)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name = "left">The first source vector.</param>
            <param name = "right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.op_Addition(HelixToolkit.Maths.Int4,HelixToolkit.Maths.Int4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name = "left">The first vector to add.</param>
            <param name = "right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.op_UnaryPlus(HelixToolkit.Maths.Int4)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name = "value">The vector to assert (unchanged).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.op_Subtraction(HelixToolkit.Maths.Int4,HelixToolkit.Maths.Int4)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name = "left">The first vector to subtract.</param>
            <param name = "right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.op_UnaryNegation(HelixToolkit.Maths.Int4)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name = "value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.op_Multiply(System.Int32,HelixToolkit.Maths.Int4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name = "value">The vector to scale.</param>
            <param name = "scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.op_Multiply(HelixToolkit.Maths.Int4,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name = "value">The vector to scale.</param>
            <param name = "scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.op_Division(HelixToolkit.Maths.Int4,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name = "value">The vector to scale.</param>
            <param name = "scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.op_Equality(HelixToolkit.Maths.Int4,HelixToolkit.Maths.Int4)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name = "left">The first value to compare.</param>
            <param name = "right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name = "left" /> has the same value as <paramref name = "right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.op_Inequality(HelixToolkit.Maths.Int4,HelixToolkit.Maths.Int4)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name = "left">The first value to compare.</param>
            <param name = "right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name = "left" /> has a different value than <paramref name = "right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.op_Explicit(HelixToolkit.Maths.Int4)~System.Numerics.Vector2">
            <summary>
            Performs an explicit conversion from <see cref = "T:HelixToolkit.Maths.Int4" /> to <see cref = "T:System.Numerics.Vector2" />.
            </summary>
            <param name = "value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.op_Explicit(HelixToolkit.Maths.Int4)~System.Numerics.Vector3">
            <summary>
            Performs an explicit conversion from <see cref = "T:HelixToolkit.Maths.Int4" /> to <see cref = "T:System.Numerics.Vector3" />.
            </summary>
            <param name = "value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.op_Explicit(HelixToolkit.Maths.Int4)~System.Numerics.Vector4">
            <summary>
            Performs an explicit conversion from <see cref = "T:HelixToolkit.Maths.Int4" /> to <see cref = "T:System.Numerics.Vector4" />.
            </summary>
            <param name = "value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.ToString">
            <summary>
            Returns a <see cref = "T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref = "T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.ToString(System.String)">
            <summary>
            Returns a <see cref = "T:System.String" /> that represents this instance.
            </summary>
            <param name = "format">The format.</param>
            <returns>
            A <see cref = "T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref = "T:System.String" /> that represents this instance.
            </summary>
            <param name = "formatProvider">The format provider.</param>
            <returns>
            A <see cref = "T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref = "T:System.String" /> that represents this instance.
            </summary>
            <param name = "format">The format.</param>
            <param name = "formatProvider">The format provider.</param>
            <returns>
            A <see cref = "T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.Equals(HelixToolkit.Maths.Int4@)">
            <summary>
            Determines whether the specified <see cref = "T:HelixToolkit.Maths.Int4" /> is equal to this instance.
            </summary>
            <param name = "other">The <see cref = "T:HelixToolkit.Maths.Int4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref = "T:HelixToolkit.Maths.Int4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.Equals(HelixToolkit.Maths.Int4)">
            <summary>
            Determines whether the specified <see cref = "T:HelixToolkit.Maths.Int4" /> is equal to this instance.
            </summary>
            <param name = "other">The <see cref = "T:HelixToolkit.Maths.Int4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref = "T:HelixToolkit.Maths.Int4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref = "T:System.Object" /> is equal to this instance.
            </summary>
            <param name = "obj">The <see cref = "T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref = "T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.op_Implicit(System.Int32[])~HelixToolkit.Maths.Int4">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> array to <see cref="T:HelixToolkit.Maths.Int4"/>.
            </summary>
            <param name="input">The input.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Int4.op_Implicit(HelixToolkit.Maths.Int4)~System.Int32[]">
            <summary>
            Performs an implicit conversion from <see cref="T:HelixToolkit.Maths.Int4"/> to <see cref="T:System.Int32"/> array.
            </summary>
            <param name="input">The input.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="F:HelixToolkit.Maths.MathUtil.ZeroTolerance">
            <summary>
            The value for which all absolute numbers smaller than are considered equal to zero.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.MathUtil.Pi">
            <summary>
            A value specifying the approximation of π which is 180 degrees.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.MathUtil.TwoPi">
            <summary>
            A value specifying the approximation of 2π which is 360 degrees.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.MathUtil.PiOverTwo">
            <summary>
            A value specifying the approximation of π/2 which is 90 degrees.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.MathUtil.PiOverFour">
            <summary>
            A value specifying the approximation of π/4 which is 45 degrees.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.MathUtil.NearEqual(System.Single,System.Single)">
            <summary>
            Checks if a and b are almost equals, taking into account the magnitude of floating point numbers (unlike <see cref="M:HelixToolkit.Maths.MathUtil.WithinEpsilon(System.Single,System.Single,System.Single)"/> method). See Remarks.
            See remarks.
            </summary>
            <param name="a">The left value to compare.</param>
            <param name="b">The right value to compare.</param>
            <returns><c>true</c> if a almost equal to b, <c>false</c> otherwise</returns>
            <remarks>
            The code is using the technique described by Bruce Dawson in 
            <a href="http://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/">Comparing Floating point numbers 2012 edition</a>. 
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.MathUtil.IsZero(System.Single)">
            <summary>
            Determines whether the specified value is close to zero (0.0f).
            </summary>
            <param name="a">The floating value.</param>
            <returns><c>true</c> if the specified value is close to zero (0.0f); otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MathUtil.IsOne(System.Single)">
            <summary>
            Determines whether the specified value is close to one (1.0f).
            </summary>
            <param name="a">The floating value.</param>
            <returns><c>true</c> if the specified value is close to one (1.0f); otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MathUtil.WithinEpsilon(System.Single,System.Single,System.Single)">
            <summary>
            Checks if a - b are almost equals within a float epsilon.
            </summary>
            <param name="a">The left value to compare.</param>
            <param name="b">The right value to compare.</param>
            <param name="epsilon">Epsilon value</param>
            <returns><c>true</c> if a almost equal to b within a float epsilon, <c>false</c> otherwise</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MathUtil.RevolutionsToDegrees(System.Single)">
            <summary>
            Converts revolutions to degrees.
            </summary>
            <param name="revolution">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MathUtil.RevolutionsToRadians(System.Single)">
            <summary>
            Converts revolutions to radians.
            </summary>
            <param name="revolution">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MathUtil.RevolutionsToGradians(System.Single)">
            <summary>
            Converts revolutions to gradians.
            </summary>
            <param name="revolution">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MathUtil.DegreesToRevolutions(System.Single)">
            <summary>
            Converts degrees to revolutions.
            </summary>
            <param name="degree">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MathUtil.DegreesToRadians(System.Single)">
            <summary>
            Converts degrees to radians.
            </summary>
            <param name="degree">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MathUtil.RadiansToRevolutions(System.Single)">
            <summary>
            Converts radians to revolutions.
            </summary>
            <param name="radian">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MathUtil.RadiansToGradians(System.Single)">
            <summary>
            Converts radians to gradians.
            </summary>
            <param name="radian">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MathUtil.GradiansToRevolutions(System.Single)">
            <summary>
            Converts gradians to revolutions.
            </summary>
            <param name="gradian">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MathUtil.GradiansToDegrees(System.Single)">
            <summary>
            Converts gradians to degrees.
            </summary>
            <param name="gradian">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MathUtil.GradiansToRadians(System.Single)">
            <summary>
            Converts gradians to radians.
            </summary>
            <param name="gradian">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MathUtil.RadiansToDegrees(System.Single)">
            <summary>
            Converts radians to degrees.
            </summary>
            <param name="radian">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MathUtil.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>The result of clamping a value between min and max</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MathUtil.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamps the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>The result of clamping a value between min and max</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MathUtil.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Clamps the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>The result of clamping a value between min and max</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MathUtil.Lerp(System.Double,System.Double,System.Double)">
            <summary>
            Interpolates between two values using a linear function by a given amount.
            </summary>
            <remarks>
            See http://www.encyclopediaofmath.org/index.php/Linear_interpolation and
            http://fgiesen.wordpress.com/2012/08/15/linear-interpolation-past-present-and-future/
            </remarks>
            <param name="from">Value to interpolate from.</param>
            <param name="to">Value to interpolate to.</param>
            <param name="amount">Interpolation amount.</param>
            <returns>The result of linear interpolation of values based on the amount.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MathUtil.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates between two values using a linear function by a given amount.
            </summary>
            <remarks>
            See http://www.encyclopediaofmath.org/index.php/Linear_interpolation and
            http://fgiesen.wordpress.com/2012/08/15/linear-interpolation-past-present-and-future/
            </remarks>
            <param name="from">Value to interpolate from.</param>
            <param name="to">Value to interpolate to.</param>
            <param name="amount">Interpolation amount.</param>
            <returns>The result of linear interpolation of values based on the amount.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MathUtil.Lerp(System.Byte,System.Byte,System.Single)">
            <summary>
            Interpolates between two values using a linear function by a given amount.
            </summary>
            <remarks>
            See http://www.encyclopediaofmath.org/index.php/Linear_interpolation and
            http://fgiesen.wordpress.com/2012/08/15/linear-interpolation-past-present-and-future/
            </remarks>
            <param name="from">Value to interpolate from.</param>
            <param name="to">Value to interpolate to.</param>
            <param name="amount">Interpolation amount.</param>
            <returns>The result of linear interpolation of values based on the amount.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MathUtil.SmoothStep(System.Single)">
            <summary>
            Performs smooth (cubic Hermite) interpolation between 0 and 1.
            </summary>
            <remarks>
            See https://en.wikipedia.org/wiki/Smoothstep
            </remarks>
            <param name="amount">Value between 0 and 1 indicating interpolation amount.</param>
        </member>
        <member name="M:HelixToolkit.Maths.MathUtil.SmootherStep(System.Single)">
            <summary>
            Performs a smooth(er) interpolation between 0 and 1 with 1st and 2nd order derivatives of zero at endpoints.
            </summary>
            <remarks>
            See https://en.wikipedia.org/wiki/Smoothstep
            </remarks>
            <param name="amount">Value between 0 and 1 indicating interpolation amount.</param>
        </member>
        <member name="M:HelixToolkit.Maths.MathUtil.Mod(System.Single,System.Single)">
            <summary>
            Calculates the modulo of the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="modulo">The modulo.</param>
            <returns>The result of the modulo applied to value</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MathUtil.Mod2PI(System.Single)">
            <summary>
            Calculates the modulo 2*PI of the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the modulo applied to value</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MathUtil.Wrap(System.Int32,System.Int32,System.Int32)">
            <summary>
            Wraps the specified value into a range [min, max]
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>Result of the wrapping.</returns>
            <exception cref="T:System.ArgumentException">Is thrown when <paramref name="min"/> is greater than <paramref name="max"/>.</exception>
        </member>
        <member name="M:HelixToolkit.Maths.MathUtil.Wrap(System.Single,System.Single,System.Single)">
            <summary>
            Wraps the specified value into a range [min, max]
            </summary>
            <param name="value">The value.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>Result of the wrapping.</returns>
            <exception cref="T:System.ArgumentException">Is thrown when <paramref name="min"/> is greater than <paramref name="max"/>.</exception>
        </member>
        <member name="M:HelixToolkit.Maths.MathUtil.Gauss(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Gauss function.
            http://en.wikipedia.org/wiki/Gaussian_function#Two-dimensional_Gaussian_function
            </summary>
            <param name="amplitude">Curve amplitude.</param>
            <param name="x">Position X.</param>
            <param name="y">Position Y</param>
            <param name="centerX">Center X.</param>
            <param name="centerY">Center Y.</param>
            <param name="sigmaX">Curve sigma X.</param>
            <param name="sigmaY">Curve sigma Y.</param>
            <returns>The result of Gaussian function.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MathUtil.Gauss(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gauss function.
            http://en.wikipedia.org/wiki/Gaussian_function#Two-dimensional_Gaussian_function
            </summary>
            <param name="amplitude">Curve amplitude.</param>
            <param name="x">Position X.</param>
            <param name="y">Position Y</param>
            <param name="centerX">Center X.</param>
            <param name="centerY">Center Y.</param>
            <param name="sigmaX">Curve sigma X.</param>
            <param name="sigmaY">Curve sigma Y.</param>
            <returns>The result of Gaussian function.</returns>
        </member>
        <member name="T:HelixToolkit.Maths.MatrixHelper">
            <summary>
            Represents a 4x4 mathematical matrix.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.MatrixHelper.SizeInBytes">
            <summary>
            The size of the <see cref="T:System.Numerics.Matrix4x4"/> type, in bytes.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.MatrixHelper.Zero">
            <summary>
            A <see cref="T:System.Numerics.Matrix4x4"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.MatrixHelper.Identity">
            <summary>
            The identity <see cref="T:System.Numerics.Matrix4x4"/>.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Up(System.Numerics.Matrix4x4)">
            <summary>
            Gets or sets the up <see cref="T:System.Numerics.Vector3"/> of the matrix; that is M21, M22, and M23.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Down(System.Numerics.Matrix4x4)">
            <summary>
            Gets or sets the down <see cref="T:System.Numerics.Vector3"/> of the matrix; that is -M21, -M22, and -M23.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Right(System.Numerics.Matrix4x4)">
            <summary>
            Gets or sets the right <see cref="T:System.Numerics.Vector3"/> of the matrix; that is M11, M12, and M13.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Left(System.Numerics.Matrix4x4)">
            <summary>
            Gets or sets the left <see cref="T:System.Numerics.Vector3"/> of the matrix; that is -M11, -M12, and -M13.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Forward(System.Numerics.Matrix4x4)">
            <summary>
            Gets or sets the forward <see cref="T:System.Numerics.Vector3"/> of the matrix; that is -M31, -M32, and -M33.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Backward(System.Numerics.Matrix4x4)">
            <summary>
            Gets or sets the backward <see cref="T:System.Numerics.Vector3"/> of the matrix; that is M31, M32, and M33.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Row1(System.Numerics.Matrix4x4)">
            <summary>
            Gets or sets the first row in the matrix; that is M11, M12, M13, and M14.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Row2(System.Numerics.Matrix4x4)">
            <summary>
            Gets or sets the second row in the matrix; that is M21, M22, M23, and M24.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Row3(System.Numerics.Matrix4x4)">
            <summary>
            Gets or sets the third row in the matrix; that is M31, M32, M33, and M34.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Row4(System.Numerics.Matrix4x4)">
            <summary>
            Gets or sets the fourth row in the matrix; that is M41, M42, M43, and M44.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.GetRow(System.Numerics.Matrix4x4,System.Int32)">
            <summary>
            Gets the row. Zero based index. Row Index = 0 will get row 1.
            </summary>
            <param name="m">The m.</param>
            <param name="rowIdx">Index of the row.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Row Index out of bound.</exception>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.SetRow(System.Numerics.Matrix4x4@,System.Int32,System.Numerics.Vector4)">
            <summary>
            Sets the row by index. Index 0 sets row 1.
            </summary>
            <param name="m">The m.</param>
            <param name="rowIdx">Index of the row.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentException">Row Index out of bound.</exception>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.GetColumn(System.Numerics.Matrix4x4,System.Int32)">
            <summary>
            Gets the column. Zero based index. column Index = 0 will get column 1.
            </summary>
            <param name="m">The m.</param>
            <param name="columnIdx">Index of the row.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Column Index out of bound.</exception>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.SetColumn(System.Numerics.Matrix4x4@,System.Int32,System.Numerics.Vector4)">
            <summary>
            Sets the column by index. Index 0 sets column 1;
            </summary>
            <param name="m">The m.</param>
            <param name="columnIdx">Index of the column.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentException">Column Index out of bound.</exception>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Column1(System.Numerics.Matrix4x4)">
            <summary>
            Gets or sets the first column in the matrix; that is M11, M21, M31, and M41.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Column2(System.Numerics.Matrix4x4)">
            <summary>
            Gets or sets the second column in the matrix; that is M12, M22, M32, and M42.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Column3(System.Numerics.Matrix4x4)">
            <summary>
            Gets or sets the third column in the matrix; that is M13, M23, M33, and M43.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Column4(System.Numerics.Matrix4x4)">
            <summary>
            Gets or sets the fourth column in the matrix; that is M14, M24, M34, and M44.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.ScaleVector(System.Numerics.Matrix4x4)">
            <summary>
            Gets or sets the scale of the matrix; that is M11, M22, and M33.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Get(System.Numerics.Matrix4x4,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the matrix component, depending on the index.</value>
            <param name="index">The zero-based index of the component to access.</param>
            <param name="m"></param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 15].</exception>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Get(System.Numerics.Matrix4x4,System.Int32,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the matrix component, depending on the index.</value>
            <param name="m"></param>
            <param name="row">The row of the matrix to access.</param>
            <param name="column">The column of the matrix to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="row"/> or <paramref name="column"/>is out of the range [0, 3].</exception>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Orthogonalize(System.Numerics.Matrix4x4@)">
            <summary>
            Orthogonalizes the specified matrix.
            </summary>
            <remarks>
            <para>Orthogonalization is the process of making all rows orthogonal to each other. This
            means that any given row in the matrix will be orthogonal to any other given row in the
            matrix.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting matrix
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the matrix rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Orthonormalize(System.Numerics.Matrix4x4@)">
            <summary>
            Orthonormalizes the specified matrix.
            </summary>
            <remarks>
            <para>Orthonormalization is the process of making all rows and columns orthogonal to each
            other and making all rows and columns of unit length. This means that any given row will
            be orthogonal to any other given row and any given column will be orthogonal to any other
            given column. Any given row will not be orthogonal to any given column. Every row and every
            column will be of unit length.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting matrix
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the matrix rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.DecomposeQR(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4@,System.Numerics.Matrix4x4@)">
            <summary>
            Decomposes a matrix into an orthonormalized matrix Q and a right triangular matrix R.
            </summary>
            <param name="m"></param>
            <param name="Q">When the method completes, contains the orthonormalized matrix of the decomposition.</param>
            <param name="R">When the method completes, contains the right triangular matrix of the decomposition.</param>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.DecomposeLQ(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4@,System.Numerics.Matrix4x4@)">
            <summary>
            Decomposes a matrix into a lower triangular matrix L and an orthonormalized matrix Q.
            </summary>
            <param name="m"></param>
            <param name="L">When the method completes, contains the lower triangular matrix of the decomposition.</param>
            <param name="Q">When the method completes, contains the orthonormalized matrix of the decomposition.</param>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.DecomposeUniformScale(System.Numerics.Matrix4x4,System.Single@,System.Numerics.Quaternion@,System.Numerics.Vector3@)">
            <summary>
            Decomposes a uniform scale matrix into a scale, rotation, and translation.
            A uniform scale matrix has the same scale in every axis.
            </summary>
            <param name="m"></param>
            <param name="scale">When the method completes, contains the scaling component of the decomposed matrix.</param>
            <param name="rotation">When the method completes, contains the rotation component of the decomposed matrix.</param>
            <param name="translation">When the method completes, contains the translation component of the decomposed matrix.</param>
            <remarks>
            This method is designed to decompose only an SRT transformation matrix that has the same scale in every axis.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.ExchangeRows(System.Numerics.Matrix4x4@,System.Int32,System.Int32)">
            <summary>
            Exchanges two rows in the matrix.
            </summary>
            <param name="m"></param>
            <param name="firstRow">The first row to exchange. This is an index of the row starting at zero.</param>
            <param name="secondRow">The second row to exchange. This is an index of the row starting at zero.</param>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.ExchangeColumns(System.Numerics.Matrix4x4@,System.Int32,System.Int32)">
            <summary>
            Exchanges two columns in the matrix.
            </summary>
            <param name="m"></param>
            <param name="firstColumn">The first column to exchange. This is an index of the column starting at zero.</param>
            <param name="secondColumn">The second column to exchange. This is an index of the column starting at zero.</param>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.ToArray(System.Numerics.Matrix4x4)">
            <summary>
            Creates an array containing the elements of the matrix.
            </summary>
            <param name="m"></param>
            <returns>A sixteen-element array containing the components of the matrix.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Exponent(System.Numerics.Matrix4x4@,System.Int32,System.Numerics.Matrix4x4@)">
            <summary>
            Performs the exponential operation on a matrix.
            </summary>
            <param name="value">The matrix to perform the operation on.</param>
            <param name="exponent">The exponent to raise the matrix to.</param>
            <param name="result">When the method completes, contains the exponential matrix.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="exponent"/> is negative.</exception>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Exponent(System.Numerics.Matrix4x4,System.Int32)">
            <summary>
            Performs the exponential operation on a matrix.
            </summary>
            <param name="value">The matrix to perform the operation on.</param>
            <param name="exponent">The exponent to raise the matrix to.</param>
            <returns>The exponential matrix.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="exponent"/> is negative.</exception>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Negate(System.Numerics.Matrix4x4@,System.Numerics.Matrix4x4@)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="value">The matrix to be negated.</param>
            <param name="result">When the method completes, contains the negated matrix.</param>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.SmoothStep(System.Numerics.Matrix4x4@,System.Numerics.Matrix4x4@,System.Single,System.Numerics.Matrix4x4@)">
            <summary>
            Performs a cubic interpolation between two matrices.
            </summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two matrices.</param>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.SmoothStep(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4,System.Single)">
            <summary>
            Performs a cubic interpolation between two matrices.
            </summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two matrices.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Orthogonalize(System.Numerics.Matrix4x4@,System.Numerics.Matrix4x4@)">
            <summary>
            Orthogonalizes the specified matrix.
            </summary>
            <param name="value">The matrix to orthogonalize.</param>
            <param name="result">When the method completes, contains the orthogonalized matrix.</param>
            <remarks>
            <para>Orthogonalization is the process of making all rows orthogonal to each other. This
            means that any given row in the matrix will be orthogonal to any other given row in the
            matrix.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting matrix
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the matrix rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Orthogonalize(System.Numerics.Matrix4x4)">
            <summary>
            Orthogonalizes the specified matrix.
            </summary>
            <param name="value">The matrix to orthogonalize.</param>
            <returns>The orthogonalized matrix.</returns>
            <remarks>
            <para>Orthogonalization is the process of making all rows orthogonal to each other. This
            means that any given row in the matrix will be orthogonal to any other given row in the
            matrix.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting matrix
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the matrix rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Orthonormalize(System.Numerics.Matrix4x4@,System.Numerics.Matrix4x4@)">
            <summary>
            Orthonormalizes the specified matrix.
            </summary>
            <param name="value">The matrix to orthonormalize.</param>
            <param name="result">When the method completes, contains the orthonormalized matrix.</param>
            <remarks>
            <para>Orthonormalization is the process of making all rows and columns orthogonal to each
            other and making all rows and columns of unit length. This means that any given row will
            be orthogonal to any other given row and any given column will be orthogonal to any other
            given column. Any given row will not be orthogonal to any given column. Every row and every
            column will be of unit length.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting matrix
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the matrix rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Orthonormalize(System.Numerics.Matrix4x4)">
            <summary>
            Orthonormalizes the specified matrix.
            </summary>
            <param name="value">The matrix to orthonormalize.</param>
            <returns>The orthonormalized matrix.</returns>
            <remarks>
            <para>Orthonormalization is the process of making all rows and columns orthogonal to each
            other and making all rows and columns of unit length. This means that any given row will
            be orthogonal to any other given row and any given column will be orthogonal to any other
            given column. Any given row will not be orthogonal to any given column. Every row and every
            column will be of unit length.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting matrix
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the matrix rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.UpperTriangularForm(System.Numerics.Matrix4x4@,System.Numerics.Matrix4x4@)">
            <summary>
            Brings the matrix into upper triangular form using elementary row operations.
            </summary>
            <param name="value">The matrix to put into upper triangular form.</param>
            <param name="result">When the method completes, contains the upper triangular matrix.</param>
            <remarks>
            If the matrix is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the matrix represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.UpperTriangularForm(System.Numerics.Matrix4x4)">
            <summary>
            Brings the matrix into upper triangular form using elementary row operations.
            </summary>
            <param name="value">The matrix to put into upper triangular form.</param>
            <returns>The upper triangular matrix.</returns>
            <remarks>
            If the matrix is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the matrix represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.LowerTriangularForm(System.Numerics.Matrix4x4@,System.Numerics.Matrix4x4@)">
            <summary>
            Brings the matrix into lower triangular form using elementary row operations.
            </summary>
            <param name="value">The matrix to put into lower triangular form.</param>
            <param name="result">When the method completes, contains the lower triangular matrix.</param>
            <remarks>
            If the matrix is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the matrix represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.LowerTriangularForm(System.Numerics.Matrix4x4)">
            <summary>
            Brings the matrix into lower triangular form using elementary row operations.
            </summary>
            <param name="value">The matrix to put into lower triangular form.</param>
            <returns>The lower triangular matrix.</returns>
            <remarks>
            If the matrix is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the matrix represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.RowEchelonForm(System.Numerics.Matrix4x4@,System.Numerics.Matrix4x4@)">
            <summary>
            Brings the matrix into row echelon form using elementary row operations;
            </summary>
            <param name="value">The matrix to put into row echelon form.</param>
            <param name="result">When the method completes, contains the row echelon form of the matrix.</param>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.RowEchelonForm(System.Numerics.Matrix4x4)">
            <summary>
            Brings the matrix into row echelon form using elementary row operations;
            </summary>
            <param name="value">The matrix to put into row echelon form.</param>
            <returns>When the method completes, contains the row echelon form of the matrix.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.ReducedRowEchelonForm(System.Numerics.Matrix4x4@,System.Numerics.Vector4@,System.Numerics.Matrix4x4@,System.Numerics.Vector4@)">
            <summary>
            Brings the matrix into reduced row echelon form using elementary row operations.
            </summary>
            <param name="value">The matrix to put into reduced row echelon form.</param>
            <param name="augment">The fifth column of the matrix.</param>
            <param name="result">When the method completes, contains the resultant matrix after the operation.</param>
            <param name="augmentResult">When the method completes, contains the resultant fifth column of the matrix.</param>
            <remarks>
            <para>The fifth column is often called the augmented part of the matrix. This is because the fifth
            column is really just an extension of the matrix so that there is a place to put all of the
            non-zero components after the operation is complete.</para>
            <para>Often times the resultant matrix will the identity matrix or a matrix similar to the identity
            matrix. Sometimes, however, that is not possible and numbers other than zero and one may appear.</para>
            <para>This method can be used to solve systems of linear equations. Upon completion of this method,
            the <paramref name="augmentResult"/> will contain the solution for the system. It is up to the user
            to analyze both the input and the result to determine if a solution really exists.</para>
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.BillboardLH(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Matrix4x4@)">
            <summary>
            Creates a left-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <param name="result">When the method completes, contains the created billboard matrix.</param>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.BillboardLH(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Creates a left-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <returns>The created billboard matrix.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.BillboardRH(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Matrix4x4@)">
            <summary>
            Creates a right-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <param name="result">When the method completes, contains the created billboard matrix.</param>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.BillboardRH(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Creates a right-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <returns>The created billboard matrix.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.LookAtLH(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Matrix4x4@)">
            <summary>
            Creates a left-handed, look-at matrix.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at matrix.</param>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.LookAtLH(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Creates a left-handed, look-at matrix.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at matrix.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.LookAtRH(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Matrix4x4@)">
            <summary>
            Creates a right-handed, look-at matrix.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at matrix.</param>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.LookAtRH(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Creates a right-handed, look-at matrix.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at matrix.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.OrthoLH(System.Single,System.Single,System.Single,System.Single,System.Numerics.Matrix4x4@)">
            <summary>
            Creates a left-handed, orthographic projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.OrthoLH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, orthographic projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.OrthoRH(System.Single,System.Single,System.Single,System.Single,System.Numerics.Matrix4x4@)">
            <summary>
            Creates a right-handed, orthographic projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.OrthoRH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a right-handed, orthographic projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.OrthoOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Numerics.Matrix4x4@)">
            <summary>
            Creates a left-handed, customized orthographic projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.OrthoOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, customized orthographic projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.OrthoOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Numerics.Matrix4x4@)">
            <summary>
            Creates a right-handed, customized orthographic projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.OrthoOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a right-handed, customized orthographic projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.PerspectiveLH(System.Single,System.Single,System.Single,System.Single,System.Numerics.Matrix4x4@)">
            <summary>
            Creates a left-handed, perspective projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.PerspectiveLH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, perspective projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.PerspectiveRH(System.Single,System.Single,System.Single,System.Single,System.Numerics.Matrix4x4@)">
            <summary>
            Creates a right-handed, perspective projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.PerspectiveRH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a right-handed, perspective projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.PerspectiveFovLH(System.Single,System.Single,System.Single,System.Single,System.Numerics.Matrix4x4@)">
            <summary>
            Creates a left-handed, perspective projection matrix based on a field of view.
            </summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.PerspectiveFovLH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, perspective projection matrix based on a field of view.
            </summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.PerspectiveFovRH(System.Single,System.Single,System.Single,System.Single,System.Numerics.Matrix4x4@)">
            <summary>
            Creates a right-handed, perspective projection matrix based on a field of view.
            </summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.PerspectiveFovRH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a right-handed, perspective projection matrix based on a field of view.
            </summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.PerspectiveOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Numerics.Matrix4x4@)">
            <summary>
            Creates a left-handed, customized perspective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.PerspectiveOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, customized perspective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.PerspectiveOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Numerics.Matrix4x4@)">
            <summary>
            Creates a right-handed, customized perspective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.PerspectiveOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a right-handed, customized perspective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Skew(System.Single,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Matrix4x4@)">
            <summary>
            Creates a skew/shear matrix by means of a translation vector, a rotation vector, and a rotation angle.
            shearing is performed in the direction of translation vector, where translation vector and rotation vector define the shearing plane.
            The effect is such that the skewed rotation vector has the specified angle with rotation itself.
            </summary>
            <param name="angle">The rotation angle.</param>
            <param name="rotationVec">The rotation vector</param>
            <param name="transVec">The translation vector</param>
            <param name="matrix">Contains the created skew/shear matrix. </param>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.AffineTransformation(System.Single,System.Numerics.Quaternion@,System.Numerics.Vector3@,System.Numerics.Matrix4x4@)">
            <summary>
            Creates a 3D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.AffineTransformation(System.Single,System.Numerics.Quaternion,System.Numerics.Vector3)">
            <summary>
            Creates a 3D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.AffineTransformation(System.Single,System.Numerics.Vector3@,System.Numerics.Quaternion@,System.Numerics.Vector3@,System.Numerics.Matrix4x4@)">
            <summary>
            Creates a 3D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.AffineTransformation(System.Single,System.Numerics.Vector3,System.Numerics.Quaternion,System.Numerics.Vector3)">
            <summary>
            Creates a 3D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.AffineTransformation2D(System.Single,System.Single,System.Numerics.Vector2@,System.Numerics.Matrix4x4@)">
            <summary>
            Creates a 2D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.AffineTransformation2D(System.Single,System.Single,System.Numerics.Vector2)">
            <summary>
            Creates a 2D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.AffineTransformation2D(System.Single,System.Numerics.Vector2@,System.Single,System.Numerics.Vector2@,System.Numerics.Matrix4x4@)">
            <summary>
            Creates a 2D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.AffineTransformation2D(System.Single,System.Numerics.Vector2,System.Single,System.Numerics.Vector2)">
            <summary>
            Creates a 2D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Transformation(System.Numerics.Vector3@,System.Numerics.Quaternion@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Quaternion@,System.Numerics.Vector3@,System.Numerics.Matrix4x4@)">
            <summary>
            Creates a transformation matrix.
            </summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created transformation matrix.</param>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Transformation(System.Numerics.Vector3,System.Numerics.Quaternion,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Quaternion,System.Numerics.Vector3)">
            <summary>
            Creates a transformation matrix.
            </summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created transformation matrix.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Transformation2D(System.Numerics.Vector2@,System.Single,System.Numerics.Vector2@,System.Numerics.Vector2@,System.Single,System.Numerics.Vector2@,System.Numerics.Matrix4x4@)">
            <summary>
            Creates a 2D transformation matrix.
            </summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created transformation matrix.</param>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Transformation2D(System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Numerics.Vector2)">
            <summary>
            Creates a 2D transformation matrix.
            </summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created transformation matrix.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Scaling(System.Single)">
            <summary>
            Scalings the specified scaling.
            </summary>
            <param name="scaling">The scaling.</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Scaling(System.Single,System.Single,System.Single)">
            <summary>
            Scalings the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Scaling(System.Numerics.Vector3)">
            <summary>
            Scalings the specified v.
            </summary>
            <param name="v">The v.</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Scaling(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Scalings the specified v.
            </summary>
            <param name="v">The v.</param>
            <param name="center">The center.</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Translation(System.Single,System.Single,System.Single)">
            <summary>
            Translations the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Translation(System.Numerics.Vector3)">
            <summary>
            Translations the specified v.
            </summary>
            <param name="v">The v.</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.RotationAxis(System.Numerics.Vector3,System.Single)">
            <summary>
            Rotations the axis. Angle is radian.
            </summary>
            <param name="axis">The axis.</param>
            <param name="angle">The angle.</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.RotationX(System.Single)">
            <summary>
            Rotations the x.Angle is radian.
            </summary>
            <param name="angle">The radian.</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.RotationY(System.Single)">
            <summary>
            Rotations the y.Angle is radian.
            </summary>
            <param name="angle">The radian.</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.RotationZ(System.Single)">
            <summary>
            Rotations the z.Angle is radian.
            </summary>
            <param name="angle">The radian.</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.PsudoInvert(System.Numerics.Matrix4x4@)">
            <summary>
            Pseudo inversion. Usually use to perform fast view matrix inversion.
            </summary>
            <param name="viewMatrix"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.PsudoInvert(System.Numerics.Matrix4x4)">
            <summary>
            Pseudo inversion. Usually use to perform fast view matrix inversion.
            </summary>
            <param name="viewMatrix"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.MatrixHelper.Inverted(System.Numerics.Matrix4x4)">
            <summary>
            Return inverted matrix if the operation succeeded.
            Otherwise, return <see cref="P:System.Numerics.Matrix4x4.Identity"/>
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="T:HelixToolkit.Maths.Matrix3x2Helper">
            <summary>
            Direct2D Matrix3x2. Supports implicit cast from <see cref="T:System.Numerics.Matrix4x4"/>.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Matrix3x2Helper.Identity">
            <summary>
            Gets the identity matrix.
            </summary>
            <value>The identity matrix.</value>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x2Helper.Row1(System.Numerics.Matrix3x2)">
            <summary>
            Gets or sets the first row in the matrix; that is M11 and M12.
            <paramref name="m"/>>
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x2Helper.SetRow1(System.Numerics.Matrix3x2@,System.Numerics.Vector2@)">
            <summary>
            Sets the row1.
            </summary>
            <param name="m">The m.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x2Helper.SetRow1(System.Numerics.Matrix3x2@,System.Numerics.Vector2)">
            <summary>
            Sets the row1.
            </summary>
            <param name="m">The m.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x2Helper.Row2(System.Numerics.Matrix3x2)">
            <summary>
            Gets or sets the second row in the matrix; that is M21 and M22.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x2Helper.SetRow2(System.Numerics.Matrix3x2@,System.Numerics.Vector2@)">
            <summary>
            Sets the row2.
            </summary>
            <param name="m">The m.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x2Helper.SetRow2(System.Numerics.Matrix3x2@,System.Numerics.Vector2)">
            <summary>
            Sets the row2.
            </summary>
            <param name="m">The m.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x2Helper.Row3(System.Numerics.Matrix3x2)">
            <summary>
            Gets or sets the third row in the matrix; that is M31 and M32.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x2Helper.SetRow3(System.Numerics.Matrix3x2@,System.Numerics.Vector2@)">
            <summary>
            Sets the row3.
            </summary>
            <param name="m">The m.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x2Helper.SetRow3(System.Numerics.Matrix3x2@,System.Numerics.Vector2)">
            <summary>
            Sets the row3.
            </summary>
            <param name="m">The m.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x2Helper.Column1(System.Numerics.Matrix3x2)">
            <summary>
            Gets or sets the first column in the matrix; that is M11, M21, and M31.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x2Helper.SetColumn1(System.Numerics.Matrix3x2@,System.Numerics.Vector3@)">
            <summary>
            Sets the column1.
            </summary>
            <param name="m">The m.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x2Helper.SetColumn1(System.Numerics.Matrix3x2@,System.Numerics.Vector3)">
            <summary>
            Sets the column1.
            </summary>
            <param name="m">The m.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x2Helper.Column2(System.Numerics.Matrix3x2)">
            <summary>
            Gets or sets the second column in the matrix; that is M12, M22, and M32.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x2Helper.SetColumn2(System.Numerics.Matrix3x2@,System.Numerics.Vector3@)">
            <summary>
            Sets the column2.
            </summary>
            <param name="m">The m.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x2Helper.SetColumn2(System.Numerics.Matrix3x2@,System.Numerics.Vector3)">
            <summary>
            Sets the column2.
            </summary>
            <param name="m">The m.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x2Helper.SetTranslation(System.Numerics.Matrix3x2@,System.Numerics.Vector2@)">
            <summary>
            Sets the translation.
            </summary>
            <param name="m">The m.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x2Helper.SetTranslation(System.Numerics.Matrix3x2@,System.Numerics.Vector2)">
            <summary>
            Sets the translation.
            </summary>
            <param name="m">The m.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x2Helper.Translation(System.Numerics.Vector2)">
            <summary>
            Create a matrix from translation vector.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x2Helper.ScaleVector(System.Numerics.Matrix3x2)">
            <summary>
            Gets or sets the scale of the matrix; that is M11 and M22.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x2Helper.SetScaleVector(System.Numerics.Matrix3x2@,System.Numerics.Vector2)">
            <summary>
            Sets the scale vector.
            </summary>
            <param name="m">The m.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x2Helper.SetScaleVector(System.Numerics.Matrix3x2@,System.Numerics.Vector2@)">
            <summary>
            Sets the scale vector.
            </summary>
            <param name="m">The m.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x2Helper.Get(System.Numerics.Matrix3x2,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the matrix component, depending on the index.</value>
            <param name="m"></param>
            <param name="index">The zero-based index of the component to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 5].</exception>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x2Helper.Set(System.Numerics.Matrix3x2@,System.Int32,System.Single)">
            <summary>
            Sets the specified m.
            </summary>
            <param name="m">The m.</param>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index - Indices for Matrix3x2 run from 0 to 5, inclusive.</exception>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x2Helper.Get(System.Numerics.Matrix3x2,System.Int32,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the matrix component, depending on the index.</value>
            <param name="m"></param>
            <param name="row">The row of the matrix to access.</param>
            <param name="column">The column of the matrix to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="row"/> or <paramref name="column"/>is out of the range [0, 3].</exception>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x2Helper.Set(System.Numerics.Matrix3x2@,System.Int32,System.Int32,System.Single)">
            <summary>
            Sets the specified m.
            </summary>
            <param name="m">The m.</param>
            <param name="row">The row.</param>
            <param name="column">The column.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            row - Rows and columns for matrices run from 0 to 2, inclusive.
            or
            column - Rows and columns for matrices run from 0 to 1, inclusive.
            </exception>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x2Helper.ToArray(System.Numerics.Matrix3x2)">
            <summary>
            Creates an array containing the elements of the matrix.
            </summary>
            <returns>A sixteen-element array containing the components of the matrix.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x2Helper.SmoothStep(System.Numerics.Matrix3x2@,System.Numerics.Matrix3x2@,System.Single,System.Numerics.Matrix3x2@)">
            <summary>
            Performs a cubic interpolation between two matrices.
            </summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two matrices.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x2Helper.SmoothStep(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2,System.Single)">
            <summary>
            Performs a cubic interpolation between two matrices.
            </summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two matrices.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x2Helper.TransformPoint(System.Numerics.Matrix3x2,System.Numerics.Vector2)">
            <summary>
            Transforms a vector by this matrix.
            </summary>
            <param name="matrix">The matrix to use as a transformation matrix.</param>
            <param name="point">The original vector to apply the transformation.</param>
            <returns>The result of the transformation for the input vector.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x2Helper.TransformPoint(System.Numerics.Matrix3x2@,System.Numerics.Vector2@,System.Numerics.Vector2@)">
            <summary>
            Transforms a vector by this matrix.
            </summary>
            <param name="matrix">The matrix to use as a transformation matrix.</param>
            <param name="point">The original vector to apply the transformation.</param>
            <param name="result">The result of the transformation for the input vector.</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x2Helper.Skew(System.Single,System.Single)">
            <summary>
            Creates a skew matrix.
            </summary>
            <param name="angleX">Angle of skew along the X-axis in radians.</param>
            <param name="angleY">Angle of skew along the Y-axis in radians.</param>
            <returns>The created skew matrix.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x2Helper.Skew(System.Single,System.Single,System.Numerics.Matrix3x2@)">
            <summary>
            Creates a skew matrix.
            </summary>
            <param name="angleX">Angle of skew along the X-axis in radians.</param>
            <param name="angleY">Angle of skew along the Y-axis in radians.</param>
            <param name="result">When the method completes, contains the created skew matrix.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x2Helper.ToMatrix3x2(System.Numerics.Matrix4x4)">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Numerics.Matrix4x4"/> to <see cref="T:System.Numerics.Matrix3x2"/>.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:HelixToolkit.Maths.Matrix3x3">
            <summary>
            Represents a 3x3 Matrix ( contains only Scale and Rotation ).
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Matrix3x3.SizeInBytes">
            <summary>
            The size of the <see cref="T:HelixToolkit.Maths.Matrix3x3"/> type, in bytes.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Matrix3x3.Zero">
            <summary>
            A <see cref="T:HelixToolkit.Maths.Matrix3x3"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Matrix3x3.Identity">
            <summary>
            The identity <see cref="T:HelixToolkit.Maths.Matrix3x3"/>.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Matrix3x3.M11">
            <summary>
            Value at row 1 column 1 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Matrix3x3.M12">
            <summary>
            Value at row 1 column 2 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Matrix3x3.M13">
            <summary>
            Value at row 1 column 3 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Matrix3x3.M21">
            <summary>
            Value at row 2 column 1 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Matrix3x3.M22">
            <summary>
            Value at row 2 column 2 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Matrix3x3.M23">
            <summary>
            Value at row 2 column 3 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Matrix3x3.M31">
            <summary>
            Value at row 3 column 1 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Matrix3x3.M32">
            <summary>
            Value at row 3 column 2 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Matrix3x3.M33">
            <summary>
            Value at row 3 column 3 of the Matrix3x3.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Matrix3x3"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Matrix3x3"/> struct.
            </summary>
            <param name="M11">The value to assign at row 1 column 1 of the Matrix3x3.</param>
            <param name="M12">The value to assign at row 1 column 2 of the Matrix3x3.</param>
            <param name="M13">The value to assign at row 1 column 3 of the Matrix3x3.</param>
            <param name="M21">The value to assign at row 2 column 1 of the Matrix3x3.</param>
            <param name="M22">The value to assign at row 2 column 2 of the Matrix3x3.</param>
            <param name="M23">The value to assign at row 2 column 3 of the Matrix3x3.</param>
            <param name="M31">The value to assign at row 3 column 1 of the Matrix3x3.</param>
            <param name="M32">The value to assign at row 3 column 2 of the Matrix3x3.</param>
            <param name="M33">The value to assign at row 3 column 3 of the Matrix3x3.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Matrix3x3"/> struct.
            </summary>
            <param name="values">The values to assign to the components of the Matrix3x3. This must be an array with sixteen elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than sixteen elements.</exception>
        </member>
        <member name="P:HelixToolkit.Maths.Matrix3x3.Row1">
            <summary>
            Gets or sets the first row in the Matrix3x3; that is M11, M12, M13
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.Matrix3x3.Row2">
            <summary>
            Gets or sets the second row in the Matrix3x3; that is M21, M22, M23
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.Matrix3x3.Row3">
            <summary>
            Gets or sets the third row in the Matrix3x3; that is M31, M32, M33
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.Matrix3x3.Column1">
            <summary>
            Gets or sets the first column in the Matrix3x3; that is M11, M21, M31
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.Matrix3x3.Column2">
            <summary>
            Gets or sets the second column in the Matrix3x3; that is M12, M22, M32
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.Matrix3x3.Column3">
            <summary>
            Gets or sets the third column in the Matrix3x3; that is M13, M23, M33
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.Matrix3x3.ScaleVector">
            <summary>
            Gets or sets the scale of the Matrix3x3; that is M11, M22, and M33.
            </summary>
        </member>
        <member name="P:HelixToolkit.Maths.Matrix3x3.IsIdentity">
            <summary>
            Gets a value indicating whether this instance is an identity Matrix3x3.
            </summary>
            <value>
            <c>true</c> if this instance is an identity Matrix3x3; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:HelixToolkit.Maths.Matrix3x3.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the Matrix3x3 component, depending on the index.</value>
            <param name="index">The zero-based index of the component to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 15].</exception>
        </member>
        <member name="P:HelixToolkit.Maths.Matrix3x3.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the Matrix3x3 component, depending on the index.</value>
            <param name="row">The row of the Matrix3x3 to access.</param>
            <param name="column">The column of the Matrix3x3 to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="row"/> or <paramref name="column"/>is out of the range [0, 3].</exception>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Determinant">
            <summary>
            Calculates the determinant of the Matrix3x3.
            </summary>
            <returns>The determinant of the Matrix3x3.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Invert">
            <summary>
            Inverts the Matrix3x3.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Transpose">
            <summary>
            Transposes the Matrix3x3.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Orthogonalize">
            <summary>
            Orthogonalizes the specified Matrix3x3.
            </summary>
            <remarks>
            <para>Orthogonalization is the process of making all rows orthogonal to each other. This
            means that any given row in the Matrix3x3 will be orthogonal to any other given row in the
            Matrix3x3.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the Matrix3x3 rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Orthonormalize">
            <summary>
            Orthonormalizes the specified Matrix3x3.
            </summary>
            <remarks>
            <para>Orthonormalization is the process of making all rows and columns orthogonal to each
            other and making all rows and columns of unit length. This means that any given row will
            be orthogonal to any other given row and any given column will be orthogonal to any other
            given column. Any given row will not be orthogonal to any given column. Every row and every
            column will be of unit length.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the Matrix3x3 rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.DecomposeQR(HelixToolkit.Maths.Matrix3x3@,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Decomposes a Matrix3x3 into an orthonormalized Matrix3x3 Q and a right triangular Matrix3x3 R.
            </summary>
            <param name="Q">When the method completes, contains the orthonormalized Matrix3x3 of the decomposition.</param>
            <param name="R">When the method completes, contains the right triangular Matrix3x3 of the decomposition.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.DecomposeLQ(HelixToolkit.Maths.Matrix3x3@,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Decomposes a Matrix3x3 into a lower triangular Matrix3x3 L and an orthonormalized Matrix3x3 Q.
            </summary>
            <param name="L">When the method completes, contains the lower triangular Matrix3x3 of the decomposition.</param>
            <param name="Q">When the method completes, contains the orthonormalized Matrix3x3 of the decomposition.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Decompose(System.Numerics.Vector3@,System.Numerics.Quaternion@)">
            <summary>
            Decomposes a Matrix3x3 into a scale, rotation, and translation.
            </summary>
            <param name="scale">When the method completes, contains the scaling component of the decomposed Matrix3x3.</param>
            <param name="rotation">When the method completes, contains the rotation component of the decomposed Matrix3x3.</param>
            <remarks>
            This method is designed to decompose an SRT transformation Matrix3x3 only.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.DecomposeUniformScale(System.Single@,System.Numerics.Quaternion@)">
            <summary>
            Decomposes a uniform scale matrix into a scale, rotation, and translation.
            A uniform scale matrix has the same scale in every axis.
            </summary>
            <param name="scale">When the method completes, contains the scaling component of the decomposed matrix.</param>
            <param name="rotation">When the method completes, contains the rotation component of the decomposed matrix.</param>
            <remarks>
            This method is designed to decompose only an SRT transformation matrix that has the same scale in every axis.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.ExchangeRows(System.Int32,System.Int32)">
            <summary>
            Exchanges two rows in the Matrix3x3.
            </summary>
            <param name="firstRow">The first row to exchange. This is an index of the row starting at zero.</param>
            <param name="secondRow">The second row to exchange. This is an index of the row starting at zero.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.ExchangeColumns(System.Int32,System.Int32)">
            <summary>
            Exchanges two columns in the Matrix3x3.
            </summary>
            <param name="firstColumn">The first column to exchange. This is an index of the column starting at zero.</param>
            <param name="secondColumn">The second column to exchange. This is an index of the column starting at zero.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.ToArray">
            <summary>
            Creates an array containing the elements of the Matrix3x3.
            </summary>
            <returns>A 9-element array containing the components of the Matrix3x3.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Add(HelixToolkit.Maths.Matrix3x3@,HelixToolkit.Maths.Matrix3x3@,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to add.</param>
            <param name="right">The second Matrix3x3 to add.</param>
            <param name="result">When the method completes, contains the sum of the two matrices.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Add(HelixToolkit.Maths.Matrix3x3,HelixToolkit.Maths.Matrix3x3)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to add.</param>
            <param name="right">The second Matrix3x3 to add.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Subtract(HelixToolkit.Maths.Matrix3x3@,HelixToolkit.Maths.Matrix3x3@,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to subtract.</param>
            <param name="right">The second Matrix3x3 to subtract.</param>
            <param name="result">When the method completes, contains the difference between the two matrices.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Subtract(HelixToolkit.Maths.Matrix3x3,HelixToolkit.Maths.Matrix3x3)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to subtract.</param>
            <param name="right">The second Matrix3x3 to subtract.</param>
            <returns>The difference between the two matrices.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Multiply(HelixToolkit.Maths.Matrix3x3@,System.Single,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Scales a Matrix3x3 by the given value.
            </summary>
            <param name="left">The Matrix3x3 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled Matrix3x3.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Multiply(HelixToolkit.Maths.Matrix3x3,System.Single)">
            <summary>
            Scales a Matrix3x3 by the given value.
            </summary>
            <param name="left">The Matrix3x3 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled Matrix3x3.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Multiply(HelixToolkit.Maths.Matrix3x3@,HelixToolkit.Maths.Matrix3x3@,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Determines the product of two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to multiply.</param>
            <param name="right">The second Matrix3x3 to multiply.</param>
            <param name="result">The product of the two matrices.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Multiply(HelixToolkit.Maths.Matrix3x3,HelixToolkit.Maths.Matrix3x3)">
            <summary>
            Determines the product of two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to multiply.</param>
            <param name="right">The second Matrix3x3 to multiply.</param>
            <returns>The product of the two matrices.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Divide(HelixToolkit.Maths.Matrix3x3@,System.Single,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Scales a Matrix3x3 by the given value.
            </summary>
            <param name="left">The Matrix3x3 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled Matrix3x3.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Divide(HelixToolkit.Maths.Matrix3x3,System.Single)">
            <summary>
            Scales a Matrix3x3 by the given value.
            </summary>
            <param name="left">The Matrix3x3 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled Matrix3x3.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Divide(HelixToolkit.Maths.Matrix3x3@,HelixToolkit.Maths.Matrix3x3@,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Determines the quotient of two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to divide.</param>
            <param name="right">The second Matrix3x3 to divide.</param>
            <param name="result">When the method completes, contains the quotient of the two matrices.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Divide(HelixToolkit.Maths.Matrix3x3,HelixToolkit.Maths.Matrix3x3)">
            <summary>
            Determines the quotient of two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to divide.</param>
            <param name="right">The second Matrix3x3 to divide.</param>
            <returns>The quotient of the two matrices.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Exponent(HelixToolkit.Maths.Matrix3x3@,System.Int32,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Performs the exponential operation on a Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to perform the operation on.</param>
            <param name="exponent">The exponent to raise the Matrix3x3 to.</param>
            <param name="result">When the method completes, contains the exponential Matrix3x3.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="exponent"/> is negative.</exception>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Exponent(HelixToolkit.Maths.Matrix3x3,System.Int32)">
            <summary>
            Performs the exponential operation on a Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to perform the operation on.</param>
            <param name="exponent">The exponent to raise the Matrix3x3 to.</param>
            <returns>The exponential Matrix3x3.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="exponent"/> is negative.</exception>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Negate(HelixToolkit.Maths.Matrix3x3@,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Negates a Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to be negated.</param>
            <param name="result">When the method completes, contains the negated Matrix3x3.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Negate(HelixToolkit.Maths.Matrix3x3)">
            <summary>
            Negates a Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to be negated.</param>
            <returns>The negated Matrix3x3.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Lerp(HelixToolkit.Maths.Matrix3x3@,HelixToolkit.Maths.Matrix3x3@,System.Single,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Performs a linear interpolation between two matrices.
            </summary>
            <param name="start">Start Matrix3x3.</param>
            <param name="end">End Matrix3x3.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two matrices.</param>
            <remarks>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Lerp(HelixToolkit.Maths.Matrix3x3,HelixToolkit.Maths.Matrix3x3,System.Single)">
            <summary>
            Performs a linear interpolation between two matrices.
            </summary>
            <param name="start">Start Matrix3x3.</param>
            <param name="end">End Matrix3x3.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two matrices.</returns>
            <remarks>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.SmoothStep(HelixToolkit.Maths.Matrix3x3@,HelixToolkit.Maths.Matrix3x3@,System.Single,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Performs a cubic interpolation between two matrices.
            </summary>
            <param name="start">Start Matrix3x3.</param>
            <param name="end">End Matrix3x3.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two matrices.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.SmoothStep(HelixToolkit.Maths.Matrix3x3,HelixToolkit.Maths.Matrix3x3,System.Single)">
            <summary>
            Performs a cubic interpolation between two matrices.
            </summary>
            <param name="start">Start Matrix3x3.</param>
            <param name="end">End Matrix3x3.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two matrices.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Transpose(HelixToolkit.Maths.Matrix3x3@,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Calculates the transpose of the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 whose transpose is to be calculated.</param>
            <param name="result">When the method completes, contains the transpose of the specified Matrix3x3.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.TransposeByRef(HelixToolkit.Maths.Matrix3x3@,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Calculates the transpose of the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 whose transpose is to be calculated.</param>
            <param name="result">When the method completes, contains the transpose of the specified Matrix3x3.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Transpose(HelixToolkit.Maths.Matrix3x3)">
            <summary>
            Calculates the transpose of the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 whose transpose is to be calculated.</param>
            <returns>The transpose of the specified Matrix3x3.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Invert(HelixToolkit.Maths.Matrix3x3@,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Calculates the inverse of the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 whose inverse is to be calculated.</param>
            <param name="result">When the method completes, contains the inverse of the specified Matrix3x3.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Invert(HelixToolkit.Maths.Matrix3x3)">
            <summary>
            Calculates the inverse of the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 whose inverse is to be calculated.</param>
            <returns>The inverse of the specified Matrix3x3.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Orthogonalize(HelixToolkit.Maths.Matrix3x3@,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Orthogonalizes the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to orthogonalize.</param>
            <param name="result">When the method completes, contains the orthogonalized Matrix3x3.</param>
            <remarks>
            <para>Orthogonalization is the process of making all rows orthogonal to each other. This
            means that any given row in the Matrix3x3 will be orthogonal to any other given row in the
            Matrix3x3.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the Matrix3x3 rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Orthogonalize(HelixToolkit.Maths.Matrix3x3)">
            <summary>
            Orthogonalizes the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to orthogonalize.</param>
            <returns>The orthogonalized Matrix3x3.</returns>
            <remarks>
            <para>Orthogonalization is the process of making all rows orthogonal to each other. This
            means that any given row in the Matrix3x3 will be orthogonal to any other given row in the
            Matrix3x3.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the Matrix3x3 rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Orthonormalize(HelixToolkit.Maths.Matrix3x3@,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Orthonormalizes the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to orthonormalize.</param>
            <param name="result">When the method completes, contains the orthonormalized Matrix3x3.</param>
            <remarks>
            <para>Orthonormalization is the process of making all rows and columns orthogonal to each
            other and making all rows and columns of unit length. This means that any given row will
            be orthogonal to any other given row and any given column will be orthogonal to any other
            given column. Any given row will not be orthogonal to any given column. Every row and every
            column will be of unit length.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the Matrix3x3 rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Orthonormalize(HelixToolkit.Maths.Matrix3x3)">
            <summary>
            Orthonormalizes the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to orthonormalize.</param>
            <returns>The orthonormalized Matrix3x3.</returns>
            <remarks>
            <para>Orthonormalization is the process of making all rows and columns orthogonal to each
            other and making all rows and columns of unit length. This means that any given row will
            be orthogonal to any other given row and any given column will be orthogonal to any other
            given column. Any given row will not be orthogonal to any given column. Every row and every
            column will be of unit length.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the Matrix3x3 rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.UpperTriangularForm(HelixToolkit.Maths.Matrix3x3@,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Brings the Matrix3x3 into upper triangular form using elementary row operations.
            </summary>
            <param name="value">The Matrix3x3 to put into upper triangular form.</param>
            <param name="result">When the method completes, contains the upper triangular Matrix3x3.</param>
            <remarks>
            If the Matrix3x3 is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the Matrix3x3 represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.UpperTriangularForm(HelixToolkit.Maths.Matrix3x3)">
            <summary>
            Brings the Matrix3x3 into upper triangular form using elementary row operations.
            </summary>
            <param name="value">The Matrix3x3 to put into upper triangular form.</param>
            <returns>The upper triangular Matrix3x3.</returns>
            <remarks>
            If the Matrix3x3 is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the Matrix3x3 represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.LowerTriangularForm(HelixToolkit.Maths.Matrix3x3@,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Brings the Matrix3x3 into lower triangular form using elementary row operations.
            </summary>
            <param name="value">The Matrix3x3 to put into lower triangular form.</param>
            <param name="result">When the method completes, contains the lower triangular Matrix3x3.</param>
            <remarks>
            If the Matrix3x3 is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the Matrix3x3 represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.LowerTriangularForm(HelixToolkit.Maths.Matrix3x3)">
            <summary>
            Brings the Matrix3x3 into lower triangular form using elementary row operations.
            </summary>
            <param name="value">The Matrix3x3 to put into lower triangular form.</param>
            <returns>The lower triangular Matrix3x3.</returns>
            <remarks>
            If the Matrix3x3 is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the Matrix3x3 represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.RowEchelonForm(HelixToolkit.Maths.Matrix3x3@,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Brings the Matrix3x3 into row echelon form using elementary row operations;
            </summary>
            <param name="value">The Matrix3x3 to put into row echelon form.</param>
            <param name="result">When the method completes, contains the row echelon form of the Matrix3x3.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.RowEchelonForm(HelixToolkit.Maths.Matrix3x3)">
            <summary>
            Brings the Matrix3x3 into row echelon form using elementary row operations;
            </summary>
            <param name="value">The Matrix3x3 to put into row echelon form.</param>
            <returns>When the method completes, contains the row echelon form of the Matrix3x3.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.BillboardLH(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Creates a left-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <param name="result">When the method completes, contains the created billboard Matrix3x3.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.BillboardLH(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Creates a left-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <returns>The created billboard Matrix3x3.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.BillboardRH(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Creates a right-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <param name="result">When the method completes, contains the created billboard Matrix3x3.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.BillboardRH(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Creates a right-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <returns>The created billboard Matrix3x3.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.LookAtLH(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Creates a left-handed, look-at Matrix3x3.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at Matrix3x3.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.LookAtLH(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Creates a left-handed, look-at Matrix3x3.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at Matrix3x3.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.LookAtRH(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Creates a right-handed, look-at Matrix3x3.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at Matrix3x3.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.LookAtRH(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Creates a right-handed, look-at Matrix3x3.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at Matrix3x3.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Scaling(System.Numerics.Vector3@,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <param name="result">When the method completes, contains the created scaling Matrix3x3.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Scaling(System.Numerics.Vector3)">
            <summary>
            Creates a Matrix3x3 that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <returns>The created scaling Matrix3x3.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Scaling(System.Single,System.Single,System.Single,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <param name="result">When the method completes, contains the created scaling Matrix3x3.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Scaling(System.Single,System.Single,System.Single)">
            <summary>
            Creates a Matrix3x3 that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <returns>The created scaling Matrix3x3.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Scaling(System.Single,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that uniformly scales along all three axis.
            </summary>
            <param name="scale">The uniform scale that is applied along all axis.</param>
            <param name="result">When the method completes, contains the created scaling Matrix3x3.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Scaling(System.Single)">
            <summary>
            Creates a Matrix3x3 that uniformly scales along all three axis.
            </summary>
            <param name="scale">The uniform scale that is applied along all axis.</param>
            <returns>The created scaling Matrix3x3.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.RotationX(System.Single,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that rotates around the x-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation Matrix3x3.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.RotationX(System.Single)">
            <summary>
            Creates a Matrix3x3 that rotates around the x-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation Matrix3x3.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.RotationY(System.Single,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that rotates around the y-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation Matrix3x3.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.RotationY(System.Single)">
            <summary>
            Creates a Matrix3x3 that rotates around the y-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation Matrix3x3.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.RotationZ(System.Single,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that rotates around the z-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation Matrix3x3.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.RotationZ(System.Single)">
            <summary>
            Creates a Matrix3x3 that rotates around the z-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation Matrix3x3.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.RotationAxis(System.Numerics.Vector3@,System.Single,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that rotates around an arbitrary axis.
            </summary>
            <param name="axis">The axis around which to rotate. This parameter is assumed to be normalized.</param>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation Matrix3x3.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.RotationAxis(System.Numerics.Vector3,System.Single)">
            <summary>
            Creates a Matrix3x3 that rotates around an arbitrary axis.
            </summary>
            <param name="axis">The axis around which to rotate. This parameter is assumed to be normalized.</param>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation Matrix3x3.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.RotationQuaternion(System.Numerics.Quaternion@,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Creates a rotation Matrix3x3 from a quaternion.
            </summary>
            <param name="rotation">The quaternion to use to build the Matrix3x3.</param>
            <param name="result">The created rotation Matrix3x3.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.RotationQuaternion(System.Numerics.Quaternion)">
            <summary>
            Creates a rotation Matrix3x3 from a quaternion.
            </summary>
            <param name="rotation">The quaternion to use to build the Matrix3x3.</param>
            <returns>The created rotation Matrix3x3.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.RotationYawPitchRoll(System.Single,System.Single,System.Single,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Creates a rotation Matrix3x3 with a specified yaw, pitch, and roll.
            </summary>
            <param name="yaw">Yaw around the y-axis, in radians.</param>
            <param name="pitch">Pitch around the x-axis, in radians.</param>
            <param name="roll">Roll around the z-axis, in radians.</param>
            <param name="result">When the method completes, contains the created rotation Matrix3x3.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates a rotation Matrix3x3 with a specified yaw, pitch, and roll.
            </summary>
            <param name="yaw">Yaw around the y-axis, in radians.</param>
            <param name="pitch">Pitch around the x-axis, in radians.</param>
            <param name="roll">Roll around the z-axis, in radians.</param>
            <returns>The created rotation Matrix3x3.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.op_Addition(HelixToolkit.Maths.Matrix3x3,HelixToolkit.Maths.Matrix3x3)">
            <summary>
            Adds two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to add.</param>
            <param name="right">The second Matrix3x3 to add.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.op_UnaryPlus(HelixToolkit.Maths.Matrix3x3)">
            <summary>
            Assert a Matrix3x3 (return it unchanged).
            </summary>
            <param name="value">The Matrix3x3 to assert (unchanged).</param>
            <returns>The asserted (unchanged) Matrix3x3.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.op_Subtraction(HelixToolkit.Maths.Matrix3x3,HelixToolkit.Maths.Matrix3x3)">
            <summary>
            Subtracts two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to subtract.</param>
            <param name="right">The second Matrix3x3 to subtract.</param>
            <returns>The difference between the two matrices.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.op_UnaryNegation(HelixToolkit.Maths.Matrix3x3)">
            <summary>
            Negates a Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to negate.</param>
            <returns>The negated Matrix3x3.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.op_Multiply(System.Single,HelixToolkit.Maths.Matrix3x3)">
            <summary>
            Scales a Matrix3x3 by a given value.
            </summary>
            <param name="right">The Matrix3x3 to scale.</param>
            <param name="left">The amount by which to scale.</param>
            <returns>The scaled Matrix3x3.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.op_Multiply(HelixToolkit.Maths.Matrix3x3,System.Single)">
            <summary>
            Scales a Matrix3x3 by a given value.
            </summary>
            <param name="left">The Matrix3x3 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled Matrix3x3.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.op_Multiply(HelixToolkit.Maths.Matrix3x3,HelixToolkit.Maths.Matrix3x3)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to multiply.</param>
            <param name="right">The second Matrix3x3 to multiply.</param>
            <returns>The product of the two matrices.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.op_Division(HelixToolkit.Maths.Matrix3x3,System.Single)">
            <summary>
            Scales a Matrix3x3 by a given value.
            </summary>
            <param name="left">The Matrix3x3 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled Matrix3x3.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.op_Division(HelixToolkit.Maths.Matrix3x3,HelixToolkit.Maths.Matrix3x3)">
            <summary>
            Divides two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to divide.</param>
            <param name="right">The second Matrix3x3 to divide.</param>
            <returns>The quotient of the two matrices.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.op_Equality(HelixToolkit.Maths.Matrix3x3,HelixToolkit.Maths.Matrix3x3)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.op_Inequality(HelixToolkit.Maths.Matrix3x3,HelixToolkit.Maths.Matrix3x3)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.op_Explicit(HelixToolkit.Maths.Matrix3x3)~System.Numerics.Matrix4x4">
            <summary>
            Convert the 3x3 Matrix to a 4x4 Matrix.
            </summary>
            <returns>A 4x4 Matrix with zero translation and M44=1</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.op_Explicit(System.Numerics.Matrix4x4)~HelixToolkit.Maths.Matrix3x3">
            <summary>
            Convert the 4x4 Matrix to a 3x3 Matrix.
            </summary>
            <returns>A 3x3 Matrix</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Equals(HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Determines whether the specified <see cref="T:HelixToolkit.Maths.Matrix3x3"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:HelixToolkit.Maths.Matrix3x3"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:HelixToolkit.Maths.Matrix3x3"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Equals(HelixToolkit.Maths.Matrix3x3)">
            <summary>
            Determines whether the specified <see cref="T:HelixToolkit.Maths.Matrix3x3"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:HelixToolkit.Maths.Matrix3x3"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:HelixToolkit.Maths.Matrix3x3"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Equals(HelixToolkit.Maths.Matrix3x3@,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Determines whether the specified <see cref="T:HelixToolkit.Maths.Matrix3x3"/> are equal.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.Matrix3x3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:HelixToolkit.Maths.OrientedBoundingBox">
            <summary>
            OrientedBoundingBox (OBB) is a rectangular block, much like an AABB (BoundingBox) but with an arbitrary orientation.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.OrientedBoundingBox.Extents">
            <summary>
            Half lengths of the box along each axis.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.OrientedBoundingBox.Transformation">
            <summary>
            The matrix which aligns and scales the box, and its translation vector represents the center of the box.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.#ctor(HelixToolkit.Maths.BoundingBox)">
            <summary>
            Creates an <see cref="T:HelixToolkit.Maths.OrientedBoundingBox"/> from a BoundingBox.
            </summary>
            <param name="bb">The BoundingBox to create from.</param>
            <remarks>
            Initially, the OBB is axis-aligned box, but it can be rotated and transformed later.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.#ctor(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Creates an <see cref="T:HelixToolkit.Maths.OrientedBoundingBox"/> which contained between two minimum and maximum points.
            </summary>
            <param name="minimum">The minimum vertex of the bounding box.</param>
            <param name="maximum">The maximum vertex of the bounding box.</param>
            <remarks>
            Initially, the OrientedBoundingBox is axis-aligned box, but it can be rotated and transformed later.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.#ctor(System.Numerics.Vector3[])">
            <summary>
            Creates an <see cref="T:HelixToolkit.Maths.OrientedBoundingBox"/> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the box.</param>
            <remarks>
            This method is not for computing the best tight-fitting OrientedBoundingBox.
            And initially, the OrientedBoundingBox is axis-aligned box, but it can be rotated and transformed later.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.GetCorners">
            <summary>
            Retrieves the eight corners of the bounding box.
            </summary>
            <returns>An array of points representing the eight corners of the bounding box.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.Transform(System.Numerics.Matrix4x4@)">
            <summary>
            Transforms this box using a transformation matrix.
            </summary>
            <param name="mat">The transformation matrix.</param>
            <remarks>
            While any kind of transformation can be applied, it is recommended to apply scaling using scale method instead, which
            scales the Extents and keeps the Transformation matrix for rotation only, and that preserves collision detection accuracy.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.Transform(System.Numerics.Matrix4x4)">
            <summary>
            Transforms this box using a transformation matrix.
            </summary>
            <param name="mat">The transformation matrix.</param>
            <remarks>
            While any kind of transformation can be applied, it is recommended to apply scaling using scale method instead, which
            scales the Extents and keeps the Transformation matrix for rotation only, and that preserves collision detection accuracy.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.Scale(System.Numerics.Vector3@)">
            <summary>
            Scales the <see cref="T:HelixToolkit.Maths.OrientedBoundingBox"/> by scaling its Extents without affecting the Transformation matrix,
            By keeping Transformation matrix scaling-free, the collision detection methods will be more accurate.
            </summary>
            <param name="scaling"></param>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.Scale(System.Numerics.Vector3)">
            <summary>
            Scales the <see cref="T:HelixToolkit.Maths.OrientedBoundingBox"/> by scaling its Extents without affecting the Transformation matrix,
            By keeping Transformation matrix scaling-free, the collision detection methods will be more accurate.
            </summary>
            <param name="scaling"></param>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.Scale(System.Single)">
            <summary>
            Scales the <see cref="T:HelixToolkit.Maths.OrientedBoundingBox"/> by scaling its Extents without affecting the Transformation matrix,
            By keeping Transformation matrix scaling-free, the collision detection methods will be more accurate.
            </summary>
            <param name="scaling"></param>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.Translate(System.Numerics.Vector3@)">
            <summary>
            Translates the <see cref="T:HelixToolkit.Maths.OrientedBoundingBox"/> to a new position using a translation vector;
            </summary>
            <param name="translation">the translation vector.</param>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.Translate(System.Numerics.Vector3)">
            <summary>
            Translates the <see cref="T:HelixToolkit.Maths.OrientedBoundingBox"/> to a new position using a translation vector;
            </summary>
            <param name="translation">the translation vector.</param>
        </member>
        <member name="P:HelixToolkit.Maths.OrientedBoundingBox.Size">
            <summary>
            The size of the <see cref="T:HelixToolkit.Maths.OrientedBoundingBox"/> if no scaling is applied to the transformation matrix.
            </summary>
            <remarks>
            The property will return the actual size even if the scaling is applied using Scale method, 
            but if the scaling is applied to transformation matrix, use GetSize Function instead.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.GetSize">
            <summary>
            Returns the size of the <see cref="T:HelixToolkit.Maths.OrientedBoundingBox"/> taking into consideration the scaling applied to the transformation matrix.
            </summary>
            <returns>The size of the consideration</returns>
            <remarks>
            This method is computationally expensive, so if no scale is applied to the transformation matrix
            use <see cref="P:HelixToolkit.Maths.OrientedBoundingBox.Size"/> property instead.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.GetSizeSquared">
            <summary>
            Returns the square size of the <see cref="T:HelixToolkit.Maths.OrientedBoundingBox"/> taking into consideration the scaling applied to the transformation matrix.
            </summary>
            <returns>The size of the consideration</returns>
        </member>
        <member name="P:HelixToolkit.Maths.OrientedBoundingBox.Center">
            <summary>
            Returns the center of the <see cref="T:HelixToolkit.Maths.OrientedBoundingBox"/>.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.Contains(System.Numerics.Vector3@)">
            <summary>
            Determines whether a <see cref="T:HelixToolkit.Maths.OrientedBoundingBox"/> contains a point. 
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.Contains(System.Numerics.Vector3)">
            <summary>
            Determines whether a <see cref="T:HelixToolkit.Maths.OrientedBoundingBox"/> contains a point. 
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.Contains(System.Numerics.Vector3[])">
            <summary>
            Determines whether a <see cref="T:HelixToolkit.Maths.OrientedBoundingBox"/> contains an array of points>.
            </summary>
            <param name="points">The points array to test.</param>
            <returns>The type of containment.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.Contains(HelixToolkit.Maths.BoundingSphere,System.Boolean)">
            <summary>
            Determines whether a <see cref="T:HelixToolkit.Maths.OrientedBoundingBox"/> contains a <see cref="T:HelixToolkit.Maths.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="IgnoreScale">Optimize the check operation by assuming that <see cref="T:HelixToolkit.Maths.OrientedBoundingBox"/> has no scaling applied</param>
            <returns>The type of containment the two objects have.</returns>
            <remarks>
            This method is not designed for <see cref="T:HelixToolkit.Maths.OrientedBoundingBox"/> which has a non-uniform scaling applied to its transformation matrix.
            But any type of scaling applied using Scale method will keep this method accurate.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.Contains(HelixToolkit.Maths.OrientedBoundingBox@)">
            <summary>
            Check the intersection between two <see cref="T:HelixToolkit.Maths.OrientedBoundingBox"/>
            </summary>
            <param name="obb">The OrientedBoundingBoxs to test.</param>
            <returns>The type of containment the two objects have.</returns>
            <remarks>
            For accuracy, The transformation matrix for both <see cref="T:HelixToolkit.Maths.OrientedBoundingBox"/> must not have any scaling applied to it.
            Anyway, scaling using Scale method will keep this method accurate.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.ContainsLine(System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Check the intersection between an <see cref="T:HelixToolkit.Maths.OrientedBoundingBox"/> and a line defined by two points
            </summary>
            <param name="L1">The first point in the line.</param>
            <param name="L2">The second point in the line.</param>
            <returns>The type of containment the two objects have.</returns>
            <remarks>
            For accuracy, The transformation matrix for the <see cref="T:HelixToolkit.Maths.OrientedBoundingBox"/> must not have any scaling applied to it.
            Anyway, scaling using Scale method will keep this method accurate.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.Contains(HelixToolkit.Maths.BoundingBox@)">
            <summary>
            Check the intersection between an <see cref="T:HelixToolkit.Maths.OrientedBoundingBox"/> and <see cref="T:HelixToolkit.Maths.BoundingBox"/>
            </summary>
            <param name="box">The BoundingBox to test.</param>
            <returns>The type of containment the two objects have.</returns>
            <remarks>
            For accuracy, The transformation matrix for the <see cref="T:HelixToolkit.Maths.OrientedBoundingBox"/> must not have any scaling applied to it.
            Anyway, scaling using Scale method will keep this method accurate.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.Intersects(HelixToolkit.Maths.Ray@,System.Numerics.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:HelixToolkit.Maths.Ray"/> and a <see cref="T:HelixToolkit.Maths.OrientedBoundingBox"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="P:System.Numerics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.Intersects(HelixToolkit.Maths.Ray@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:HelixToolkit.Maths.Ray"/> and a <see cref="T:HelixToolkit.Maths.OrientedBoundingBox"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.GetBoundingBox">
            <summary>
            Get the axis-aligned <see cref="T:HelixToolkit.Maths.BoundingBox"/> which contains all <see cref="T:HelixToolkit.Maths.OrientedBoundingBox"/> corners.
            </summary>
            <returns>The axis-aligned BoundingBox of this OrientedBoundingBox.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.GetBoxToBoxMatrix(HelixToolkit.Maths.OrientedBoundingBox@,HelixToolkit.Maths.OrientedBoundingBox@,System.Boolean)">
            <summary>
            Calculates the matrix required to transfer any point from one <see cref="T:HelixToolkit.Maths.OrientedBoundingBox"/> local coordinates to another.
            </summary>
            <param name="A">The source OrientedBoundingBox.</param>
            <param name="B">The target OrientedBoundingBox.</param>
            <param name="NoMatrixScaleApplied">
            If true, the method will use a fast algorithm which is inapplicable if a scale is applied to the transformation matrix of the OrientedBoundingBox.
            </param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.Merge(HelixToolkit.Maths.OrientedBoundingBox@,HelixToolkit.Maths.OrientedBoundingBox@,System.Boolean)">
            <summary>
            Merge an OrientedBoundingBox B into another OrientedBoundingBox A, by expanding A to contain B and keeping A orientation.
            </summary>
            <param name="A">The <see cref="T:HelixToolkit.Maths.OrientedBoundingBox"/> to merge into it.</param>
            <param name="B">The <see cref="T:HelixToolkit.Maths.OrientedBoundingBox"/> to be merged</param>
            <param name="NoMatrixScaleApplied">
            If true, the method will use a fast algorithm which is inapplicable if a scale is applied to the transformation matrix of the OrientedBoundingBox.
            </param>
            <remarks>
            Unlike merging axis aligned boxes, The operation is not interchangeable, because it keeps A orientation and merge B into it.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.MergeInto(HelixToolkit.Maths.OrientedBoundingBox@,System.Boolean)">
            <summary>
            Merge this OrientedBoundingBox into another OrientedBoundingBox, keeping the other OrientedBoundingBox orientation.
            </summary>
            <param name="OBB">The other <see cref="T:HelixToolkit.Maths.OrientedBoundingBox"/> to merge into.</param>
            <param name="NoMatrixScaleApplied">
            If true, the method will use a fast algorithm which is inapplicable if a scale is applied to the transformation matrix of the OrientedBoundingBox.
            </param>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.Add(HelixToolkit.Maths.OrientedBoundingBox@,System.Boolean)">
            <summary>
            Merge another OrientedBoundingBox into this OrientedBoundingBox.
            </summary>
            <param name="OBB">The other <see cref="T:HelixToolkit.Maths.OrientedBoundingBox"/> to merge into this OrientedBoundingBox.</param>
            <param name="NoMatrixScaleApplied">
            If true, the method will use a fast algorithm which is inapplicable if a scale is applied to the transformation matrix of the OrientedBoundingBox.
            </param>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.Equals(HelixToolkit.Maths.OrientedBoundingBox@)">
            <summary>
            Determines whether the specified <see cref="T:System.Numerics.Vector4"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Numerics.Vector4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Numerics.Vector4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.Equals(HelixToolkit.Maths.OrientedBoundingBox)">
            <summary>
            Determines whether the specified <see cref="T:System.Numerics.Vector4"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Numerics.Vector4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Numerics.Vector4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.op_Equality(HelixToolkit.Maths.OrientedBoundingBox,HelixToolkit.Maths.OrientedBoundingBox)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.op_Inequality(HelixToolkit.Maths.OrientedBoundingBox,HelixToolkit.Maths.OrientedBoundingBox)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.OrientedBoundingBox.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:HelixToolkit.Maths.PlaneHelper">
            <summary>
            Represents a plane in three dimensional space.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Create(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Create a plane from a specific origin and normal.
            </summary>
            <param name="point">The point.</param>
            <param name="normal">The normal.</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Normalize(System.Numerics.Plane)">
            <summary>
            Changes the coefficients of the normal vector of the plane to make it of unit length.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Get(System.Numerics.Plane,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the A, B, C, or D component, depending on the index.</value>
            <param name="p"></param>
            <param name="index">The index of the component to access. Use 0 for the A component, 1 for the B component, 2 for the C component, and 3 for the D component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.GetPlanOrigin(System.Numerics.Plane@)">
            <summary>
            Get the origin of the plane.
            </summary>
            <param name="plane"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.GetPlanOrigin(System.Numerics.Plane)">
            <summary>
            Get the origin of the plane.
            </summary>
            <param name="plane"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.ToArray(System.Numerics.Plane)">
            <summary>
            Creates an array containing the elements of the plane.
            </summary>
            <returns>A four-element array containing the components of the plane.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Intersects(System.Numerics.Plane@,System.Numerics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a point.
            </summary>
            <param name="p"></param>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Intersects(System.Numerics.Plane,System.Numerics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a point.
            </summary>
            <param name="p">The p.</param>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Intersects(System.Numerics.Plane,HelixToolkit.Maths.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:HelixToolkit.Maths.Ray"/>.
            </summary>
            <param name="p"></param>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Intersects(System.Numerics.Plane@,HelixToolkit.Maths.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:HelixToolkit.Maths.Ray"/>.
            </summary>
            <param name="p">The p.</param>
            <param name="ray">The ray.</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Intersects(System.Numerics.Plane,HelixToolkit.Maths.Ray@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:HelixToolkit.Maths.Ray"/>.
            </summary>
            <param name="p"></param>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Intersects(System.Numerics.Plane@,HelixToolkit.Maths.Ray@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:HelixToolkit.Maths.Ray"/>.
            </summary>
            <param name="p">The p.</param>
            <param name="ray">The ray.</param>
            <param name="distance">The distance.</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Intersects(System.Numerics.Plane,HelixToolkit.Maths.Ray@,System.Numerics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:HelixToolkit.Maths.Ray"/>.
            </summary>
            <param name="p"></param>
            <param name="ray">The ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="P:System.Numerics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Intersects(System.Numerics.Plane@,HelixToolkit.Maths.Ray@,System.Numerics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:HelixToolkit.Maths.Ray"/>.
            </summary>
            <param name="p">The p.</param>
            <param name="ray">The ray.</param>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Intersects(System.Numerics.Plane,System.Numerics.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:System.Numerics.Plane"/>.
            </summary>
            <param name="p"></param>
            <param name="plane">The plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Intersects(System.Numerics.Plane@,System.Numerics.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:System.Numerics.Plane"/>.
            </summary>
            <param name="p">The p.</param>
            <param name="plane">The plane.</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Intersects(System.Numerics.Plane,System.Numerics.Plane@,HelixToolkit.Maths.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:System.Numerics.Plane"/>.
            </summary>
            <param name="p"></param>
            <param name="plane">The plane to test.</param>
            <param name="line">When the method completes, contains the line of intersection
            as a <see cref="T:HelixToolkit.Maths.Ray"/>, or a zero ray if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Intersects(System.Numerics.Plane@,System.Numerics.Plane@,HelixToolkit.Maths.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:System.Numerics.Plane"/>.
            </summary>
            <param name="p">The p.</param>
            <param name="plane">The plane.</param>
            <param name="line">The line.</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Intersects(System.Numerics.Plane,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="p"></param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Intersects(System.Numerics.Plane@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="p">The p.</param>
            <param name="vertex1">The vertex1.</param>
            <param name="vertex2">The vertex2.</param>
            <param name="vertex3">The vertex3.</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Intersects(System.Numerics.Plane,HelixToolkit.Maths.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:HelixToolkit.Maths.BoundingBox"/>.
            </summary>
            <param name="p"></param>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Intersects(System.Numerics.Plane@,HelixToolkit.Maths.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:HelixToolkit.Maths.BoundingBox"/>.
            </summary>
            <param name="p">The p.</param>
            <param name="box">The box.</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Intersects(System.Numerics.Plane,HelixToolkit.Maths.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:HelixToolkit.Maths.BoundingSphere"/>.
            </summary>
            <param name="p"></param>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Intersects(System.Numerics.Plane@,HelixToolkit.Maths.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:HelixToolkit.Maths.BoundingSphere"/>.
            </summary>
            <param name="p">The p.</param>
            <param name="sphere">The sphere.</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.IntersectsLine(System.Numerics.Plane@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Check if a line intersects with plane
            </summary>
            <param name="p"></param>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="intersection"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.IntersectsLine(System.Numerics.Plane,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Check if a line intersects with plane
            </summary>
            <param name="p"></param>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="intersection"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Reflection(System.Numerics.Plane@,System.Numerics.Matrix4x4@)">
            <summary>
            Builds a matrix that can be used to reflect vectors about a plane.
            </summary>
            <param name="p">The p.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Reflection(System.Numerics.Plane)">
            <summary>
            Builds a matrix that can be used to reflect vectors about a plane.
            </summary>
            <param name="p"></param>
            <returns>The reflection matrix.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Shadow(System.Numerics.Plane@,System.Numerics.Vector4@,System.Numerics.Matrix4x4@)">
            <summary>
            Creates a matrix that flattens geometry into a shadow from the plane onto which to project the geometry as a shadow. 
            This plane  is assumed to be normalized
            </summary>
            <param name="p"></param>
            <param name="light">The light direction. If the W component is 0, the light is directional light; if the
            W component is 1, the light is a point light.</param>
            <param name="result">When the method completes, contains the shadow matrix.</param>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Shadow(System.Numerics.Plane,System.Numerics.Vector4)">
            <summary>
            Creates a matrix that flattens geometry into a shadow from this the plane onto which to project the geometry as a shadow. 
            This plane  is assumed to be normalized
            </summary>
            <param name="p"></param>
            <param name="light">The light direction. If the W component is 0, the light is directional light; if the
            W component is 1, the light is a point light.</param>
            <returns>The shadow matrix.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Reflection(System.Numerics.Plane@,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Builds a Matrix3x3 that can be used to reflect vectors about a plane for which the reflection occurs. 
            This plane is assumed to be normalized
            </summary>
            <param name="p"></param>
            <param name="result">When the method completes, contains the reflection Matrix3x3.</param>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Reflection3x3(System.Numerics.Plane)">
            <summary>
            Builds a Matrix3x3 that can be used to reflect vectors about a plane for which the reflection occurs. 
            This plane is assumed to be normalized
            </summary>
            <returns>The reflection Matrix3x3.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Shadow(System.Numerics.Vector4@,System.Numerics.Plane@,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that flattens geometry into a shadow.
            </summary>
            <param name="light">The light direction. If the W component is 0, the light is directional light; if the
            W component is 1, the light is a point light.</param>
            <param name="plane">The plane onto which to project the geometry as a shadow. This parameter is assumed to be normalized.</param>
            <param name="result">When the method completes, contains the shadow Matrix3x3.</param>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Shadow(System.Numerics.Vector4,System.Numerics.Plane)">
            <summary>
            Creates a Matrix3x3 that flattens geometry into a shadow.
            </summary>
            <param name="light">The light direction. If the W component is 0, the light is directional light; if the
            W component is 1, the light is a point light.</param>
            <param name="plane">The plane onto which to project the geometry as a shadow. This parameter is assumed to be normalized.</param>
            <returns>The shadow Matrix3x3.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Multiply(System.Numerics.Plane@,System.Single,System.Numerics.Plane@)">
            <summary>
            Scales the plane by the given scaling factor.
            </summary>
            <param name="value">The plane to scale.</param>
            <param name="scale">The amount by which to scale the plane.</param>
            <param name="result">When the method completes, contains the scaled plane.</param>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Multiply(System.Numerics.Plane,System.Single)">
            <summary>
            Scales the plane by the given scaling factor.
            </summary>
            <param name="value">The plane to scale.</param>
            <param name="scale">The amount by which to scale the plane.</param>
            <returns>The scaled plane.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.DotCoordinate(System.Numerics.Plane@,System.Numerics.Vector3@,System.Single@)">
            <summary>
            Calculates the dot product of a specified vector and the normal of the plane plus the distance value of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <param name="result">When the method completes, contains the dot product of a specified vector and the normal of the Plane plus the distance value of the plane.</param>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.DotCoordinate(System.Numerics.Plane,System.Numerics.Vector3)">
            <summary>
            Calculates the dot product of a specified vector and the normal of the plane plus the distance value of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <returns>The dot product of a specified vector and the normal of the Plane plus the distance value of the plane.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.DotNormal(System.Numerics.Plane@,System.Numerics.Vector3@,System.Single@)">
            <summary>
            Calculates the dot product of the specified vector and the normal of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <param name="result">When the method completes, contains the dot product of the specified vector and the normal of the plane.</param>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.DotNormal(System.Numerics.Plane,System.Numerics.Vector3)">
            <summary>
            Calculates the dot product of the specified vector and the normal of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <returns>The dot product of the specified vector and the normal of the plane.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Transform(System.Numerics.Plane@,System.Numerics.Quaternion@,System.Numerics.Plane@)">
            <summary>
            Transforms a normalized plane by a quaternion rotation.
            </summary>
            <param name="plane">The normalized source plane.</param>
            <param name="rotation">The quaternion rotation.</param>
            <param name="result">When the method completes, contains the transformed plane.</param>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Transform(System.Numerics.Plane[],System.Numerics.Quaternion@)">
            <summary>
            Transforms an array of normalized planes by a quaternion rotation.
            </summary>
            <param name="planes">The array of normalized planes to transform.</param>
            <param name="rotation">The quaternion rotation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="planes"/> is <c>null</c>.</exception>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Transform(System.Numerics.Plane@,System.Numerics.Matrix4x4@,System.Numerics.Plane@)">
            <summary>
            Transforms a normalized plane by a matrix.
            </summary>
            <param name="plane">The normalized source plane.</param>
            <param name="transformation">The transformation matrix.</param>
            <param name="result">When the method completes, contains the transformed plane.</param>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Transform(System.Numerics.Plane[],System.Numerics.Matrix4x4@)">
            <summary>
            Transforms an array of normalized planes by a matrix.
            </summary>
            <param name="planes">The array of normalized planes to transform.</param>
            <param name="transformation">The transformation matrix.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="planes"/> is <c>null</c>.</exception>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.DistanceTo(System.Numerics.Plane@,System.Numerics.Vector3@)">
            <summary>
            Calculates the distance from a point to a plane.
            </summary>
            <param name="plane">The <see cref="T:System.Numerics.Plane"/></param>
            <param name="point">The point used to calculate distance</param>
            <returns>
            The distance from given point to the given plane<br/>
            Equal zero: Point on the plane<br/>
            Greater than zero: The point is on the same side of the plane's normal vector<br/>
            Less than zero: The point is on the opposite side of the plane's normal vector<br/>
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.DistanceTo(System.Numerics.Plane,System.Numerics.Vector3@)">
            <inheritdoc cref="M:HelixToolkit.Maths.PlaneHelper.DistanceTo(System.Numerics.Plane@,System.Numerics.Vector3@)"/>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Project(System.Numerics.Plane@,System.Numerics.Vector3@)">
            <summary>
            Calculates the projection of a point onto a plane (nearest point).
            </summary>
            <param name="plane">The <see cref="T:System.Numerics.Plane"/></param>
            <param name="point">The point used to calculate projection</param>
            <returns>The projection of a given point on a given plane.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Project(System.Numerics.Plane,System.Numerics.Vector3@)">
            <inheritdoc cref="M:HelixToolkit.Maths.PlaneHelper.Project(System.Numerics.Plane@,System.Numerics.Vector3@)"/>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Flip(System.Numerics.Plane@)">
            <summary>
            Create a new plane facing the opposite direction
            </summary>
            <param name="plane">The <see cref="T:System.Numerics.Plane"/></param>
            <returns>
            A new plane facing the opposite direction
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.PlaneHelper.Flip(System.Numerics.Plane)">
            <inheritdoc cref="M:HelixToolkit.Maths.PlaneHelper.Flip(System.Numerics.Plane@)"/>
        </member>
        <member name="T:HelixToolkit.Maths.QuaternionHelper">
            <summary>
            Represents a four dimensional mathematical quaternion.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.QuaternionHelper.SizeInBytes">
            <summary>
            The size of the <see cref="T:System.Numerics.Quaternion"/> type, in bytes.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.QuaternionHelper.Zero">
            <summary>
            A <see cref="T:System.Numerics.Quaternion"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.QuaternionHelper.One">
            <summary>
            A <see cref="T:System.Numerics.Quaternion"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.QuaternionHelper.Identity">
            <summary>
            The identity <see cref="T:System.Numerics.Quaternion"/> (0, 0, 0, 1).
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.IsNormalized(System.Numerics.Quaternion)">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.Angle(System.Numerics.Quaternion)">
            <summary>
            Gets the angle of the quaternion.
            </summary>
            <value>The quaternion's angle.</value>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.AngleBetween(System.Numerics.Quaternion@,System.Numerics.Quaternion@)">
            <summary>
            Returns the absolute angle in radians between two <see cref="T:System.Numerics.Quaternion"/>/>
            </summary>
            <param name="source">The first <see cref="T:System.Numerics.Quaternion"/></param>
            <param name="other">The second <see cref="T:System.Numerics.Quaternion"/></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.Axis(System.Numerics.Quaternion)">
            <summary>
            Gets the axis components of the quaternion.
            </summary>
            <value>The axis components of the quaternion.</value>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.Get(System.Numerics.Quaternion,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, Z, or W component, depending on the index.</value>
            <param name="q"></param>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z component, and 3 for the W component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.Set(System.Numerics.Quaternion@,System.Int32,System.Single)">
            <summary>
            Sets the specified q.
            </summary>
            <param name="q">The q.</param>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index - Indices for Quaternion run from 0 to 3, inclusive.</exception>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.ToArray(System.Numerics.Quaternion)">
            <summary>
            Creates an array containing the elements of the quaternion.
            </summary>
            <returns>A four-element array containing the components of the quaternion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.Barycentric(System.Numerics.Quaternion@,System.Numerics.Quaternion@,System.Numerics.Quaternion@,System.Single,System.Single,System.Numerics.Quaternion@)">
            <summary>
            Returns a <see cref="T:System.Numerics.Quaternion"/> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:System.Numerics.Quaternion"/> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:System.Numerics.Quaternion"/> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:System.Numerics.Quaternion"/> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <param name="result">When the method completes, contains a new <see cref="T:System.Numerics.Quaternion"/> containing the 4D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.Barycentric(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:System.Numerics.Quaternion"/> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:System.Numerics.Quaternion"/> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:System.Numerics.Quaternion"/> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:System.Numerics.Quaternion"/> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <returns>A new <see cref="T:System.Numerics.Quaternion"/> containing the 4D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.Exponential(System.Numerics.Quaternion@,System.Numerics.Quaternion@)">
            <summary>
            Exponentiates a quaternion.
            </summary>
            <param name="value">The quaternion to exponentiate.</param>
            <param name="result">When the method completes, contains the exponentiated quaternion.</param>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.Exponential(System.Numerics.Quaternion)">
            <summary>
            Exponentiates a quaternion.
            </summary>
            <param name="value">The quaternion to exponentiate.</param>
            <returns>The exponentiated quaternion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.Logarithm(System.Numerics.Quaternion@,System.Numerics.Quaternion@)">
            <summary>
            Calculates the natural logarithm of the specified quaternion.
            </summary>
            <param name="value">The quaternion whose logarithm will be calculated.</param>
            <param name="result">When the method completes, contains the natural logarithm of the quaternion.</param>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.Logarithm(System.Numerics.Quaternion)">
            <summary>
            Calculates the natural logarithm of the specified quaternion.
            </summary>
            <param name="value">The quaternion whose logarithm will be calculated.</param>
            <returns>The natural logarithm of the quaternion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.Rotate(System.Numerics.Quaternion,System.Numerics.Vector3@)">
            <summary>
            Rotates a Vector3 by the specified quaternion rotation.
            </summary>
            <param name="value">The quaternion.</param>
            <param name="vector">The vector to rotate.</param>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.Rotate(System.Numerics.Quaternion,System.Numerics.Vector3)">
            <summary>
            Rotates a Vector3 by the specified quaternion rotation.
            </summary>
            <param name="value">The quaternion.</param>
            <param name="vector">The vector to rotate.</param>
            <returns>A newly Vector3 rotated by the specified quaternion rotation.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.RotationAxis(System.Numerics.Vector3@,System.Single,System.Numerics.Quaternion@)">
            <summary>
            Creates a quaternion given a rotation and an axis.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle of rotation.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.RotationAxis(System.Numerics.Vector3,System.Single)">
            <summary>
            Creates a quaternion given a rotation and an axis.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle of rotation.</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.BetweenDirections(System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Computes a quaternion corresponding to the rotation transforming the vector <paramref name="source"/> to the vector <paramref name="target"/>.
            </summary>
            <param name="source">The source vector of the transformation.</param>
            <param name="target">The target vector of the transformation.</param>
            <returns>The resulting quaternion corresponding to the transformation of the source vector to the target vector.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.RotationMatrix(System.Numerics.Matrix4x4@,System.Numerics.Quaternion@)">
            <summary>
            Creates a quaternion given a rotation matrix.
            </summary>
            <param name="matrix">The rotation matrix.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.RotationMatrix(HelixToolkit.Maths.Matrix3x3@,System.Numerics.Quaternion@)">
            <summary>
            Creates a quaternion given a rotation matrix.
            </summary>
            <param name="matrix">The rotation matrix.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.LookAtLH(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Quaternion@)">
            <summary>
            Creates a left-handed, look-at quaternion.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at quaternion.</param>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.LookAtLH(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Creates a left-handed, look-at quaternion.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at quaternion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.RotationLookAtLH(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Quaternion@)">
            <summary>
            Creates a left-handed, look-at quaternion.
            </summary>
            <param name="forward">The camera's forward direction.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at quaternion.</param>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.RotationLookAtLH(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Creates a left-handed, look-at quaternion.
            </summary>
            <param name="forward">The camera's forward direction.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at quaternion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.LookAtRH(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Quaternion@)">
            <summary>
            Creates a right-handed, look-at quaternion.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at quaternion.</param>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.LookAtRH(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Creates a right-handed, look-at quaternion.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at quaternion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.RotationLookAtRH(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Quaternion@)">
            <summary>
            Creates a right-handed, look-at quaternion.
            </summary>
            <param name="forward">The camera's forward direction.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at quaternion.</param>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.RotationLookAtRH(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Creates a right-handed, look-at quaternion.
            </summary>
            <param name="forward">The camera's forward direction.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at quaternion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.BillboardLH(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Quaternion@)">
            <summary>
            Creates a left-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <param name="result">When the method completes, contains the created billboard quaternion.</param>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.BillboardLH(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Creates a left-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <returns>The created billboard quaternion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.BillboardRH(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Quaternion@)">
            <summary>
            Creates a right-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <param name="result">When the method completes, contains the created billboard quaternion.</param>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.BillboardRH(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Creates a right-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <returns>The created billboard quaternion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.RotationMatrix(System.Numerics.Matrix4x4)">
            <summary>
            Creates a quaternion given a rotation matrix.
            </summary>
            <param name="matrix">The rotation matrix.</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.RotationYawPitchRoll(System.Single,System.Single,System.Single,System.Numerics.Quaternion@)">
            <summary>
            Creates a quaternion given a yaw, pitch, and roll value.
            </summary>
            <param name="yaw">The yaw of rotation.</param>
            <param name="pitch">The pitch of rotation.</param>
            <param name="roll">The roll of rotation.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates a quaternion given a yaw, pitch, and roll value.
            </summary>
            <param name="yaw">The yaw of rotation.</param>
            <param name="pitch">The pitch of rotation.</param>
            <param name="roll">The roll of rotation.</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.Squad(System.Numerics.Quaternion@,System.Numerics.Quaternion@,System.Numerics.Quaternion@,System.Numerics.Quaternion@,System.Single,System.Numerics.Quaternion@)">
            <summary>
            Interpolates between quaternions, using spherical quadrangle interpolation.
            </summary>
            <param name="value1">First source quaternion.</param>
            <param name="value2">Second source quaternion.</param>
            <param name="value3">Third source quaternion.</param>
            <param name="value4">Fourth source quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of interpolation.</param>
            <param name="result">When the method completes, contains the spherical quadrangle interpolation of the quaternions.</param>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.Squad(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)">
            <summary>
            Interpolates between quaternions, using spherical quadrangle interpolation.
            </summary>
            <param name="value1">First source quaternion.</param>
            <param name="value2">Second source quaternion.</param>
            <param name="value3">Third source quaternion.</param>
            <param name="value4">Fourth source quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of interpolation.</param>
            <returns>The spherical quadrangle interpolation of the quaternions.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.QuaternionHelper.SquadSetup(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Numerics.Quaternion,System.Numerics.Quaternion)">
            <summary>
            Sets up control points for spherical quadrangle interpolation.
            </summary>
            <param name="value1">First source quaternion.</param>
            <param name="value2">Second source quaternion.</param>
            <param name="value3">Third source quaternion.</param>
            <param name="value4">Fourth source quaternion.</param>
            <returns>An array of three quaternions that represent control points for spherical quadrangle interpolation.</returns>
        </member>
        <member name="T:HelixToolkit.Maths.RandomUtils">
            <summary>
            Random functions on commun types.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.RandomUtils.NextFloat(System.Random,System.Single,System.Single)">
            <summary>
            Gets random <c>float</c> number within range.
            </summary>
            <param name="random">Current <see cref="T:System.Random"/>.</param>
            <param name="min">Minimum.</param>
            <param name="max">Maximum.</param>
            <returns>Random <c>float</c> number.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.RandomUtils.NextDouble(System.Random,System.Double,System.Double)">
            <summary>
            Gets random <c>double</c> number within range.
            </summary>
            <param name="random">Current <see cref="T:System.Random"/>.</param>
            <param name="min">Minimum.</param>
            <param name="max">Maximum.</param>
            <returns>Random <c>double</c> number.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.RandomUtils.NextLong(System.Random)">
            <summary>
            Gets random <c>long</c> number.
            </summary>
            <param name="random">Current <see cref="T:System.Random"/>.</param>
            <returns>Random <c>long</c> number.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.RandomUtils.NextLong(System.Random,System.Int64,System.Int64)">
            <summary>
            Gets random <c>long</c> number within range.
            </summary>
            <param name="random">Current <see cref="T:System.Random"/>.</param>
            <param name="min">Minimum.</param>
            <param name="max">Maximum.</param>
            <returns>Random <c>long</c> number.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.RandomUtils.NextVector2(System.Random,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Gets random <see cref="T:System.Numerics.Vector2"/> within range.
            </summary>
            <param name="random">Current <see cref="T:System.Random"/>.</param>
            <param name="min">Minimum.</param>
            <param name="max">Maximum.</param>
            <returns>Random <see cref="T:System.Numerics.Vector2"/>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.RandomUtils.NextVector3(System.Random,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Gets random <see cref="T:System.Numerics.Vector3"/> within range.
            </summary>
            <param name="random">Current <see cref="T:System.Random"/>.</param>
            <param name="min">Minimum.</param>
            <param name="max">Maximum.</param>
            <returns>Random <see cref="T:System.Numerics.Vector3"/>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.RandomUtils.NextVector4(System.Random,System.Numerics.Vector4,System.Numerics.Vector4)">
            <summary>
            Gets random <see cref="T:System.Numerics.Vector4"/> within range.
            </summary>
            <param name="random">Current <see cref="T:System.Random"/>.</param>
            <param name="min">Minimum.</param>
            <param name="max">Maximum.</param>
            <returns>Random <see cref="T:System.Numerics.Vector4"/>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.RandomUtils.NextColor(System.Random)">
            <summary>
            Gets random opaque <see cref="T:HelixToolkit.Maths.Color"/>.
            </summary>
            <param name="random">Current <see cref="T:System.Random"/>.</param>
            <returns>Random <see cref="T:HelixToolkit.Maths.Color"/>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.RandomUtils.NextColor(System.Random,System.Single,System.Single)">
            <summary>
            Gets random opaque <see cref="T:HelixToolkit.Maths.Color"/>.
            </summary>
            <param name="random">Current <see cref="T:System.Random"/>.</param>
            <param name="minBrightness">Minimum brightness.</param>
            <param name="maxBrightness">Maximum brightness</param>
            <returns>Random <see cref="T:HelixToolkit.Maths.Color"/>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.RandomUtils.NextColor(System.Random,System.Single,System.Single,System.Single)">
            <summary>
            Gets random <see cref="T:HelixToolkit.Maths.Color"/>.
            </summary>
            <param name="random">Current <see cref="T:System.Random"/>.</param>   
            <param name="minBrightness">Minimum brightness.</param>
            <param name="maxBrightness">Maximum brightness</param>
            <param name="alpha">Alpha value.</param>
            <returns>Random <see cref="T:HelixToolkit.Maths.Color"/>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.RandomUtils.NextColor(System.Random,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Gets random <see cref="T:HelixToolkit.Maths.Color"/>.
            </summary>
            <param name="random">Current <see cref="T:System.Random"/>.</param>
            <param name="minBrightness">Minimum brightness.</param>
            <param name="maxBrightness">Maximum brightness</param>
            <param name="minAlpha">Minimum alpha.</param>
            <param name="maxAlpha">Maximum alpha.</param>
            <returns>Random <see cref="T:HelixToolkit.Maths.Color"/>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.RandomUtils.NextTime(System.Random,System.TimeSpan,System.TimeSpan)">
            <summary>
            Gets random <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="random">Current <see cref="T:System.Random"/>.</param>
            <param name="min">Minimum.</param>
            <param name="max">Maximum.</param>
            <returns>Random <see cref="T:System.TimeSpan"/>.</returns>
        </member>
        <member name="T:HelixToolkit.Maths.Ray">
            <summary>
            Represents a three dimensional line based on a point in space and a direction.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Ray.Position">
            <summary>
            The position in three dimensional space where the ray starts.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Ray.Direction">
            <summary>
            The normalized direction in which the ray points.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.Ray.#ctor(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Ray"/> struct.
            </summary>
            <param name="position">The position in three dimensional space of the origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Ray.Intersects(System.Numerics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Ray.Intersects(HelixToolkit.Maths.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:HelixToolkit.Maths.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Ray.Intersects(HelixToolkit.Maths.Ray@,System.Numerics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:HelixToolkit.Maths.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="P:System.Numerics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Ray.Intersects(System.Numerics.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:System.Numerics.Plane"/>.
            </summary>
            <param name="plane">The plane to test</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Ray.Intersects(System.Numerics.Plane@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:System.Numerics.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Ray.Intersects(System.Numerics.Plane@,System.Numerics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:System.Numerics.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="P:System.Numerics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Ray.Intersects(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Ray.Intersects(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Ray.Intersects(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="P:System.Numerics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Ray.Intersects(HelixToolkit.Maths.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:HelixToolkit.Maths.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Ray.Intersects(HelixToolkit.Maths.BoundingBox)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:HelixToolkit.Maths.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Ray.Intersects(HelixToolkit.Maths.BoundingBox@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:HelixToolkit.Maths.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Ray.Intersects(HelixToolkit.Maths.BoundingBox@,System.Numerics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:HelixToolkit.Maths.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="P:System.Numerics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Ray.Intersects(HelixToolkit.Maths.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:HelixToolkit.Maths.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Ray.Intersects(HelixToolkit.Maths.BoundingSphere)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:HelixToolkit.Maths.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Ray.Intersects(HelixToolkit.Maths.BoundingSphere@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:HelixToolkit.Maths.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Ray.Intersects(HelixToolkit.Maths.BoundingSphere@,System.Numerics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:HelixToolkit.Maths.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="P:System.Numerics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Ray.PlaneIntersection(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3@)">
            <summary>
            Planes the intersection.
            </summary>
            <param name="planePosition">The plane position.</param>
            <param name="planeNormal">The plane normal.</param>
            <param name="intersect">The point intersection</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.Ray.PlaneIntersection(System.Numerics.Plane,System.Numerics.Vector3@)">
            <summary>
            Planes the intersection.
            </summary>
            <param name="plane">The plane</param>
            <param name="intersect">The point intersection</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.Ray.GetNearest(System.Numerics.Vector3)">
            <summary>
            Gets the point on the ray that is nearest the specified point.
            </summary>
            <param name="point">
            The point.
            </param>
            <returns>
            The nearest point on the ray.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Ray.Create(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Create a new instance of the <see cref="T:HelixToolkit.Maths.Ray"/> struct.
            </summary>
            <param name="position">The position in three dimensional space of the origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Ray.Reverse(HelixToolkit.Maths.Ray)">
            <summary>
            Reverse a ray in the opposite direction
            </summary>
            <param name="ray">The ray</param>
            <returns>A new ray in the reversed direction</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Ray.GetPickRay(System.Int32,System.Int32,HelixToolkit.Maths.ViewportF,System.Numerics.Matrix4x4)">
            <summary>
            Calculates a world space <see cref="T:HelixToolkit.Maths.Ray"/> from 2d screen coordinates.
            </summary>
            <param name="x">X coordinate on 2d screen.</param>
            <param name="y">Y coordinate on 2d screen.</param>
            <param name="viewport"><see cref="T:HelixToolkit.Maths.ViewportF"/>.</param>
            <param name="worldViewProjection">Transformation <see cref="T:System.Numerics.Matrix4x4"/>.</param>
            <returns>Resulting <see cref="T:HelixToolkit.Maths.Ray"/>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Ray.Transform(System.Numerics.Matrix4x4@)">
            <summary>
            Transform the ray using the specified transformation matrix.
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.Ray.op_Equality(HelixToolkit.Maths.Ray,HelixToolkit.Maths.Ray)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Ray.op_Inequality(HelixToolkit.Maths.Ray,HelixToolkit.Maths.Ray)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Ray.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Ray.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Ray.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Ray.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Ray.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Ray.Equals(HelixToolkit.Maths.Ray@)">
            <summary>
            Determines whether the specified <see cref="T:System.Numerics.Vector4"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Numerics.Vector4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Numerics.Vector4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Ray.Equals(HelixToolkit.Maths.Ray)">
            <summary>
            Determines whether the specified <see cref="T:System.Numerics.Vector4"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Numerics.Vector4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Numerics.Vector4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Ray.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:HelixToolkit.Maths.Rectangle">
            <summary>
            Define a Rectangle. This structure is slightly different from System.Drawing.Rectangle as it is
            internally storing Left,Top,Right,Bottom instead of Left,Top,Width,Height.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Rectangle.Left">
            <summary>
            The left.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Rectangle.Top">
            <summary>
            The top.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Rectangle.Right">
            <summary>
            The right.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Rectangle.Bottom">
            <summary>
            The bottom.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Rectangle.Empty">
            <summary>
            An empty rectangle.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Rectangle"/> struct.
            </summary>
            <param name="x">The left.</param>
            <param name="y">The top.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="P:HelixToolkit.Maths.Rectangle.X">
            <summary>
            Gets or sets the X position.
            </summary>
            <value>The X position.</value>
        </member>
        <member name="P:HelixToolkit.Maths.Rectangle.Y">
            <summary>
            Gets or sets the Y position.
            </summary>
            <value>The Y position.</value>
        </member>
        <member name="P:HelixToolkit.Maths.Rectangle.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:HelixToolkit.Maths.Rectangle.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:HelixToolkit.Maths.Rectangle.IsEmpty">
            <summary>
            Gets a value that indicates whether the rectangle is empty.
            </summary>
            <value>
              <c>true</c> if [is empty]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:HelixToolkit.Maths.Rectangle.Offset(System.Int32,System.Int32)">
            <summary>Changes the position of the rectangle.</summary>
            <param name="offsetX">Change in the x-position.</param>
            <param name="offsetY">Change in the y-position.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Rectangle.Inflate(System.Int32,System.Int32)">
            <summary>Pushes the edges of the rectangle out by the horizontal and vertical values specified.</summary>
            <param name="horizontalAmount">Value to push the sides out by.</param>
            <param name="verticalAmount">Value to push the top and bottom out by.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Rectangle.Contains(System.Int32,System.Int32)">
            <summary>Determines whether this rectangle contains a specified point represented by its x- and y-coordinates.</summary>
            <param name="x">The x-coordinate of the specified point.</param>
            <param name="y">The y-coordinate of the specified point.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Rectangle.Contains(HelixToolkit.Maths.Rectangle)">
            <summary>Determines whether this rectangle entirely contains a specified rectangle.</summary>
            <param name="value">The rectangle to evaluate.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Rectangle.Contains(HelixToolkit.Maths.Rectangle@,System.Boolean@)">
            <summary>Determines whether this rectangle entirely contains a specified rectangle.</summary>
            <param name="value">The rectangle to evaluate.</param>
            <param name="result">[OutAttribute] On exit, is true if this rectangle entirely contains the specified rectangle, or false if not.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Rectangle.Contains(System.Single,System.Single)">
            <summary>
            Checks, if specified point is inside <see cref="T:HelixToolkit.Maths.Rectangle"/>.
            </summary>
            <param name="x">X point coordinate.</param>
            <param name="y">Y point coordinate.</param>
            <returns><c>true</c> if point is inside <see cref="T:HelixToolkit.Maths.Rectangle"/>, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Rectangle.Intersects(HelixToolkit.Maths.Rectangle)">
            <summary>Determines whether a specified rectangle intersects with this rectangle.</summary>
            <param name="value">The rectangle to evaluate.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Rectangle.Intersects(HelixToolkit.Maths.Rectangle@,System.Boolean@)">
            <summary>
            Determines whether a specified rectangle intersects with this rectangle.
            </summary>
            <param name="value">The rectangle to evaluate</param>
            <param name="result">[OutAttribute] true if the specified rectangle intersects with this one; false otherwise.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Rectangle.Intersect(HelixToolkit.Maths.Rectangle,HelixToolkit.Maths.Rectangle)">
            <summary>
            Creates a rectangle defining the area where one rectangle overlaps with another rectangle.
            </summary>
            <param name="value1">The first rectangle to compare.</param>
            <param name="value2">The second rectangle to compare.</param>
            <returns>The intersection rectangle.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Rectangle.Intersect(HelixToolkit.Maths.Rectangle@,HelixToolkit.Maths.Rectangle@,HelixToolkit.Maths.Rectangle@)">
            <summary>Creates a rectangle defining the area where one rectangle overlaps with another rectangle.</summary>
            <param name="value1">The first rectangle to compare.</param>
            <param name="value2">The second rectangle to compare.</param>
            <param name="result">[OutAttribute] The area where the two first parameters overlap.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Rectangle.Union(HelixToolkit.Maths.Rectangle,HelixToolkit.Maths.Rectangle)">
            <summary>
            Creates a new rectangle that exactly contains two other rectangles.
            </summary>
            <param name="value1">The first rectangle to contain.</param>
            <param name="value2">The second rectangle to contain.</param>
            <returns>The union rectangle.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Rectangle.Union(HelixToolkit.Maths.Rectangle@,HelixToolkit.Maths.Rectangle@,HelixToolkit.Maths.Rectangle@)">
            <summary>
            Creates a new rectangle that exactly contains two other rectangles.
            </summary>
            <param name="value1">The first rectangle to contain.</param>
            <param name="value2">The second rectangle to contain.</param>
            <param name="result">[OutAttribute] The rectangle that must be the union of the first two rectangles.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Rectangle.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Rectangle.Equals(HelixToolkit.Maths.Rectangle@)">
            <summary>
            Determines whether the specified <see cref="T:HelixToolkit.Maths.Rectangle"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:HelixToolkit.Maths.Rectangle"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:HelixToolkit.Maths.Rectangle"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Rectangle.Equals(HelixToolkit.Maths.Rectangle)">
            <summary>
            Determines whether the specified <see cref="T:HelixToolkit.Maths.Rectangle"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:HelixToolkit.Maths.Rectangle"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:HelixToolkit.Maths.Rectangle"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Rectangle.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Rectangle.op_Equality(HelixToolkit.Maths.Rectangle,HelixToolkit.Maths.Rectangle)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Rectangle.op_Inequality(HelixToolkit.Maths.Rectangle,HelixToolkit.Maths.Rectangle)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:HelixToolkit.Maths.RectangleF">
            <summary>
            Define a RectangleF. This structure is slightly different from System.Drawing.RectangleF as it is
            internally storing Left,Top,Right,Bottom instead of Left,Top,Width,Height.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.RectangleF.Left">
            <summary>
            The left.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.RectangleF.Top">
            <summary>
            The top.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.RectangleF.Right">
            <summary>
            The right.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.RectangleF.Bottom">
            <summary>
            The bottom.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.RectangleF.Empty">
            <summary>
            An empty rectangle.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.RectangleF.Infinite">
            <summary>
            An infinite rectangle. See remarks.
            </summary>
            <remarks>
            http://msdn.microsoft.com/en-us/library/windows/desktop/dd372261%28v=vs.85%29.aspx
            Any properties that involve computations, like <see cref="P:HelixToolkit.Maths.RectangleF.Center"/>, <see cref="P:HelixToolkit.Maths.RectangleF.Width"/> or <see cref="P:HelixToolkit.Maths.RectangleF.Height"/>
            may return incorrect results - <see cref="F:System.Single.NaN"/>.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.RectangleF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.RectangleF"/> struct.
            </summary>
            <param name="x">The left.</param>
            <param name="y">The top.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="P:HelixToolkit.Maths.RectangleF.X">
            <summary>
            Gets or sets the X position.
            </summary>
            <value>The X position.</value>
        </member>
        <member name="P:HelixToolkit.Maths.RectangleF.Y">
            <summary>
            Gets or sets the Y position.
            </summary>
            <value>The Y position.</value>
        </member>
        <member name="P:HelixToolkit.Maths.RectangleF.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:HelixToolkit.Maths.RectangleF.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:HelixToolkit.Maths.RectangleF.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="P:HelixToolkit.Maths.RectangleF.Center">
            <summary>
            Gets the Point that specifies the center of the rectangle.
            </summary>
            <value>
            The center.
            </value>
        </member>
        <member name="P:HelixToolkit.Maths.RectangleF.IsEmpty">
            <summary>
            Gets a value that indicates whether the rectangle is empty.
            </summary>
            <value>
              <c>true</c> if [is empty]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:HelixToolkit.Maths.RectangleF.TopLeft">
            <summary>
            Gets the position of the top-left corner of the rectangle.
            </summary>
            <value>The top-left corner of the rectangle.</value>
        </member>
        <member name="P:HelixToolkit.Maths.RectangleF.TopRight">
            <summary>
            Gets the position of the top-right corner of the rectangle.
            </summary>
            <value>The top-right corner of the rectangle.</value>
        </member>
        <member name="P:HelixToolkit.Maths.RectangleF.BottomLeft">
            <summary>
            Gets the position of the bottom-left corner of the rectangle.
            </summary>
            <value>The bottom-left corner of the rectangle.</value>
        </member>
        <member name="P:HelixToolkit.Maths.RectangleF.BottomRight">
            <summary>
            Gets the position of the bottom-right corner of the rectangle.
            </summary>
            <value>The bottom-right corner of the rectangle.</value>
        </member>
        <member name="M:HelixToolkit.Maths.RectangleF.Offset(System.Numerics.Vector2)">
            <summary>Changes the position of the rectangle.</summary>
            <param name="amount">The values to adjust the position of the rectangle by.</param>
        </member>
        <member name="M:HelixToolkit.Maths.RectangleF.Offset(System.Single,System.Single)">
            <summary>Changes the position of the rectangle.</summary>
            <param name="offsetX">Change in the x-position.</param>
            <param name="offsetY">Change in the y-position.</param>
        </member>
        <member name="M:HelixToolkit.Maths.RectangleF.Inflate(System.Single,System.Single)">
            <summary>Pushes the edges of the rectangle out by the horizontal and vertical values specified.</summary>
            <param name="horizontalAmount">Value to push the sides out by.</param>
            <param name="verticalAmount">Value to push the top and bottom out by.</param>
        </member>
        <member name="M:HelixToolkit.Maths.RectangleF.Contains(System.Numerics.Vector2@,System.Boolean@)">
            <summary>Determines whether this rectangle contains a specified Point.</summary>
            <param name="value">The Point to evaluate.</param>
            <param name="result">[OutAttribute] true if the specified Point is contained within this rectangle; false otherwise.</param>
        </member>
        <member name="M:HelixToolkit.Maths.RectangleF.Contains(HelixToolkit.Maths.Rectangle)">
            <summary>Determines whether this rectangle entirely contains a specified rectangle.</summary>
            <param name="value">The rectangle to evaluate.</param>
        </member>
        <member name="M:HelixToolkit.Maths.RectangleF.Contains(HelixToolkit.Maths.RectangleF@,System.Boolean@)">
            <summary>Determines whether this rectangle entirely contains a specified rectangle.</summary>
            <param name="value">The rectangle to evaluate.</param>
            <param name="result">[OutAttribute] On exit, is true if this rectangle entirely contains the specified rectangle, or false if not.</param>
        </member>
        <member name="M:HelixToolkit.Maths.RectangleF.Contains(System.Single,System.Single)">
            <summary>
            Checks, if specified point is inside <see cref="T:HelixToolkit.Maths.RectangleF"/>.
            </summary>
            <param name="x">X point coordinate.</param>
            <param name="y">Y point coordinate.</param>
            <returns><c>true</c> if point is inside <see cref="T:HelixToolkit.Maths.RectangleF"/>, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.RectangleF.Contains(System.Numerics.Vector2)">
            <summary>
            Checks, if specified <see cref="T:System.Numerics.Vector2"/> is inside <see cref="T:HelixToolkit.Maths.RectangleF"/>.
            </summary>
            <param name="vector2D">Coordinate <see cref="T:System.Numerics.Vector2"/>.</param>
            <returns><c>true</c> if <see cref="T:System.Numerics.Vector2"/> is inside <see cref="T:HelixToolkit.Maths.RectangleF"/>, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.RectangleF.Intersects(HelixToolkit.Maths.RectangleF)">
            <summary>Determines whether a specified rectangle intersects with this rectangle.</summary>
            <param name="value">The rectangle to evaluate.</param>
        </member>
        <member name="M:HelixToolkit.Maths.RectangleF.Intersects(HelixToolkit.Maths.RectangleF@,System.Boolean@)">
            <summary>
            Determines whether a specified rectangle intersects with this rectangle.
            </summary>
            <param name="value">The rectangle to evaluate</param>
            <param name="result">[OutAttribute] true if the specified rectangle intersects with this one; false otherwise.</param>
        </member>
        <member name="M:HelixToolkit.Maths.RectangleF.Intersect(HelixToolkit.Maths.RectangleF,HelixToolkit.Maths.RectangleF)">
            <summary>
            Creates a rectangle defining the area where one rectangle overlaps with another rectangle.
            </summary>
            <param name="value1">The first Rectangle to compare.</param>
            <param name="value2">The second Rectangle to compare.</param>
            <returns>The intersection rectangle.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.RectangleF.Intersect(HelixToolkit.Maths.RectangleF@,HelixToolkit.Maths.RectangleF@,HelixToolkit.Maths.RectangleF@)">
            <summary>Creates a rectangle defining the area where one rectangle overlaps with another rectangle.</summary>
            <param name="value1">The first rectangle to compare.</param>
            <param name="value2">The second rectangle to compare.</param>
            <param name="result">[OutAttribute] The area where the two first parameters overlap.</param>
        </member>
        <member name="M:HelixToolkit.Maths.RectangleF.Union(HelixToolkit.Maths.RectangleF,HelixToolkit.Maths.RectangleF)">
            <summary>
            Creates a new rectangle that exactly contains two other rectangles.
            </summary>
            <param name="value1">The first rectangle to contain.</param>
            <param name="value2">The second rectangle to contain.</param>
            <returns>The union rectangle.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.RectangleF.Union(HelixToolkit.Maths.RectangleF@,HelixToolkit.Maths.RectangleF@,HelixToolkit.Maths.RectangleF@)">
            <summary>
            Creates a new rectangle that exactly contains two other rectangles.
            </summary>
            <param name="value1">The first rectangle to contain.</param>
            <param name="value2">The second rectangle to contain.</param>
            <param name="result">[OutAttribute] The rectangle that must be the union of the first two rectangles.</param>
        </member>
        <member name="M:HelixToolkit.Maths.RectangleF.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.RectangleF.Equals(HelixToolkit.Maths.RectangleF@)">
            <summary>
            Determines whether the specified <see cref="T:HelixToolkit.Maths.RectangleF"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:HelixToolkit.Maths.RectangleF"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:HelixToolkit.Maths.RectangleF"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.RectangleF.Equals(HelixToolkit.Maths.RectangleF)">
            <summary>
            Determines whether the specified <see cref="T:HelixToolkit.Maths.RectangleF"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:HelixToolkit.Maths.RectangleF"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:HelixToolkit.Maths.RectangleF"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.RectangleF.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.RectangleF.op_Equality(HelixToolkit.Maths.RectangleF,HelixToolkit.Maths.RectangleF)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.RectangleF.op_Inequality(HelixToolkit.Maths.RectangleF,HelixToolkit.Maths.RectangleF)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.RectangleF.op_Explicit(HelixToolkit.Maths.RectangleF)~HelixToolkit.Maths.Rectangle">
            <summary>
            Performs an explicit conversion to <see cref="T:HelixToolkit.Maths.Rectangle"/> structure.
            </summary>
            <remarks>Performs direct float to int conversion, any fractional data is truncated.</remarks>
            <param name="value">The source <see cref="T:HelixToolkit.Maths.RectangleF"/> value.</param>
            <returns>A converted <see cref="T:HelixToolkit.Maths.Rectangle"/> structure.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.RectangleHelper.ToVector2(HelixToolkit.Maths.Rectangle)">
            <summary>
            To the rectangle.
            </summary>
            <param name="rect">The rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.RectangleHelper.ToVector2(HelixToolkit.Maths.RectangleF)">
            <summary>
            To the rectangleF.
            </summary>
            <param name="rect">The rectangleF.</param>
            <returns></returns>
        </member>
        <member name="T:HelixToolkit.Maths.Vector2Helper">
            <summary>
            Represents a two dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Vector2Helper.SizeInBytes">
            <summary>
            The size of the <see cref="T:System.Numerics.Vector2"/> type, in bytes.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Vector2Helper.Zero">
            <summary>
            A <see cref="T:System.Numerics.Vector2"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Vector2Helper.UnitX">
            <summary>
            The X unit <see cref="T:System.Numerics.Vector2"/> (1, 0).
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Vector2Helper.UnitY">
            <summary>
            The Y unit <see cref="T:System.Numerics.Vector2"/> (0, 1).
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Vector2Helper.One">
            <summary>
            A <see cref="T:System.Numerics.Vector2"/> with all of its components set to one.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.Vector2Helper.IsNormalized(System.Numerics.Vector2)">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.Vector2Helper.IsZero(System.Numerics.Vector2)">
            <summary>
            Gets a value indicting whether this vector is zero
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.Vector2Helper.Get(System.Numerics.Vector2,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X or Y component, depending on the index.</value>
            <param name="v"></param>
            <param name="index">The index of the component to access. Use 0 for the X component and 1 for the Y component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 1].</exception>
        </member>
        <member name="M:HelixToolkit.Maths.Vector2Helper.ToArray(System.Numerics.Vector2)">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A two-element array containing the components of the vector.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Vector2Helper.Barycentric(System.Numerics.Vector2@,System.Numerics.Vector2@,System.Numerics.Vector2@,System.Single,System.Single,System.Numerics.Vector2@)">
            <summary>
            Returns a <see cref="T:System.Numerics.Vector2"/> containing the 2D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:System.Numerics.Vector2"/> containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:System.Numerics.Vector2"/> containing the 2D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:System.Numerics.Vector2"/> containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <param name="result">When the method completes, contains the 2D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Vector2Helper.Barycentric(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:System.Numerics.Vector2"/> containing the 2D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:System.Numerics.Vector2"/> containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:System.Numerics.Vector2"/> containing the 2D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:System.Numerics.Vector2"/> containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <returns>A new <see cref="T:System.Numerics.Vector2"/> containing the 2D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Vector2Helper.NearEqual(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Tests whether one 2D vector is near another 2D vector.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <param name="epsilon">The epsilon.</param>
            <returns><c>true</c> if left and right are near another 2D, <c>false</c> otherwise</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Vector2Helper.NearEqual(System.Numerics.Vector2@,System.Numerics.Vector2@,System.Numerics.Vector2@)">
            <summary>
            Tests whether one 2D vector is near another 2D vector.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <param name="epsilon">The epsilon.</param>
            <returns><c>true</c> if left and right are near another 2D, <c>false</c> otherwise</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Vector2Helper.Saturate(System.Numerics.Vector2@)">
            <summary>
            Saturates this instance in the range [0,1]
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.Vector2Helper.SmoothStep(System.Numerics.Vector2@,System.Numerics.Vector2@,System.Single,System.Numerics.Vector2@)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Vector2Helper.SmoothStep(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Vector2Helper.Hermite(System.Numerics.Vector2@,System.Numerics.Vector2@,System.Numerics.Vector2@,System.Numerics.Vector2@,System.Single,System.Numerics.Vector2@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Vector2Helper.Hermite(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Vector2Helper.CatmullRom(System.Numerics.Vector2@,System.Numerics.Vector2@,System.Numerics.Vector2@,System.Numerics.Vector2@,System.Single,System.Numerics.Vector2@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Vector2Helper.CatmullRom(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Vector2Helper.Orthogonalize(System.Numerics.Vector2[],System.Numerics.Vector2[])">
            <summary>
            Orthogonalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthogonalized vectors.</param>
            <param name="source">The list of vectors to orthogonalize.</param>
            <remarks>
            <para>Orthogonalization is the process of making all vectors orthogonal to each other. This
            means that any given vector in the list will be orthogonal to any other given vector in the
            list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:HelixToolkit.Maths.Vector2Helper.Orthonormalize(System.Numerics.Vector2[],System.Numerics.Vector2[])">
            <summary>
            Orthonormalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthonormalized vectors.</param>
            <param name="source">The list of vectors to orthonormalize.</param>
            <remarks>
            <para>Orthonormalization is the process of making all vectors orthogonal to each
            other and making all vectors of unit length. This means that any given vector will
            be orthogonal to any other given vector in the list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:HelixToolkit.Maths.Vector2Helper.Transform(System.Numerics.Vector2[],System.Numerics.Quaternion@,System.Numerics.Vector2[])">
            <summary>
            Transforms an array of vectors by the given <see cref="T:System.Numerics.Quaternion"/> rotation.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="rotation">The <see cref="T:System.Numerics.Quaternion"/> rotation to apply.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:HelixToolkit.Maths.Vector2Helper.Transform(System.Numerics.Vector2[],System.Numerics.Matrix4x4@,System.Numerics.Vector4[])">
            <summary>
            Transforms an array of 2D vectors by the given <see cref="T:System.Numerics.Matrix4x4"/>.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:System.Numerics.Matrix4x4"/>.</param>
            <param name="destination">The array for which the transformed vectors are stored.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:HelixToolkit.Maths.Vector2Helper.TransformCoordinate(System.Numerics.Vector2@,System.Numerics.Matrix4x4@,System.Numerics.Vector2@)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:System.Numerics.Matrix4x4"/>.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:System.Numerics.Matrix4x4"/>.</param>
            <param name="result">When the method completes, contains the transformed coordinates.</param>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the w component to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often preferred when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Vector2Helper.TransformCoordinate(System.Numerics.Vector2,System.Numerics.Matrix4x4)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:System.Numerics.Matrix4x4"/>.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:System.Numerics.Matrix4x4"/>.</param>
            <returns>The transformed coordinates.</returns>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the w component to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often preferred when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Vector2Helper.TransformCoordinate(System.Numerics.Vector2[],System.Numerics.Matrix4x4@,System.Numerics.Vector2[])">
            <summary>
            Performs a coordinate transformation on an array of vectors using the given <see cref="T:System.Numerics.Matrix4x4"/>.
            </summary>
            <param name="source">The array of coordinate vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:System.Numerics.Matrix4x4"/>.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the w component to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often preferred when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Vector2Helper.TransformNormal(System.Numerics.Vector2@,System.Numerics.Matrix4x4@,System.Numerics.Vector2@)">
            <summary>
            Performs a normal transformation using the given <see cref="T:System.Numerics.Matrix4x4"/>.
            </summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transform">The transformation <see cref="T:System.Numerics.Matrix4x4"/>.</param>
            <param name="result">When the method completes, contains the transformed normal.</param>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth column of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often preferred for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Vector2Helper.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix4x4)">
            <summary>
            Performs a normal transformation using the given <see cref="T:System.Numerics.Matrix4x4"/>.
            </summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transform">The transformation <see cref="T:System.Numerics.Matrix4x4"/>.</param>
            <returns>The transformed normal.</returns>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth column of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often preferred for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Vector2Helper.TransformNormal(System.Numerics.Vector2[],System.Numerics.Matrix4x4@,System.Numerics.Vector2[])">
            <summary>
            Performs a normal transformation on an array of vectors using the given <see cref="T:System.Numerics.Matrix4x4"/>.
            </summary>
            <param name="source">The array of normal vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:System.Numerics.Matrix4x4"/>.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth column of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often preferred for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="T:HelixToolkit.Maths.Vector3Helper">
            <summary>
            Represents a three dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Vector3Helper.SizeInBytes">
            <summary>
            The size of the <see cref="T:System.Numerics.Vector3"/> type, in bytes.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Vector3Helper.Zero">
            <summary>
            A <see cref="T:System.Numerics.Vector3"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Vector3Helper.UnitX">
            <summary>
            The X unit <see cref="T:System.Numerics.Vector3"/> (1, 0, 0).
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Vector3Helper.UnitY">
            <summary>
            The Y unit <see cref="T:System.Numerics.Vector3"/> (0, 1, 0).
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Vector3Helper.UnitZ">
            <summary>
            The Z unit <see cref="T:System.Numerics.Vector3"/> (0, 0, 1).
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Vector3Helper.One">
            <summary>
            A <see cref="T:System.Numerics.Vector3"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Vector3Helper.Up">
            <summary>
            A unit <see cref="T:System.Numerics.Vector3"/> designating up (0, 1, 0).
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Vector3Helper.Down">
            <summary>
            A unit <see cref="T:System.Numerics.Vector3"/> designating down (0, -1, 0).
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Vector3Helper.Left">
            <summary>
            A unit <see cref="T:System.Numerics.Vector3"/> designating left (-1, 0, 0).
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Vector3Helper.Right">
            <summary>
            A unit <see cref="T:System.Numerics.Vector3"/> designating right (1, 0, 0).
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Vector3Helper.ForwardRH">
            <summary>
            A unit <see cref="T:System.Numerics.Vector3"/> designating forward in a right-handed coordinate system (0, 0, -1).
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Vector3Helper.ForwardLH">
            <summary>
            A unit <see cref="T:System.Numerics.Vector3"/> designating forward in a left-handed coordinate system (0, 0, 1).
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Vector3Helper.BackwardRH">
            <summary>
            A unit <see cref="T:System.Numerics.Vector3"/> designating backward in a right-handed coordinate system (0, 0, 1).
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Vector3Helper.BackwardLH">
            <summary>
            A unit <see cref="T:System.Numerics.Vector3"/> designating backward in a left-handed coordinate system (0, 0, -1).
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.IsNormalized(System.Numerics.Vector3)">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.IsZero(System.Numerics.Vector3)">
            <summary>
            Gets a value indicting whether this vector is zero
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.Get(System.Numerics.Vector3,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, or Z component, depending on the index.</value>
            <param name="v"></param>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component, and 2 for the Z component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 2].</exception>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.ToArray(System.Numerics.Vector3)">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A three-element array containing the components of the vector.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.Barycentric(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Single,System.Single,System.Numerics.Vector3@)">
            <summary>
            Returns a <see cref="T:System.Numerics.Vector3"/> containing the 3D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 3D triangle.
            </summary>
            <param name="value1">A <see cref="T:System.Numerics.Vector3"/> containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:System.Numerics.Vector3"/> containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:System.Numerics.Vector3"/> containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <param name="result">When the method completes, contains the 3D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.Barycentric(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:System.Numerics.Vector3"/> containing the 3D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 3D triangle.
            </summary>
            <param name="value1">A <see cref="T:System.Numerics.Vector3"/> containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:System.Numerics.Vector3"/> containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:System.Numerics.Vector3"/> containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <returns>A new <see cref="T:System.Numerics.Vector3"/> containing the 3D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.NearEqual(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Tests whether one 3D vector is near another 3D vector.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <param name="epsilon">The epsilon.</param>
            <returns><c>true</c> if left and right are near another 3D, <c>false</c> otherwise</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.NearEqual(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Tests whether one 3D vector is near another 3D vector.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <param name="epsilon">The epsilon.</param>
            <returns><c>true</c> if left and right are near another 3D, <c>false</c> otherwise</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.SmoothStep(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Single,System.Numerics.Vector3@)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.SmoothStep(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.Hermite(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Single,System.Numerics.Vector3@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.Hermite(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.CatmullRom(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Single,System.Numerics.Vector3@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.CatmullRom(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.Project(System.Numerics.Vector3@,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Numerics.Matrix4x4@,System.Numerics.Vector3@)">
            <summary>
            Projects a 3D vector from object space into screen space. 
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <param name="result">When the method completes, contains the vector in screen space.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.Project(System.Numerics.Vector3,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Numerics.Matrix4x4)">
            <summary>
            Projects a 3D vector from object space into screen space. 
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <returns>The vector in screen space.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.Unproject(System.Numerics.Vector3@,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Numerics.Matrix4x4@,System.Numerics.Vector3@)">
            <summary>
            Projects a 3D vector from screen space into object space. 
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <param name="result">When the method completes, contains the vector in object space.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.Unproject(System.Numerics.Vector3,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Numerics.Matrix4x4)">
            <summary>
            Projects a 3D vector from screen space into object space. 
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <returns>The vector in object space.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.Orthogonalize(System.Numerics.Vector3[],System.Numerics.Vector3[])">
            <summary>
            Orthogonalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthogonalized vectors.</param>
            <param name="source">The list of vectors to orthogonalize.</param>
            <remarks>
            <para>Orthogonalization is the process of making all vectors orthogonal to each other. This
            means that any given vector in the list will be orthogonal to any other given vector in the
            list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.Orthonormalize(System.Numerics.Vector3[],System.Numerics.Vector3[])">
            <summary>
            Orthonormalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthonormalized vectors.</param>
            <param name="source">The list of vectors to orthonormalize.</param>
            <remarks>
            <para>Orthonormalization is the process of making all vectors orthogonal to each
            other and making all vectors of unit length. This means that any given vector will
            be orthogonal to any other given vector in the list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.Transform(System.Numerics.Vector3[],System.Numerics.Quaternion@,System.Numerics.Vector3[])">
            <summary>
            Transforms an array of vectors by the given <see cref="T:System.Numerics.Quaternion"/> rotation.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="rotation">The <see cref="T:System.Numerics.Quaternion"/> rotation to apply.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.Transform(System.Numerics.Vector3@,HelixToolkit.Maths.Matrix3x3@,System.Numerics.Vector3@)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:HelixToolkit.Maths.Matrix3x3"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:HelixToolkit.Maths.Matrix3x3"/>.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:System.Numerics.Vector3"/>.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.Transform(System.Numerics.Vector3,HelixToolkit.Maths.Matrix3x3)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:HelixToolkit.Maths.Matrix3x3"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:HelixToolkit.Maths.Matrix3x3"/>.</param>
            <returns>The transformed <see cref="T:System.Numerics.Vector3"/>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.Transform(System.Numerics.Vector3,HelixToolkit.Maths.Matrix3x3@)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:HelixToolkit.Maths.Matrix3x3"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:HelixToolkit.Maths.Matrix3x3"/>.</param>
            <returns>The transformed <see cref="T:System.Numerics.Vector3"/>.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.Transform(System.Numerics.Vector3@,System.Numerics.Matrix4x4@,System.Numerics.Vector4@)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:System.Numerics.Matrix4x4"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:System.Numerics.Matrix4x4"/>.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:System.Numerics.Vector4"/>.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.Transform(System.Numerics.Vector3[],System.Numerics.Matrix4x4@,System.Numerics.Vector4[])">
            <summary>
            Transforms an array of 3D vectors by the given <see cref="T:System.Numerics.Matrix4x4"/>.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:System.Numerics.Matrix4x4"/>.</param>
            <param name="destination">The array for which the transformed vectors are stored.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.TransformCoordinate(System.Numerics.Vector3@,System.Numerics.Matrix4x4@,System.Numerics.Vector3@)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:System.Numerics.Matrix4x4"/>.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:System.Numerics.Matrix4x4"/>.</param>
            <param name="result">When the method completes, contains the transformed coordinates.</param>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the w component to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often preferred when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.TransformCoordinate(System.Numerics.Vector3,System.Numerics.Matrix4x4)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:System.Numerics.Matrix4x4"/>.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:System.Numerics.Matrix4x4"/>.</param>
            <returns>The transformed coordinates.</returns>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the w component to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often preferred when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.TransformCoordinate(System.Numerics.Vector3,System.Numerics.Matrix4x4@)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:System.Numerics.Matrix4x4"/>.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:System.Numerics.Matrix4x4"/>.</param>
            <returns>The transformed coordinates.</returns>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the w component to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often preferred when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.TransformCoordinate(System.Collections.Generic.IList{System.Numerics.Vector3},System.Numerics.Matrix4x4@,System.Collections.Generic.IList{System.Numerics.Vector3})">
            <summary>
            Performs a coordinate transformation on an array of vectors using the given <see cref="T:System.Numerics.Matrix4x4"/>.
            </summary>
            <param name="source">The array of coordinate vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:System.Numerics.Matrix4x4"/>.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the w component to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often preferred when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.TransformNormal(System.Numerics.Vector3@,System.Numerics.Matrix4x4@,System.Numerics.Vector3@)">
            <summary>
            Performs a normal transformation using the given <see cref="T:System.Numerics.Matrix4x4"/>.
            </summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transform">The transformation <see cref="T:System.Numerics.Matrix4x4"/>.</param>
            <param name="result">When the method completes, contains the transformed normal.</param>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth column of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often preferred for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.TransformNormal(System.Numerics.Vector3,System.Numerics.Matrix4x4@)">
            <summary>
            Performs a normal transformation using the given <see cref="T:System.Numerics.Matrix4x4"/>.
            </summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transform">The transformation <see cref="T:System.Numerics.Matrix4x4"/>.</param>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth column of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often preferred for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.TransformNormal(System.Collections.Generic.IList{System.Numerics.Vector3},System.Numerics.Matrix4x4@,System.Collections.Generic.IList{System.Numerics.Vector3})">
            <summary>
            Performs a normal transformation on an array of vectors using the given <see cref="T:System.Numerics.Matrix4x4"/>.
            </summary>
            <param name="source">The array of normal vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:System.Numerics.Matrix4x4"/>.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth column of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often preferred for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.AnyUndefined(System.Numerics.Vector3)">
            <summary>
            Determines whether any components of the vector are undefined (NaN).
            </summary>
            <param name="vector">The vector.</param>
            <returns>
            <c>true</c> if the vector has at least one undefined component; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.AngleBetween(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Calculates the angle (in radians) between two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The angle (in radians) between the vectors.</returns>
            <remarks>
            Note that the returned angle is never bigger than the constant <see cref="F:System.Math.PI"/>.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.SignedAngleBetween(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Calculates the signed angle (in radians) between two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <param name="axis">The vector around which the other vectors are rotated.</param>
            <returns>The signed angle (in radians) between two vectors.</returns>
            <remarks>
            The sign of the angle is positive in a counter-clockwise direction and negative in a clockwise direction
            when viewed from the side specified by the axis.
            </remarks>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.RotateAround(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Single)">
            <summary>
            Rotates the source around the target by the rotation angle around the supplied axis. 
            </summary>
            <param name="source">The position to rotate.</param>
            <param name="target">The point to rotate around.</param>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle to rotate by in radians.</param>
            <returns>The rotated vector.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.PointToPlanePosition(System.Numerics.Vector3,System.Numerics.Plane@)">
            <summary>
            Point to plane position. Front/Back/Intersecting.
            </summary>
            <param name="point">The point.</param>
            <param name="plane">The plane.</param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.Vector3Helper.PointToPlanePosition(System.Numerics.Vector3,System.Numerics.Plane)">
            <summary>
            Point to plane position. Front/Back/Intersecting.
            </summary>
            <param name="point">The point.</param>
            <param name="plane">The plane.</param>
            <returns></returns>
        </member>
        <member name="T:HelixToolkit.Maths.Vector4Helper">
            <summary>
            Represents a four dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Vector4Helper.SizeInBytes">
            <summary>
            The size of the <see cref="T:System.Numerics.Vector4"/> type, in bytes.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Vector4Helper.Zero">
            <summary>
            A <see cref="T:System.Numerics.Vector4"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Vector4Helper.UnitX">
            <summary>
            The X unit <see cref="T:System.Numerics.Vector4"/> (1, 0, 0, 0).
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Vector4Helper.UnitY">
            <summary>
            The Y unit <see cref="T:System.Numerics.Vector4"/> (0, 1, 0, 0).
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Vector4Helper.UnitZ">
            <summary>
            The Z unit <see cref="T:System.Numerics.Vector4"/> (0, 0, 1, 0).
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Vector4Helper.UnitW">
            <summary>
            The W unit <see cref="T:System.Numerics.Vector4"/> (0, 0, 0, 1).
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Vector4Helper.One">
            <summary>
            A <see cref="T:System.Numerics.Vector4"/> with all of its components set to one.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.Vector4Helper.IsNormalized(System.Numerics.Vector4)">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.Vector4Helper.IsZero(System.Numerics.Vector4)">
            <summary>
            Gets a value indicting whether this vector is zero
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.Vector4Helper.Get(System.Numerics.Vector4,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, Z, or W component, depending on the index.</value>
            <param name="v"></param>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z component, and 3 for the W component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="M:HelixToolkit.Maths.Vector4Helper.ToArray(System.Numerics.Vector4)">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A four-element array containing the components of the vector.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Vector4Helper.Barycentric(System.Numerics.Vector4@,System.Numerics.Vector4@,System.Numerics.Vector4@,System.Single,System.Single,System.Numerics.Vector4@)">
            <summary>
            Returns a <see cref="T:System.Numerics.Vector4"/> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 4D triangle.
            </summary>
            <param name="value1">A <see cref="T:System.Numerics.Vector4"/> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:System.Numerics.Vector4"/> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:System.Numerics.Vector4"/> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <param name="result">When the method completes, contains the 4D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Vector4Helper.Barycentric(System.Numerics.Vector4,System.Numerics.Vector4,System.Numerics.Vector4,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:System.Numerics.Vector4"/> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 4D triangle.
            </summary>
            <param name="value1">A <see cref="T:System.Numerics.Vector4"/> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:System.Numerics.Vector4"/> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:System.Numerics.Vector4"/> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <returns>A new <see cref="T:System.Numerics.Vector4"/> containing the 4D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Vector4Helper.SmoothStep(System.Numerics.Vector4@,System.Numerics.Vector4@,System.Single,System.Numerics.Vector4@)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Vector4Helper.SmoothStep(System.Numerics.Vector4,System.Numerics.Vector4,System.Single)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Vector4Helper.Hermite(System.Numerics.Vector4@,System.Numerics.Vector4@,System.Numerics.Vector4@,System.Numerics.Vector4@,System.Single,System.Numerics.Vector4@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Vector4Helper.Hermite(System.Numerics.Vector4,System.Numerics.Vector4,System.Numerics.Vector4,System.Numerics.Vector4,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Vector4Helper.CatmullRom(System.Numerics.Vector4@,System.Numerics.Vector4@,System.Numerics.Vector4@,System.Numerics.Vector4@,System.Single,System.Numerics.Vector4@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Vector4Helper.CatmullRom(System.Numerics.Vector4,System.Numerics.Vector4,System.Numerics.Vector4,System.Numerics.Vector4,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Vector4Helper.Orthogonalize(System.Numerics.Vector4[],System.Numerics.Vector4[])">
            <summary>
            Orthogonalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthogonalized vectors.</param>
            <param name="source">The list of vectors to orthogonalize.</param>
            <remarks>
            <para>Orthogonalization is the process of making all vectors orthogonal to each other. This
            means that any given vector in the list will be orthogonal to any other given vector in the
            list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:HelixToolkit.Maths.Vector4Helper.Orthonormalize(System.Numerics.Vector4[],System.Numerics.Vector4[])">
            <summary>
            Orthonormalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthonormalized vectors.</param>
            <param name="source">The list of vectors to orthonormalize.</param>
            <remarks>
            <para>Orthonormalization is the process of making all vectors orthogonal to each
            other and making all vectors of unit length. This means that any given vector will
            be orthogonal to any other given vector in the list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:HelixToolkit.Maths.Vector4Helper.Transform(System.Numerics.Vector4[],System.Numerics.Quaternion@,System.Numerics.Vector4[])">
            <summary>
            Transforms an array of vectors by the given <see cref="T:System.Numerics.Quaternion"/> rotation.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="rotation">The <see cref="T:System.Numerics.Quaternion"/> rotation to apply.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:HelixToolkit.Maths.Vector4Helper.Transform(System.Numerics.Vector4@,System.Numerics.Matrix4x4@,System.Numerics.Vector4@)">
            <summary>
            Transforms a 4D vector by the given <see cref="T:System.Numerics.Matrix4x4"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:System.Numerics.Matrix4x4"/>.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:System.Numerics.Vector4"/>.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Vector4Helper.Transform(System.Numerics.Vector4,System.Numerics.Matrix4x4@)">
            <summary>
            Transforms a 4D vector by the given <see cref="T:System.Numerics.Matrix4x4"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:System.Numerics.Matrix4x4"/>.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Vector4Helper.Transform(System.Numerics.Vector4[],System.Numerics.Matrix4x4@,System.Numerics.Vector4[])">
            <summary>
            Transforms an array of 4D vectors by the given <see cref="T:System.Numerics.Matrix4x4"/>.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:System.Numerics.Matrix4x4"/>.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:HelixToolkit.Maths.VectorComparisonExtensions.AllSmallerOrEqual(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Returns whether ALL elements of this are SmallerOrEqual the corresponding element of v2.
            ATTENTION: For example (v1.AllSmaller(v2)) is not the same as !(v1.AllGreaterOrEqual(v2)) but !(v1.AnyGreaterOrEqual(v2)).
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.VectorComparisonExtensions.AllSmallerOrEqual(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Returns whether ALL elements of this are SmallerOrEqual the corresponding element of v2.
            ATTENTION: For example (v1.AllSmaller(v2)) is not the same as !(v1.AllGreaterOrEqual(v2)) but !(v1.AnyGreaterOrEqual(v2)).
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.VectorComparisonExtensions.AllSmallerOrEqual(System.Numerics.Vector3,System.Single)">
            <summary>
            Returns whether ALL elements of v are SmallerOrEqual value.
            ATTENTION: For example (v.AllSmaller(value)) is not the same as !(v.AllGreaterOrEqual(value)) but !(v.AnyGreaterOrEqual(value)).
            </summary>
            <param name="v"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.VectorComparisonExtensions.AllSmaller(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Returns whether ALL elements of this are Smaller the corresponding element of v2.
            ATTENTION: For example (v1.AllSmaller(v2)) is not the same as !(v1.AllGreaterOrEqual(v2)) but !(v1.AnyGreaterOrEqual(v2)).
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.VectorComparisonExtensions.AllSmaller(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Returns whether ALL elements of this are Smaller the corresponding element of v2.
            ATTENTION: For example (v1.AllSmaller(v2)) is not the same as !(v1.AllGreaterOrEqual(v2)) but !(v1.AnyGreaterOrEqual(v2)).
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.VectorComparisonExtensions.AllSmaller(System.Numerics.Vector3,System.Single)">
            <summary>
            Returns whether ALL elements of v are Smaller value.
            ATTENTION: For example (v.AllSmaller(value)) is not the same as !(v.AllGreaterOrEqual(value)) but !(v.AnyGreaterOrEqual(value)).
            </summary>
            <param name="v"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.VectorComparisonExtensions.AnySmallerOrEqual(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Returns whether AT LEAST ONE element of v1 is SmallerOrEqual the corresponding element of v2.
            ATTENTION: For example (v1.AllSmaller(v2)) is not the same as !(v1.AllGreaterOrEqual(v2)) but !(v1.AnyGreaterOrEqual(v2)).
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.VectorComparisonExtensions.AnySmallerOrEqual(System.Numerics.Vector3,System.Single)">
            <summary>
            Returns whether AT LEAST ONE element of v is SmallerOrEqual value.
            ATTENTION: For example (v.AllSmaller(value)) is not the same as !(v.AllGreaterOrEqual(value)) but !(v.AnyGreaterOrEqual(value)).
            </summary>
            <param name="v"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.VectorComparisonExtensions.AllGreaterOrEqual(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Returns whether ALL elements of v1 are GreaterOrEqual the corresponding element of v2.
            ATTENTION: For example (v1.AllSmaller(v2)) is not the same as !(v1.AllGreaterOrEqual(v2)) but !(v1.AnyGreaterOrEqual(v2)).
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.VectorComparisonExtensions.AllGreaterOrEqual(System.Numerics.Vector3,System.Single)">
            <summary>
            Returns whether ALL elements of v are GreaterOrEqual value.
            ATTENTION: For example (v.AllSmaller(value)) is not the same as !(v.AllGreaterOrEqual(value)) but !(v.AnyGreaterOrEqual(value)).
            </summary>
            <param name="v"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.VectorComparisonExtensions.AnyGreaterOrEqual(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Returns whether AT LEAST ONE element of v1 is GreaterOrEqual the corresponding element of v2.
            ATTENTION: For example (v1.AllSmaller(v2)) is not the same as !(v1.AllGreaterOrEqual(v2)) but !(v1.AnyGreaterOrEqual(v2)).
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.VectorComparisonExtensions.AnyGreaterOrEqual(System.Numerics.Vector3,System.Single)">
            <summary>
            Returns whether AT LEAST ONE element of v is GreaterOrEqual value.
            ATTENTION: For example (v.AllSmaller(a,b)) is not the same as !(v.AllGreaterOrEqual(value)) but !(v.AnyGreaterOrEqual(value)).
            </summary>
            <param name="v"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.VectorComparisonExtensions.ComponentMin(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Component-wise min vec
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.VectorComparisonExtensions.ComponentMax(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Component-wise max vec
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.VectorExtensions.ToVector3(System.Numerics.Vector2,System.Single)">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Numerics.Vector2"/> to <see cref="T:System.Numerics.Vector3"/>.
            </summary>
            <param name="vector">The <see cref="T:System.Numerics.Vector2"/> value.</param>
            <param name="z">The z value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.VectorExtensions.ToVector4(System.Numerics.Vector2,System.Single,System.Single)">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Numerics.Vector2"/> to <see cref="T:System.Numerics.Vector4"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="z">The z value.</param>
            <param name="w">The w value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.VectorExtensions.ToRectangleF(System.Numerics.Vector2)">
            <summary>
            To the rectangleF.
            </summary>
            <param name="vector">The <see cref="T:System.Numerics.Vector2"/></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.VectorExtensions.ToRectangle(System.Numerics.Vector2)">
            <summary>
            To the rectangle.
            </summary>
            <param name="vector">The <see cref="T:System.Numerics.Vector2"/></param>
            <returns></returns>
        </member>
        <member name="M:HelixToolkit.Maths.VectorExtensions.ToVector2(System.Numerics.Vector3)">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Numerics.Vector3"/> to <see cref="T:System.Numerics.Vector2"/>.
            </summary>
            <param name="vector">The <see cref="T:System.Numerics.Vector3"/> value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.VectorExtensions.ToVector4(System.Numerics.Vector3,System.Single)">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Numerics.Vector3"/> to <see cref="T:System.Numerics.Vector4"/>.
            </summary>
            <param name="vector">The <see cref="T:System.Numerics.Vector3"/> value.</param>
            <param name="w">The w value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.VectorExtensions.ToVector2(System.Numerics.Vector4)">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Numerics.Vector4"/> to <see cref="T:System.Numerics.Vector2"/>.
            </summary>
            <param name="vector">The <see cref="T:System.Numerics.Vector4"/> value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.VectorExtensions.ToVector3(System.Numerics.Vector4)">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Numerics.Vector4"/> to <see cref="T:System.Numerics.Vector3"/>.
            </summary>
            <param name="vector">The <see cref="T:System.Numerics.Vector4"/> value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:HelixToolkit.Maths.Viewport">
            <summary>
            Defines the viewport dimensions.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Viewport.X">
            <summary>
            Position of the pixel coordinate of the upper-left corner of the viewport.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Viewport.Y">
            <summary>
            Position of the pixel coordinate of the upper-left corner of the viewport.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Viewport.Width">
            <summary>
            Width dimension of the viewport.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Viewport.Height">
            <summary>
            Height dimension of the viewport.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Viewport.MinDepth">
            <summary>
            Gets or sets the minimum depth of the clip volume.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.Viewport.MaxDepth">
            <summary>
            Gets or sets the maximum depth of the clip volume.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.Viewport.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Viewport"/> struct.
            </summary>
            <param name="x">The x coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="y">The y coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="width">The width of the viewport in pixels.</param>
            <param name="height">The height of the viewport in pixels.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Viewport.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Viewport"/> struct.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:HelixToolkit.Maths.Viewport.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Viewport"/> struct.
            </summary>
            <param name="x">The x coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="y">The y coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="width">The width of the viewport in pixels.</param>
            <param name="height">The height of the viewport in pixels.</param>
            <param name="minDepth">The minimum depth of the clip volume.</param>
            <param name="maxDepth">The maximum depth of the clip volume.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Viewport.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Viewport"/> struct.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="minDepth"></param>
            <param name="maxDepth"></param>
        </member>
        <member name="M:HelixToolkit.Maths.Viewport.#ctor(HelixToolkit.Maths.Rectangle)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.Viewport"/> struct.
            </summary>
            <param name="bounds">A bounding box that defines the location and size of the viewport in a render target.</param>
        </member>
        <member name="P:HelixToolkit.Maths.Viewport.Bounds">
            <summary>
            Gets the size of this resource.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="M:HelixToolkit.Maths.Viewport.Equals(HelixToolkit.Maths.Viewport@)">
            <summary>
            Determines whether the specified <see cref="T:HelixToolkit.Maths.Viewport"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:HelixToolkit.Maths.Viewport"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:HelixToolkit.Maths.Viewport"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Viewport.Equals(HelixToolkit.Maths.Viewport)">
            <summary>
            Determines whether the specified <see cref="T:HelixToolkit.Maths.Viewport"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:HelixToolkit.Maths.Viewport"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:HelixToolkit.Maths.Viewport"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Viewport.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Viewport.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.Viewport.op_Equality(HelixToolkit.Maths.Viewport,HelixToolkit.Maths.Viewport)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Viewport.op_Inequality(HelixToolkit.Maths.Viewport,HelixToolkit.Maths.Viewport)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Viewport.ToString">
            <summary>
            Retrieves a string representation of this object.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Viewport.Project(System.Numerics.Vector3,System.Numerics.Matrix4x4,System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
            <summary>
            Projects a 3D vector from object space into screen space.
            </summary>
            <param name="source">The vector to project.</param>
            <param name="projection">The projection matrix.</param>
            <param name="view">The view matrix.</param>
            <param name="world">The world matrix.</param>
            <returns>The projected vector.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Viewport.Project(System.Numerics.Vector3@,System.Numerics.Matrix4x4@,System.Numerics.Vector3@)">
            <summary>
            Projects a 3D vector from object space into screen space.
            </summary>
            <param name="source">The vector to project.</param>
            <param name="matrix">A combined WorldViewProjection matrix.</param>
            <param name="vector">The projected vector.</param>
        </member>
        <member name="M:HelixToolkit.Maths.Viewport.Unproject(System.Numerics.Vector3,System.Numerics.Matrix4x4,System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
            <summary>
            Converts a screen space point into a corresponding point in world space.
            </summary>
            <param name="source">The vector to project.</param>
            <param name="projection">The projection matrix.</param>
            <param name="view">The view matrix.</param>
            <param name="world">The world matrix.</param>
            <returns>The unprojected Vector.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.Viewport.Unproject(System.Numerics.Vector3@,System.Numerics.Matrix4x4@,System.Numerics.Vector3@)">
            <summary>
            Converts a screen space point into a corresponding point in world space.
            </summary>
            <param name="source">The vector to project.</param>
            <param name="matrix">An inverted combined WorldViewProjection matrix.</param>
            <param name="vector">The unprojected vector.</param>
        </member>
        <member name="P:HelixToolkit.Maths.Viewport.AspectRatio">
            <summary>
            Gets the aspect ratio used by the viewport.
            </summary>
            <value>The aspect ratio.</value>
        </member>
        <member name="T:HelixToolkit.Maths.ViewportF">
            <summary>
            Defines the viewport dimensions using float coordinates for (X,Y,Width,Height).
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.ViewportF.X">
            <summary>
            Position of the pixel coordinate of the upper-left corner of the viewport.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.ViewportF.Y">
            <summary>
            Position of the pixel coordinate of the upper-left corner of the viewport.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.ViewportF.Width">
            <summary>
            Width dimension of the viewport.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.ViewportF.Height">
            <summary>
            Height dimension of the viewport.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.ViewportF.MinDepth">
            <summary>
            Gets or sets the minimum depth of the clip volume.
            </summary>
        </member>
        <member name="F:HelixToolkit.Maths.ViewportF.MaxDepth">
            <summary>
            Gets or sets the maximum depth of the clip volume.
            </summary>
        </member>
        <member name="M:HelixToolkit.Maths.ViewportF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.ViewportF"/> struct.
            </summary>
            <param name="x">The x coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="y">The y coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="width">The width of the viewport in pixels.</param>
            <param name="height">The height of the viewport in pixels.</param>
        </member>
        <member name="M:HelixToolkit.Maths.ViewportF.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.ViewportF"/> struct.
            </summary>
            <param name="x">The x coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="y">The y coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="width">The width of the viewport in pixels.</param>
            <param name="height">The height of the viewport in pixels.</param>
            <param name="minDepth">The minimum depth of the clip volume.</param>
            <param name="maxDepth">The maximum depth of the clip volume.</param>
        </member>
        <member name="M:HelixToolkit.Maths.ViewportF.#ctor(HelixToolkit.Maths.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:HelixToolkit.Maths.ViewportF"/> struct.
            </summary>
            <param name="bounds">A bounding box that defines the location and size of the viewport in a render target.</param>
        </member>
        <member name="P:HelixToolkit.Maths.ViewportF.Bounds">
            <summary>
            Gets the size of this resource.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="M:HelixToolkit.Maths.ViewportF.Equals(HelixToolkit.Maths.ViewportF@)">
            <summary>
            Determines whether the specified <see cref="T:HelixToolkit.Maths.ViewportF"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:HelixToolkit.Maths.ViewportF"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:HelixToolkit.Maths.ViewportF"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.ViewportF.Equals(HelixToolkit.Maths.ViewportF)">
            <summary>
            Determines whether the specified <see cref="T:HelixToolkit.Maths.ViewportF"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:HelixToolkit.Maths.ViewportF"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:HelixToolkit.Maths.ViewportF"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.ViewportF.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.ViewportF.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:HelixToolkit.Maths.ViewportF.op_Equality(HelixToolkit.Maths.ViewportF,HelixToolkit.Maths.ViewportF)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ViewportF.op_Inequality(HelixToolkit.Maths.ViewportF,HelixToolkit.Maths.ViewportF)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ViewportF.ToString">
            <summary>
            Retrieves a string representation of this object.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ViewportF.Project(System.Numerics.Vector3,System.Numerics.Matrix4x4,System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
            <summary>
            Projects a 3D vector from object space into screen space.
            </summary>
            <param name="source">The vector to project.</param>
            <param name="projection">The projection matrix.</param>
            <param name="view">The view matrix.</param>
            <param name="world">The world matrix.</param>
            <returns>The projected vector.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ViewportF.Project(System.Numerics.Vector3@,System.Numerics.Matrix4x4@,System.Numerics.Vector3@)">
            <summary>
            Projects a 3D vector from object space into screen space.
            </summary>
            <param name="source">The vector to project.</param>
            <param name="matrix">A combined WorldViewProjection matrix.</param>
            <param name="vector">The projected vector.</param>
        </member>
        <member name="M:HelixToolkit.Maths.ViewportF.Unproject(System.Numerics.Vector3,System.Numerics.Matrix4x4,System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
            <summary>
            Converts a screen space point into a corresponding point in world space.
            </summary>
            <param name="source">The vector to project.</param>
            <param name="projection">The projection matrix.</param>
            <param name="view">The view matrix.</param>
            <param name="world">The world matrix.</param>
            <returns>The unprojected Vector.</returns>
        </member>
        <member name="M:HelixToolkit.Maths.ViewportF.Unproject(System.Numerics.Vector3@,System.Numerics.Matrix4x4@,System.Numerics.Vector3@)">
            <summary>
            Converts a screen space point into a corresponding point in world space.
            </summary>
            <param name="source">The vector to project.</param>
            <param name="matrix">An inverted combined WorldViewProjection matrix.</param>
            <param name="vector">The unprojected vector.</param>
        </member>
        <member name="P:HelixToolkit.Maths.ViewportF.AspectRatio">
            <summary>
            Gets the aspect ratio used by the viewport.
            </summary>
            <value>The aspect ratio.</value>
        </member>
        <member name="M:HelixToolkit.Maths.ViewportF.op_Implicit(HelixToolkit.Maths.Viewport)~HelixToolkit.Maths.ViewportF">
            <summary>
            Performs an explicit conversion from <see cref="T:HelixToolkit.Maths.Viewport"/> to <see cref="T:HelixToolkit.Maths.ViewportF"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute">
            <summary>
            Specifies the priority of a member in overload resolution. When unspecified, the default priority is 0.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute"/> class.
            </summary>
            <param name="priority">The priority of the attributed member. Higher numbers are prioritized, lower numbers are deprioritized. 0 is the default if no attribute is present.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.Priority">
            <summary>
            The priority of the member.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ParamCollectionAttribute">
            <summary>
            Indicates that a method will allow a variable number of arguments in its invocation.
            </summary>
        </member>
    </members>
</doc>
